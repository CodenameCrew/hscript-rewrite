// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif


void Lambda_obj::__construct() { }

Dynamic Lambda_obj::__CreateEmpty() { return new Lambda_obj; }

void *Lambda_obj::_hx_vtable = 0;

Dynamic Lambda_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Lambda_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4cec6e4b;
}

::cpp::VirtualArray Lambda_obj::array( ::Dynamic it){
	::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
	{
		 ::Dynamic i = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			a->push(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
		}
	}
	return a;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,array,return )

 ::haxe::ds::List Lambda_obj::list( ::Dynamic it){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
	{
		 ::Dynamic i = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			l->add(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
		}
	}
	return l;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,list,return )

::cpp::VirtualArray Lambda_obj::map( ::Dynamic it, ::Dynamic f){
	::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			_g->push(f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()));
		}
	}
	return _g;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,map,return )

::cpp::VirtualArray Lambda_obj::mapi( ::Dynamic it, ::Dynamic f){
	int i = 0;
	::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			i = (i + 1);
			_g->push(f((i - 1),x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()));
		}
	}
	return _g;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,mapi,return )

::cpp::VirtualArray Lambda_obj::flatten( ::Dynamic it){
	::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
	{
		 ::Dynamic e = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			 ::Dynamic x = e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
			while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
				_g->push(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
			}
		}
	}
	return _g;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,flatten,return )

::cpp::VirtualArray Lambda_obj::flatMap( ::Dynamic it, ::Dynamic f){
	::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			_g->push(f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()));
		}
	}
	::cpp::VirtualArray _g1 = ::cpp::VirtualArray_obj::__new(0);
	{
		 ::Dynamic e = _g->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			 ::Dynamic x1 = e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
			while(( (bool)(x1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
				_g1->push(x1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
			}
		}
	}
	return _g1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,flatMap,return )

bool Lambda_obj::has( ::Dynamic it, ::Dynamic elt){
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			if (::hx::IsEq( x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)(),elt )) {
				return true;
			}
		}
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,has,return )

bool Lambda_obj::exists( ::Dynamic it, ::Dynamic f){
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			if (( (bool)(f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)())) )) {
				return true;
			}
		}
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,exists,return )

bool Lambda_obj::foreach( ::Dynamic it, ::Dynamic f){
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			if (!(( (bool)(f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)())) ))) {
				return false;
			}
		}
	}
	return true;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,foreach,return )

void Lambda_obj::iter( ::Dynamic it, ::Dynamic f){
	 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
	while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
		f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,iter,(void))

::cpp::VirtualArray Lambda_obj::filter( ::Dynamic it, ::Dynamic f){
	::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			 ::Dynamic x1 = x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
			if (( (bool)(f(x1)) )) {
				_g->push(x1);
			}
		}
	}
	return _g;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,filter,return )

 ::Dynamic Lambda_obj::fold( ::Dynamic it, ::Dynamic f, ::Dynamic first){
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			first = f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)(),first);
		}
	}
	return first;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lambda_obj,fold,return )

 ::Dynamic Lambda_obj::foldi( ::Dynamic it, ::Dynamic f, ::Dynamic first){
	int i = 0;
	{
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			first = f(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)(),first,i);
			i = (i + 1);
		}
	}
	return first;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lambda_obj,foldi,return )

int Lambda_obj::count( ::Dynamic it, ::Dynamic pred){
	int n = 0;
	if (::hx::IsNull( pred )) {
		 ::Dynamic _ = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(_->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			_->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
			n = (n + 1);
		}
	}
	else {
		 ::Dynamic x = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			if (( (bool)(pred(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)())) )) {
				n = (n + 1);
			}
		}
	}
	return n;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,count,return )

bool Lambda_obj::empty( ::Dynamic it){
	return !(( (bool)(it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)()->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,empty,return )

int Lambda_obj::indexOf( ::Dynamic it, ::Dynamic v){
	int i = 0;
	{
		 ::Dynamic v2 = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(v2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			if (::hx::IsEq( v,v2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)() )) {
				return i;
			}
			i = (i + 1);
		}
	}
	return -1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,indexOf,return )

 ::Dynamic Lambda_obj::find( ::Dynamic it, ::Dynamic f){
	{
		 ::Dynamic v = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			 ::Dynamic v1 = v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
			if (( (bool)(f(v1)) )) {
				return v1;
			}
		}
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,find,return )

int Lambda_obj::findIndex( ::Dynamic it, ::Dynamic f){
	int i = 0;
	{
		 ::Dynamic v = it->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			if (( (bool)(f(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)())) )) {
				return i;
			}
			i = (i + 1);
		}
	}
	return -1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,findIndex,return )

::cpp::VirtualArray Lambda_obj::concat( ::Dynamic a, ::Dynamic b){
	::cpp::VirtualArray l = ::cpp::VirtualArray_obj::__new();
	{
		 ::Dynamic x = a->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			l->push(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
		}
	}
	{
		 ::Dynamic x1 = b->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		while(( (bool)(x1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			l->push(x1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
		}
	}
	return l;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,concat,return )


Lambda_obj::Lambda_obj()
{
}

bool Lambda_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"has") ) { outValue = has_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mapi") ) { outValue = mapi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iter") ) { outValue = iter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fold") ) { outValue = fold_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"find") ) { outValue = find_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { outValue = array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foldi") ) { outValue = foldi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"count") ) { outValue = count_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foreach") ) { outValue = foreach_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"findIndex") ) { outValue = findIndex_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Lambda_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Lambda_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Lambda_obj::__mClass;

static ::String Lambda_obj_sStaticFields[] = {
	HX_("array",99,6d,8f,25),
	HX_("list",5e,1c,b3,47),
	HX_("map",9c,0a,53,00),
	HX_("mapi",4d,3e,56,48),
	HX_("flatten",c4,ab,fb,e6),
	HX_("flatMap",63,10,de,e6),
	HX_("has",5a,3f,4f,00),
	HX_("exists",dc,1d,e0,bf),
	HX_("foreach",8a,fd,e4,d9),
	HX_("iter",18,c5,bf,45),
	HX_("filter",b8,1f,35,85),
	HX_("fold",01,5c,c0,43),
	HX_("foldi",48,25,90,04),
	HX_("count",cf,44,63,4a),
	HX_("empty",8d,3a,da,6f),
	HX_("indexOf",c9,48,bf,e0),
	HX_("find",39,d0,bb,43),
	HX_("findIndex",19,cc,0b,ad),
	HX_("concat",14,09,d0,c7),
	::String(null())
};

void Lambda_obj::__register()
{
	Lambda_obj _hx_dummy;
	Lambda_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Lambda",27,a7,54,85);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lambda_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Lambda_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Lambda_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lambda_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lambda_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

