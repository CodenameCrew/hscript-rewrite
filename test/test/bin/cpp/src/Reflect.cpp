// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif


void Reflect_obj::__construct() { }

Dynamic Reflect_obj::__CreateEmpty() { return new Reflect_obj; }

void *Reflect_obj::_hx_vtable = 0;

Dynamic Reflect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Reflect_obj > _hx_result = new Reflect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Reflect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x769a515d;
}

bool Reflect_obj::hasField( ::Dynamic o,::String field){
	return (::hx::IsNotNull( o ) && ( (bool)(o->__HasField(field)) ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,hasField,return )

 ::Dynamic Reflect_obj::field( ::Dynamic o,::String field){
	return ::hx::IsNull( o ) ? null() : o->__Field(field,::hx::paccNever);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,field,return )

void Reflect_obj::setField( ::Dynamic o,::String field, ::Dynamic value){
	if (::hx::IsNotNull( o )) {
		o->__SetField(field,value,::hx::paccNever);
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reflect_obj,setField,(void))

 ::Dynamic Reflect_obj::getProperty( ::Dynamic o,::String field){
	return ::hx::IsNull( o ) ? null() : o->__Field(field,::hx::paccAlways);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,getProperty,return )

void Reflect_obj::setProperty( ::Dynamic o,::String field, ::Dynamic value){
	if (::hx::IsNotNull( o )) {
		o->__SetField(field,value,::hx::paccAlways);
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reflect_obj,setProperty,(void))

 ::Dynamic Reflect_obj::callMethod( ::Dynamic o, ::Dynamic func,::cpp::VirtualArray args){
	if ((::hx::IsNotNull( func ) && ::hx::IsEq( func->__GetType(),3 ))) {
		if (::hx::IsNull( o )) {
			HX_STACK_DO_THROW(HX_INVALID_OBJECT);
		}
		func = o->__Field(func,::hx::paccDynamic);
	}
	if (::hx::IsNull( func )) {
		HX_STACK_DO_THROW(HX_NULL_FUNCTION_POINTER);
	}
	func->__SetThis(o);
	return func->__Run(args);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reflect_obj,callMethod,return )

::Array< ::String > Reflect_obj::fields( ::Dynamic o){
	if (::hx::IsNull( o )) {
		return ::Array_obj< ::String >::__new();
	}
	::Array< ::String > a = ::Array_obj< ::String >::__new(0);
	o->__GetFields(a);
	return a;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,fields,return )

bool Reflect_obj::isFunction( ::Dynamic f){
	return (::hx::IsNotNull( f ) && ::hx::IsEq( f->__GetType(),6 ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,isFunction,return )

int Reflect_obj::compare( ::Dynamic a, ::Dynamic b){
	return ::hx::IsEq( a,b ) ? 0 : ::hx::IsGreater( a,b ) ? 1 : -1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,compare,return )

bool Reflect_obj::compareMethods( ::Dynamic f1, ::Dynamic f2){
	if (::hx::IsEq( f1,f2 )) {
		return true;
	}
	if ((!(::Reflect_obj::isFunction(f1)) || !(::Reflect_obj::isFunction(f2)))) {
		return false;
	}
	return  ::__hxcpp_same_closure(f1,f2);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,compareMethods,return )

bool Reflect_obj::isObject( ::Dynamic v){
	if (::hx::IsNull( v )) {
		return false;
	}
	int t = ( (int)(v->__GetType()) );
	return ((((t == 4) || (t == 8)) || (t == 3)) || (t == 5));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,isObject,return )

bool Reflect_obj::isEnumValue( ::Dynamic v){
	return (::hx::IsNotNull( v ) && ::hx::IsEq( v->__GetType(),7 ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,isEnumValue,return )

bool Reflect_obj::deleteField( ::Dynamic o,::String field){
	if (::hx::IsNull( o )) {
		return false;
	}
	return  ::__hxcpp_anon_remove(o,field);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,deleteField,return )

 ::Dynamic Reflect_obj::copy( ::Dynamic o){
	if (::hx::IsNull( o )) {
		return null();
	}
	if (::hx::IsEq( o->__GetType(),3 )) {
		return o;
	}
	if (::hx::IsEq( o->__GetType(),5 )) {
		return o->__Field(HX_("copy",b5,bb,c4,41),::hx::paccDynamic)();
	}
	 ::Dynamic o2 =  ::Dynamic(::hx::Anon_obj::Create(0));
	{
		int _g = 0;
		::Array< ::String > _g1 = ::Reflect_obj::fields(o);
		while((_g < _g1->length)){
			::String f = _g1->__get(_g);
			++_g;
			::Reflect_obj::setField(o2,f,::Reflect_obj::field(o,f));
		}
	}
	return o2;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,copy,return )

 ::Dynamic Reflect_obj::makeVarArgs( ::Dynamic f){
	return  ::__hxcpp_create_var_args(f);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,makeVarArgs,return )


Reflect_obj::Reflect_obj()
{
}

bool Reflect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"field") ) { outValue = field_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { outValue = fields_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasField") ) { outValue = hasField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setField") ) { outValue = setField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObject") ) { outValue = isObject_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"callMethod") ) { outValue = callMethod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isFunction") ) { outValue = isFunction_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getProperty") ) { outValue = getProperty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setProperty") ) { outValue = setProperty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEnumValue") ) { outValue = isEnumValue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"deleteField") ) { outValue = deleteField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makeVarArgs") ) { outValue = makeVarArgs_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compareMethods") ) { outValue = compareMethods_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Reflect_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Reflect_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Reflect_obj::__mClass;

static ::String Reflect_obj_sStaticFields[] = {
	HX_("hasField",00,df,eb,8c),
	HX_("field",ba,94,93,00),
	HX_("setField",b8,fd,c7,0e),
	HX_("getProperty",0b,0b,2c,d2),
	HX_("setProperty",17,12,99,dc),
	HX_("callMethod",1f,ce,8a,34),
	HX_("fields",79,8e,8e,80),
	HX_("isFunction",22,bd,01,8f),
	HX_("compare",a5,18,69,83),
	HX_("compareMethods",4d,ac,7b,37),
	HX_("isObject",49,1a,a9,6d),
	HX_("isEnumValue",66,b7,87,06),
	HX_("deleteField",8f,c8,88,90),
	HX_("copy",b5,bb,c4,41),
	HX_("makeVarArgs",96,bf,88,06),
	::String(null())
};

void Reflect_obj::__register()
{
	Reflect_obj _hx_dummy;
	Reflect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Reflect",1d,ac,7a,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reflect_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Reflect_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Reflect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reflect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reflect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

