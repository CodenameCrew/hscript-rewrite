// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_SysTools
#include <haxe/SysTools.h>
#endif
#ifndef INCLUDED_haxe_iterators_StringIterator
#include <haxe/iterators/StringIterator.h>
#endif
#ifndef INCLUDED_haxe_iterators_StringKeyValueIterator
#include <haxe/iterators/StringKeyValueIterator.h>
#endif

static const ::String _hx_array_data_0363db6a_1[] = {
	HX_("&quot;",2c,d9,81,8f),
};
static const ::String _hx_array_data_0363db6a_2[] = {
	HX_("&amp;",dd,d4,aa,21),
};
static const ::String _hx_array_data_0363db6a_3[] = {
	HX_("&#039;",62,26,77,78),
};
static const ::String _hx_array_data_0363db6a_4[] = {
	HX_("&lt;",4d,74,70,19),
};
static const ::String _hx_array_data_0363db6a_5[] = {
	HX_("&gt;",08,a9,6c,19),
};
static const ::String _hx_array_data_0363db6a_15[] = {
	HX_("\"",22,00,00,00),
};
static const ::String _hx_array_data_0363db6a_16[] = {
	HX_("\\\"",46,50,00,00),
};
static const ::String _hx_array_data_0363db6a_17[] = {
	HX_("\\",5c,00,00,00),
};
static const ::String _hx_array_data_0363db6a_18[] = {
	HX_("\"",22,00,00,00),
};

void StringTools_obj::__construct() { }

Dynamic StringTools_obj::__CreateEmpty() { return new StringTools_obj; }

void *StringTools_obj::_hx_vtable = 0;

Dynamic StringTools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringTools_obj > _hx_result = new StringTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StringTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x084f186e;
}

::String StringTools_obj::urlEncode(::String s){
	return ( (::String)(s.__URLEncode()) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,urlEncode,return )

::String StringTools_obj::urlDecode(::String s){
	return ( (::String)(s.__URLDecode()) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,urlDecode,return )

::String StringTools_obj::htmlEscape(::String s, ::Dynamic quotes){
            	HX_JUST_GC_STACKFRAME
	 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
	{
		int _g_offset = 0;
		while((_g_offset < s.length)){
			_g_offset = (_g_offset + 1);
			int index = (_g_offset - 1);
			int c = s.cca(index);
			bool _hx_tmp;
			if ((c >= 55296)) {
				_hx_tmp = (c <= 56319);
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				c = (((c - 55232) << 10) | (s.cca((index + 1)) & 1023));
			}
			int c1 = c;
			if ((c1 >= 65536)) {
				_g_offset = (_g_offset + 1);
			}
			switch((int)(c1)){
				case (int)34: {
					if (( (bool)(quotes) )) {
						if (::hx::IsNotNull( buf->charBuf )) {
							buf->flush();
						}
						if (::hx::IsNull( buf->b )) {
							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_1,1);
						}
						else {
							buf->b->push(HX_("&quot;",2c,d9,81,8f));
						}
					}
					else {
						if ((c1 >= 127)) {
							::String x = ::String::fromCharCode(c1);
							if (::hx::IsNotNull( buf->charBuf )) {
								buf->flush();
							}
							if (::hx::IsNull( buf->b )) {
								buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
							}
							else {
								::Array< ::String > buf1 = buf->b;
								buf1->push(::Std_obj::string(x));
							}
						}
						else {
							if (::hx::IsNull( buf->charBuf )) {
								buf->charBuf = ::Array_obj< char >::__new();
							}
							buf->charBuf->push(c1);
						}
					}
				}
				break;
				case (int)38: {
					if (::hx::IsNotNull( buf->charBuf )) {
						buf->flush();
					}
					if (::hx::IsNull( buf->b )) {
						buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_2,1);
					}
					else {
						buf->b->push(HX_("&amp;",dd,d4,aa,21));
					}
				}
				break;
				case (int)39: {
					if (( (bool)(quotes) )) {
						if (::hx::IsNotNull( buf->charBuf )) {
							buf->flush();
						}
						if (::hx::IsNull( buf->b )) {
							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_3,1);
						}
						else {
							buf->b->push(HX_("&#039;",62,26,77,78));
						}
					}
					else {
						if ((c1 >= 127)) {
							::String x1 = ::String::fromCharCode(c1);
							if (::hx::IsNotNull( buf->charBuf )) {
								buf->flush();
							}
							if (::hx::IsNull( buf->b )) {
								buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
							}
							else {
								::Array< ::String > buf2 = buf->b;
								buf2->push(::Std_obj::string(x1));
							}
						}
						else {
							if (::hx::IsNull( buf->charBuf )) {
								buf->charBuf = ::Array_obj< char >::__new();
							}
							buf->charBuf->push(c1);
						}
					}
				}
				break;
				case (int)60: {
					if (::hx::IsNotNull( buf->charBuf )) {
						buf->flush();
					}
					if (::hx::IsNull( buf->b )) {
						buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_4,1);
					}
					else {
						buf->b->push(HX_("&lt;",4d,74,70,19));
					}
				}
				break;
				case (int)62: {
					if (::hx::IsNotNull( buf->charBuf )) {
						buf->flush();
					}
					if (::hx::IsNull( buf->b )) {
						buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_5,1);
					}
					else {
						buf->b->push(HX_("&gt;",08,a9,6c,19));
					}
				}
				break;
				default:{
					if ((c1 >= 127)) {
						::String x2 = ::String::fromCharCode(c1);
						if (::hx::IsNotNull( buf->charBuf )) {
							buf->flush();
						}
						if (::hx::IsNull( buf->b )) {
							buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
						}
						else {
							::Array< ::String > buf3 = buf->b;
							buf3->push(::Std_obj::string(x2));
						}
					}
					else {
						if (::hx::IsNull( buf->charBuf )) {
							buf->charBuf = ::Array_obj< char >::__new();
						}
						buf->charBuf->push(c1);
					}
				}
			}
		}
	}
	return buf->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,htmlEscape,return )

::String StringTools_obj::htmlUnescape(::String s){
	return s.split(HX_("&gt;",08,a9,6c,19))->join(HX_(">",3e,00,00,00)).split(HX_("&lt;",4d,74,70,19))->join(HX_("<",3c,00,00,00)).split(HX_("&quot;",2c,d9,81,8f))->join(HX_("\"",22,00,00,00)).split(HX_("&#039;",62,26,77,78))->join(HX_("'",27,00,00,00)).split(HX_("&amp;",dd,d4,aa,21))->join(HX_("&",26,00,00,00));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,htmlUnescape,return )

bool StringTools_obj::contains(::String s,::String value){
	return (s.indexOf(value,null()) != -1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,contains,return )

bool StringTools_obj::startsWith(::String s,::String start){
	if ((s.length >= start.length)) {
		return (s.lastIndexOf(start,0) == 0);
	}
	else {
		return false;
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,startsWith,return )

bool StringTools_obj::endsWith(::String s,::String end){
	int elen = end.length;
	int slen = s.length;
	if ((slen >= elen)) {
		return (s.indexOf(end,(slen - elen)) == (slen - elen));
	}
	else {
		return false;
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,endsWith,return )

bool StringTools_obj::isSpace(::String s,int pos){
	 ::Dynamic c = s.charCodeAt(pos);
	bool _hx_tmp;
	if (::hx::IsGreater( c,8 )) {
		_hx_tmp = ::hx::IsLess( c,14 );
	}
	else {
		_hx_tmp = false;
	}
	if (!(_hx_tmp)) {
		return ::hx::IsEq( c,32 );
	}
	else {
		return true;
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,isSpace,return )

::String StringTools_obj::ltrim(::String s){
	int l = s.length;
	int r = 0;
	while(true){
		bool _hx_tmp;
		if ((r < l)) {
			_hx_tmp = ::StringTools_obj::isSpace(s,r);
		}
		else {
			_hx_tmp = false;
		}
		if (!(_hx_tmp)) {
			goto _hx_goto_6;
		}
		r = (r + 1);
	}
	_hx_goto_6:;
	if ((r > 0)) {
		return s.substr(r,(l - r));
	}
	else {
		return s;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,ltrim,return )

::String StringTools_obj::rtrim(::String s){
	int l = s.length;
	int r = 0;
	while(true){
		bool _hx_tmp;
		if ((r < l)) {
			_hx_tmp = ::StringTools_obj::isSpace(s,((l - r) - 1));
		}
		else {
			_hx_tmp = false;
		}
		if (!(_hx_tmp)) {
			goto _hx_goto_7;
		}
		r = (r + 1);
	}
	_hx_goto_7:;
	if ((r > 0)) {
		return s.substr(0,(l - r));
	}
	else {
		return s;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,rtrim,return )

::String StringTools_obj::trim(::String s){
	return ::StringTools_obj::ltrim(::StringTools_obj::rtrim(s));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,trim,return )

::String StringTools_obj::lpad(::String s,::String c,int l){
            	HX_JUST_GC_STACKFRAME
	if ((c.length <= 0)) {
		return s;
	}
	 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
	l = (l - s.length);
	while((buf->get_length() < l)){
		if (::hx::IsNotNull( buf->charBuf )) {
			buf->flush();
		}
		if (::hx::IsNull( buf->b )) {
			buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(c));
		}
		else {
			::Array< ::String > buf1 = buf->b;
			buf1->push(::Std_obj::string(c));
		}
	}
	{
		if (::hx::IsNotNull( buf->charBuf )) {
			buf->flush();
		}
		if (::hx::IsNull( buf->b )) {
			buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(s));
		}
		else {
			::Array< ::String > buf2 = buf->b;
			buf2->push(::Std_obj::string(s));
		}
	}
	return buf->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StringTools_obj,lpad,return )

::String StringTools_obj::rpad(::String s,::String c,int l){
            	HX_JUST_GC_STACKFRAME
	if ((c.length <= 0)) {
		return s;
	}
	 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
	{
		if (::hx::IsNotNull( buf->charBuf )) {
			buf->flush();
		}
		if (::hx::IsNull( buf->b )) {
			buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(s));
		}
		else {
			::Array< ::String > buf1 = buf->b;
			buf1->push(::Std_obj::string(s));
		}
	}
	while((buf->get_length() < l)){
		if (::hx::IsNotNull( buf->charBuf )) {
			buf->flush();
		}
		if (::hx::IsNull( buf->b )) {
			buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(c));
		}
		else {
			::Array< ::String > buf2 = buf->b;
			buf2->push(::Std_obj::string(c));
		}
	}
	return buf->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StringTools_obj,rpad,return )

::String StringTools_obj::replace(::String s,::String sub,::String by){
	return s.split(sub)->join(by);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StringTools_obj,replace,return )

::String StringTools_obj::hex(int n, ::Dynamic digits){
	::String s = HX_("",00,00,00,00);
	do {
		s = (HX_("0123456789ABCDEF",68,2a,58,a2).charAt((n & 15)) + s);
		n = ::hx::UShr(n,4);
	} while((n > 0));
;
	if (::hx::IsNotNull( digits )) {
		while(::hx::IsLess( s.length,digits )){
			s = (HX_("0",30,00,00,00) + s);
		}
	}
	return s;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,hex,return )

int StringTools_obj::fastCodeAt(::String s,int index){
	return s.cca(index);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,fastCodeAt,return )

int StringTools_obj::unsafeCodeAt(::String s,int index){
	return s.cca(index);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,unsafeCodeAt,return )

 ::haxe::iterators::StringIterator StringTools_obj::iterator(::String s){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::iterators::StringIterator_obj::__alloc( HX_CTX ,s);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,iterator,return )

 ::haxe::iterators::StringKeyValueIterator StringTools_obj::keyValueIterator(::String s){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::iterators::StringKeyValueIterator_obj::__alloc( HX_CTX ,s);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,keyValueIterator,return )

bool StringTools_obj::isEof(int c){
	return (c == 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,isEof,return )

::String StringTools_obj::quoteUnixArg(::String argument){
            	HX_JUST_GC_STACKFRAME
	if ((argument == HX_("",00,00,00,00))) {
		return HX_("''",20,22,00,00);
	}
	else {
		if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z0-9_@%+=:,./-]",80,28,a0,8d),HX_("",00,00,00,00))->match(argument))) {
			return argument;
		}
		else {
			return ((HX_("'",27,00,00,00) + ::StringTools_obj::replace(argument,HX_("'",27,00,00,00),HX_("'\"'\"'",71,96,37,8b))) + HX_("'",27,00,00,00));
		}
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringTools_obj,quoteUnixArg,return )

::Array< int > StringTools_obj::winMetaCharacters;

::String StringTools_obj::quoteWinArg(::String argument,bool escapeMetaCharacters){
            	HX_JUST_GC_STACKFRAME
	::String argument1 = argument;
	if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^(/)?[^ \t/\\\\\"]+$",3c,0f,01,c9),HX_("",00,00,00,00))->match(argument))) {
		 ::StringBuf result =  ::StringBuf_obj::__alloc( HX_CTX );
		bool needquote;
		bool needquote1;
		bool needquote2;
		if ((argument.indexOf(HX_(" ",20,00,00,00),null()) == -1)) {
			needquote2 = (argument.indexOf(HX_("\t",09,00,00,00),null()) != -1);
		}
		else {
			needquote2 = true;
		}
		if (!(needquote2)) {
			needquote1 = (argument == HX_("",00,00,00,00));
		}
		else {
			needquote1 = true;
		}
		if (!(needquote1)) {
			needquote = (argument.indexOf(HX_("/",2f,00,00,00),null()) > 0);
		}
		else {
			needquote = true;
		}
		if (needquote) {
			if (::hx::IsNotNull( result->charBuf )) {
				result->flush();
			}
			if (::hx::IsNull( result->b )) {
				result->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_15,1);
			}
			else {
				result->b->push(HX_("\"",22,00,00,00));
			}
		}
		 ::StringBuf bs_buf =  ::StringBuf_obj::__alloc( HX_CTX );
		{
			int _g = 0;
			int _g1 = argument.length;
			while((_g < _g1)){
				_g = (_g + 1);
				{
					 ::Dynamic _g2 = argument.charCodeAt((_g - 1));
					if (::hx::IsNull( _g2 )) {
						if ((bs_buf->get_length() > 0)) {
							{
								::String x = bs_buf->toString();
								if (::hx::IsNotNull( result->charBuf )) {
									result->flush();
								}
								if (::hx::IsNull( result->b )) {
									result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
								}
								else {
									::Array< ::String > result1 = result->b;
									result1->push(::Std_obj::string(x));
								}
							}
							bs_buf =  ::StringBuf_obj::__alloc( HX_CTX );
						}
						{
							int c = ( (int)(_g2) );
							if ((c >= 127)) {
								::String x1 = ::String::fromCharCode(c);
								if (::hx::IsNotNull( result->charBuf )) {
									result->flush();
								}
								if (::hx::IsNull( result->b )) {
									result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
								}
								else {
									::Array< ::String > result2 = result->b;
									result2->push(::Std_obj::string(x1));
								}
							}
							else {
								if (::hx::IsNull( result->charBuf )) {
									result->charBuf = ::Array_obj< char >::__new();
								}
								result->charBuf->push(c);
							}
						}
					}
					else {
						 ::Dynamic _hx_switch_0 = _g2;
						if (  (_hx_switch_0==34) ){
							::String bs = bs_buf->toString();
							{
								if (::hx::IsNotNull( result->charBuf )) {
									result->flush();
								}
								if (::hx::IsNull( result->b )) {
									result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(bs));
								}
								else {
									::Array< ::String > result3 = result->b;
									result3->push(::Std_obj::string(bs));
								}
							}
							{
								if (::hx::IsNotNull( result->charBuf )) {
									result->flush();
								}
								if (::hx::IsNull( result->b )) {
									result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(bs));
								}
								else {
									::Array< ::String > result4 = result->b;
									result4->push(::Std_obj::string(bs));
								}
							}
							bs_buf =  ::StringBuf_obj::__alloc( HX_CTX );
							{
								if (::hx::IsNotNull( result->charBuf )) {
									result->flush();
								}
								if (::hx::IsNull( result->b )) {
									result->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_16,1);
								}
								else {
									result->b->push(HX_("\\\"",46,50,00,00));
								}
							}
							goto _hx_goto_13;
						}
						if (  (_hx_switch_0==92) ){
							if (::hx::IsNotNull( bs_buf->charBuf )) {
								bs_buf->flush();
							}
							if (::hx::IsNull( bs_buf->b )) {
								bs_buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_17,1);
							}
							else {
								bs_buf->b->push(HX_("\\",5c,00,00,00));
							}
							goto _hx_goto_13;
						}
						/* default */{
							if ((bs_buf->get_length() > 0)) {
								{
									::String x2 = bs_buf->toString();
									if (::hx::IsNotNull( result->charBuf )) {
										result->flush();
									}
									if (::hx::IsNull( result->b )) {
										result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
									}
									else {
										::Array< ::String > result5 = result->b;
										result5->push(::Std_obj::string(x2));
									}
								}
								bs_buf =  ::StringBuf_obj::__alloc( HX_CTX );
							}
							{
								int c1 = ( (int)(_g2) );
								if ((c1 >= 127)) {
									::String x3 = ::String::fromCharCode(c1);
									if (::hx::IsNotNull( result->charBuf )) {
										result->flush();
									}
									if (::hx::IsNull( result->b )) {
										result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
									}
									else {
										::Array< ::String > result6 = result->b;
										result6->push(::Std_obj::string(x3));
									}
								}
								else {
									if (::hx::IsNull( result->charBuf )) {
										result->charBuf = ::Array_obj< char >::__new();
									}
									result->charBuf->push(c1);
								}
							}
						}
						_hx_goto_13:;
					}
				}
			}
		}
		{
			::String x4 = bs_buf->toString();
			if (::hx::IsNotNull( result->charBuf )) {
				result->flush();
			}
			if (::hx::IsNull( result->b )) {
				result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
			}
			else {
				::Array< ::String > result7 = result->b;
				result7->push(::Std_obj::string(x4));
			}
		}
		if (needquote) {
			{
				::String x5 = bs_buf->toString();
				if (::hx::IsNotNull( result->charBuf )) {
					result->flush();
				}
				if (::hx::IsNull( result->b )) {
					result->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
				}
				else {
					::Array< ::String > result8 = result->b;
					result8->push(::Std_obj::string(x5));
				}
			}
			{
				if (::hx::IsNotNull( result->charBuf )) {
					result->flush();
				}
				if (::hx::IsNull( result->b )) {
					result->b = ::Array_obj< ::String >::fromData( _hx_array_data_0363db6a_18,1);
				}
				else {
					result->b->push(HX_("\"",22,00,00,00));
				}
			}
		}
		argument1 = result->toString();
	}
	if (escapeMetaCharacters) {
		 ::StringBuf result9 =  ::StringBuf_obj::__alloc( HX_CTX );
		{
			int _g3 = 0;
			int _g4 = argument1.length;
			while((_g3 < _g4)){
				_g3 = (_g3 + 1);
				 ::Dynamic c2 = argument1.charCodeAt((_g3 - 1));
				if ((::haxe::SysTools_obj::winMetaCharacters->indexOf(c2,null()) >= 0)) {
					if (::hx::IsNull( result9->charBuf )) {
						result9->charBuf = ::Array_obj< char >::__new();
					}
					result9->charBuf->push(94);
				}
				{
					int c3 = ( (int)(c2) );
					if ((c3 >= 127)) {
						::String x6 = ::String::fromCharCode(c3);
						if (::hx::IsNotNull( result9->charBuf )) {
							result9->flush();
						}
						if (::hx::IsNull( result9->b )) {
							result9->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
						}
						else {
							::Array< ::String > result10 = result9->b;
							result10->push(::Std_obj::string(x6));
						}
					}
					else {
						if (::hx::IsNull( result9->charBuf )) {
							result9->charBuf = ::Array_obj< char >::__new();
						}
						result9->charBuf->push(c3);
					}
				}
			}
		}
		return result9->toString();
	}
	else {
		return argument1;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,quoteWinArg,return )

int StringTools_obj::MIN_SURROGATE_CODE_POINT;

int StringTools_obj::utf16CodePointAt(::String s,int index){
	int c = s.cca(index);
	bool _hx_tmp;
	if ((c >= 55296)) {
		_hx_tmp = (c <= 56319);
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		c = (((c - 55232) << 10) | (s.cca((index + 1)) & 1023));
	}
	return c;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringTools_obj,utf16CodePointAt,return )


StringTools_obj::StringTools_obj()
{
}

bool StringTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hex") ) { outValue = hex_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lpad") ) { outValue = lpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ltrim") ) { outValue = ltrim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rtrim") ) { outValue = rtrim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEof") ) { outValue = isEof_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSpace") ) { outValue = isSpace_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replace") ) { outValue = replace_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endsWith") ) { outValue = endsWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"urlEncode") ) { outValue = urlEncode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"urlDecode") ) { outValue = urlDecode_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"htmlEscape") ) { outValue = htmlEscape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"startsWith") ) { outValue = startsWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fastCodeAt") ) { outValue = fastCodeAt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"quoteWinArg") ) { outValue = quoteWinArg_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"htmlUnescape") ) { outValue = htmlUnescape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unsafeCodeAt") ) { outValue = unsafeCodeAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quoteUnixArg") ) { outValue = quoteUnixArg_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { outValue = keyValueIterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"utf16CodePointAt") ) { outValue = utf16CodePointAt_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"winMetaCharacters") ) { outValue = ( winMetaCharacters ); return true; }
	}
	return false;
}

bool StringTools_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"winMetaCharacters") ) { winMetaCharacters=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *StringTools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo StringTools_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(void *) &StringTools_obj::winMetaCharacters,HX_("winMetaCharacters",0b,65,cd,94)},
	{::hx::fsInt,(void *) &StringTools_obj::MIN_SURROGATE_CODE_POINT,HX_("MIN_SURROGATE_CODE_POINT",f2,39,5a,0a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void StringTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringTools_obj::winMetaCharacters,"winMetaCharacters");
	HX_MARK_MEMBER_NAME(StringTools_obj::MIN_SURROGATE_CODE_POINT,"MIN_SURROGATE_CODE_POINT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringTools_obj::winMetaCharacters,"winMetaCharacters");
	HX_VISIT_MEMBER_NAME(StringTools_obj::MIN_SURROGATE_CODE_POINT,"MIN_SURROGATE_CODE_POINT");
};

#endif

::hx::Class StringTools_obj::__mClass;

static ::String StringTools_obj_sStaticFields[] = {
	HX_("urlEncode",e5,4e,52,9a),
	HX_("urlDecode",fd,b9,5b,05),
	HX_("htmlEscape",4c,af,9b,a8),
	HX_("htmlUnescape",25,a7,ed,ae),
	HX_("contains",1f,5a,7b,2c),
	HX_("startsWith",77,c0,cf,f9),
	HX_("endsWith",5e,7a,b6,db),
	HX_("isSpace",7c,30,ec,1d),
	HX_("ltrim",4e,43,4a,7c),
	HX_("rtrim",54,be,b1,f0),
	HX_("trim",e2,9c,03,4d),
	HX_("lpad",67,5c,b8,47),
	HX_("rpad",21,a4,af,4b),
	HX_("replace",34,48,28,ab),
	HX_("hex",db,42,4f,00),
	HX_("fastCodeAt",3c,63,51,0a),
	HX_("unsafeCodeAt",46,e8,d6,e2),
	HX_("iterator",ee,49,9a,93),
	HX_("keyValueIterator",60,cd,ee,4a),
	HX_("isEof",f2,2e,4b,c1),
	HX_("quoteUnixArg",d2,54,33,00),
	HX_("winMetaCharacters",0b,65,cd,94),
	HX_("quoteWinArg",f6,b3,bc,14),
	HX_("MIN_SURROGATE_CODE_POINT",f2,39,5a,0a),
	HX_("utf16CodePointAt",4a,6b,76,84),
	::String(null())
};

void StringTools_obj::__register()
{
	StringTools_obj _hx_dummy;
	StringTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StringTools",6a,db,63,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringTools_obj::__GetStatic;
	__mClass->mSetStaticField = &StringTools_obj::__SetStatic;
	__mClass->mMarkFunc = StringTools_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StringTools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< StringTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringTools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StringTools_obj::__boot()
{
{
	winMetaCharacters = ::haxe::SysTools_obj::winMetaCharacters;
}
{
	MIN_SURROGATE_CODE_POINT = 65536;
}
}

