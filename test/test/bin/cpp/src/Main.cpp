// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_hscript_ScriptRuntime
#include <hscript/ScriptRuntime.h>
#endif
#ifndef INCLUDED_hscript_anaylzers_ConstEval
#include <hscript/anaylzers/ConstEval.h>
#endif
#ifndef INCLUDED_hscript_anaylzers_Inliner
#include <hscript/anaylzers/Inliner.h>
#endif
#ifndef INCLUDED_hscript_anaylzers_Unravel
#include <hscript/anaylzers/Unravel.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif


void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::main(){
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
	void _hx_run( ::hscript::Error error){
		HX_JUST_GC_STACKFRAME
		::Sys_obj::println(error);
	}
	HX_END_LOCAL_FUNC1((void))

            	HX_JUST_GC_STACKFRAME
	 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX ,null());
	 ::hscript::Expr expr = parser->parseString(::sys::io::File_obj::getContent(HX_("test.hx",ac,f9,a9,bd)));
	expr = ::hscript::anaylzers::ConstEval_obj::eval(expr,null());
	expr = ::hscript::anaylzers::Unravel_obj::eval(expr);
	expr = ::hscript::anaylzers::Inliner_obj::eval(expr,null());
	 ::hscript::Interp interp =  ::hscript::Interp_obj::__alloc( HX_CTX ,HX_("Main.hx",05,5c,7e,08));
	interp->errorHandler =  ::Dynamic(new _hx_Closure_0());
	interp->execute(expr);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

