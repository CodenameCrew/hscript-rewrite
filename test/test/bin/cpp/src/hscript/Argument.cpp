// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript_Argument
#include <hscript/Argument.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif

namespace hscript{

void Argument_obj::__construct(int name,::hx::Null< bool >  __o_opt, ::hscript::Expr value){
	bool opt = __o_opt.Default(false);
	this->name = name;
	this->opt = opt;
	this->value = value;
}

Dynamic Argument_obj::__CreateEmpty() { return new Argument_obj; }

void *Argument_obj::_hx_vtable = 0;

Dynamic Argument_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Argument_obj > _hx_result = new Argument_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Argument_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b308cd0;
}


::hx::ObjectPtr< Argument_obj > Argument_obj::__new(int name,::hx::Null< bool >  __o_opt, ::hscript::Expr value) {
	::hx::ObjectPtr< Argument_obj > __this = new Argument_obj();
	__this->__construct(name,__o_opt,value);
	return __this;
}

::hx::ObjectPtr< Argument_obj > Argument_obj::__alloc(::hx::Ctx *_hx_ctx,int name,::hx::Null< bool >  __o_opt, ::hscript::Expr value) {
	Argument_obj *__this = (Argument_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Argument_obj), true, "hscript.Argument"));
	*(void **)__this = Argument_obj::_hx_vtable;
	__this->__construct(name,__o_opt,value);
	return __this;
}

Argument_obj::Argument_obj()
{
}

void Argument_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Argument);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(opt,"opt");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void Argument_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(opt,"opt");
	HX_VISIT_MEMBER_NAME(value,"value");
}

::hx::Val Argument_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"opt") ) { return ::hx::Val( opt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Argument_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"opt") ) { opt=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::hscript::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Argument_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("opt",33,9c,54,00));
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Argument_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Argument_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(Argument_obj,opt),HX_("opt",33,9c,54,00)},
	{::hx::fsObject /*  ::hscript::Expr */ ,(int)offsetof(Argument_obj,value),HX_("value",71,7f,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Argument_obj_sStaticStorageInfo = 0;
#endif

static ::String Argument_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("opt",33,9c,54,00),
	HX_("value",71,7f,b8,31),
	::String(null()) };

::hx::Class Argument_obj::__mClass;

void Argument_obj::__register()
{
	Argument_obj _hx_dummy;
	Argument_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Argument",f8,d5,a5,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Argument_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Argument_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Argument_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Argument_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
