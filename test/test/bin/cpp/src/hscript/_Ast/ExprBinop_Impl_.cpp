// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hscript__Ast_ExprBinop_Impl_
#include <hscript/_Ast/ExprBinop_Impl_.h>
#endif

namespace hscript{
namespace _Ast{

void ExprBinop_Impl__obj::__construct() { }

Dynamic ExprBinop_Impl__obj::__CreateEmpty() { return new ExprBinop_Impl__obj; }

void *ExprBinop_Impl__obj::_hx_vtable = 0;

Dynamic ExprBinop_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ExprBinop_Impl__obj > _hx_result = new ExprBinop_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ExprBinop_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44e6849d;
}

unsigned char ExprBinop_Impl__obj::ADD;

unsigned char ExprBinop_Impl__obj::SUB;

unsigned char ExprBinop_Impl__obj::MULT;

unsigned char ExprBinop_Impl__obj::DIV;

unsigned char ExprBinop_Impl__obj::MOD;

unsigned char ExprBinop_Impl__obj::AND;

unsigned char ExprBinop_Impl__obj::OR;

unsigned char ExprBinop_Impl__obj::XOR;

unsigned char ExprBinop_Impl__obj::SHL;

unsigned char ExprBinop_Impl__obj::SHR;

unsigned char ExprBinop_Impl__obj::USHR;

unsigned char ExprBinop_Impl__obj::EQ;

unsigned char ExprBinop_Impl__obj::NEQ;

unsigned char ExprBinop_Impl__obj::GTE;

unsigned char ExprBinop_Impl__obj::LTE;

unsigned char ExprBinop_Impl__obj::GT;

unsigned char ExprBinop_Impl__obj::LT;

unsigned char ExprBinop_Impl__obj::BOR;

unsigned char ExprBinop_Impl__obj::BAND;

unsigned char ExprBinop_Impl__obj::IS;

unsigned char ExprBinop_Impl__obj::NCOAL;

unsigned char ExprBinop_Impl__obj::INTERVAL;

unsigned char ExprBinop_Impl__obj::ARROW;

unsigned char ExprBinop_Impl__obj::ASSIGN;

unsigned char ExprBinop_Impl__obj::ADD_ASSIGN;

unsigned char ExprBinop_Impl__obj::SUB_ASSIGN;

unsigned char ExprBinop_Impl__obj::MULT_ASSIGN;

unsigned char ExprBinop_Impl__obj::DIV_ASSIGN;

unsigned char ExprBinop_Impl__obj::MOD_ASSIGN;

unsigned char ExprBinop_Impl__obj::SHL_ASSIGN;

unsigned char ExprBinop_Impl__obj::SHR_ASSIGN;

unsigned char ExprBinop_Impl__obj::USHR_ASSIGN;

unsigned char ExprBinop_Impl__obj::OR_ASSIGN;

unsigned char ExprBinop_Impl__obj::AND_ASSIGN;

unsigned char ExprBinop_Impl__obj::XOR_ASSIGN;

unsigned char ExprBinop_Impl__obj::NCOAL_ASSIGN;

::Array< ::Dynamic> ExprBinop_Impl__obj::OP_PRECEDENCE;

::Array< int > ExprBinop_Impl__obj::OP_PRECEDENCE_LOOKUP;

::Array< bool > ExprBinop_Impl__obj::OP_PRECEDENCE_RIGHT_ASSOCIATION;

 ::haxe::ds::IntMap ExprBinop_Impl__obj::EXPR_TO_LEXER_OP;

 ::Dynamic ExprBinop_Impl__obj::isAssign(unsigned char op){
	unsigned char _hx_switch_0 = op;
	if (  (_hx_switch_0==( (unsigned char)(24) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(25) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(26) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(27) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(28) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(29) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(30) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(31) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(32) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(33) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(34) )) ){
		return true;
		goto _hx_goto_0;
	}
	if (  (_hx_switch_0==( (unsigned char)(35) )) ){
		return true;
		goto _hx_goto_0;
	}
	/* default */{
		return false;
	}
	_hx_goto_0:;
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ExprBinop_Impl__obj,isAssign,return )


ExprBinop_Impl__obj::ExprBinop_Impl__obj()
{
}

bool ExprBinop_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"isAssign") ) { outValue = isAssign_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ExprBinop_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ExprBinop_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::ADD,HX_("ADD",01,8e,31,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::SUB,HX_("SUB",60,45,3f,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::MULT,HX_("MULT",f0,2f,26,33)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::DIV,HX_("DIV",31,d9,33,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::MOD,HX_("MOD",a2,b2,3a,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::AND,HX_("AND",b7,96,31,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::OR,HX_("OR",23,45,00,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::XOR,HX_("XOR",7b,0b,43,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::SHL,HX_("SHL",17,3a,3f,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::SHR,HX_("SHR",1d,3a,3f,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::USHR,HX_("USHR",e8,5c,6e,38)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::EQ,HX_("EQ",6c,3c,00,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::NEQ,HX_("NEQ",3a,6c,3b,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::GTE,HX_("GTE",78,29,36,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::LTE,HX_("LTE",bd,f4,39,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::GT,HX_("GT",2d,3e,00,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::LT,HX_("LT",88,42,00,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::BOR,HX_("BOR",e5,59,32,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::BAND,HX_("BAND",b5,ab,d1,2b)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::IS,HX_("IS",ea,3f,00,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::NCOAL,HX_("NCOAL",e5,b5,c6,15)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::INTERVAL,HX_("INTERVAL",45,09,02,82)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::ARROW,HX_("ARROW",a9,b1,7d,a3)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::ASSIGN,HX_("ASSIGN",2f,f2,88,fe)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::ADD_ASSIGN,HX_("ADD_ASSIGN",ed,a7,6e,79)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::SUB_ASSIGN,HX_("SUB_ASSIGN",6e,2a,4e,8e)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::MULT_ASSIGN,HX_("MULT_ASSIGN",de,b1,d8,6c)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::DIV_ASSIGN,HX_("DIV_ASSIGN",bd,22,91,de)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::MOD_ASSIGN,HX_("MOD_ASSIGN",6c,c9,4b,8d)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::SHL_ASSIGN,HX_("SHL_ASSIGN",97,4a,04,14)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::SHR_ASSIGN,HX_("SHR_ASSIGN",51,f7,32,6b)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::USHR_ASSIGN,HX_("USHR_ASSIGN",e6,93,0c,35)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::OR_ASSIGN,HX_("OR_ASSIGN",0b,f9,a7,d7)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::AND_ASSIGN,HX_("AND_ASSIGN",f7,c1,dc,b6)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::XOR_ASSIGN,HX_("XOR_ASSIGN",b3,2d,41,f1)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprBinop_Impl__obj::NCOAL_ASSIGN,HX_("NCOAL_ASSIGN",89,04,ca,10)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ExprBinop_Impl__obj::OP_PRECEDENCE,HX_("OP_PRECEDENCE",a8,33,c9,c5)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &ExprBinop_Impl__obj::OP_PRECEDENCE_LOOKUP,HX_("OP_PRECEDENCE_LOOKUP",71,71,dd,8d)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &ExprBinop_Impl__obj::OP_PRECEDENCE_RIGHT_ASSOCIATION,HX_("OP_PRECEDENCE_RIGHT_ASSOCIATION",07,90,b6,97)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ExprBinop_Impl__obj::EXPR_TO_LEXER_OP,HX_("EXPR_TO_LEXER_OP",0e,9a,ae,b2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ExprBinop_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::ADD,"ADD");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::SUB,"SUB");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::MULT,"MULT");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::DIV,"DIV");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::MOD,"MOD");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::AND,"AND");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::OR,"OR");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::XOR,"XOR");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::SHL,"SHL");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::SHR,"SHR");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::USHR,"USHR");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::EQ,"EQ");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::NEQ,"NEQ");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::GTE,"GTE");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::LTE,"LTE");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::GT,"GT");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::LT,"LT");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::BOR,"BOR");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::BAND,"BAND");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::IS,"IS");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::NCOAL,"NCOAL");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::INTERVAL,"INTERVAL");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::ARROW,"ARROW");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::ASSIGN,"ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::ADD_ASSIGN,"ADD_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::SUB_ASSIGN,"SUB_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::MULT_ASSIGN,"MULT_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::DIV_ASSIGN,"DIV_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::MOD_ASSIGN,"MOD_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::SHL_ASSIGN,"SHL_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::SHR_ASSIGN,"SHR_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::USHR_ASSIGN,"USHR_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::OR_ASSIGN,"OR_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::AND_ASSIGN,"AND_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::XOR_ASSIGN,"XOR_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::NCOAL_ASSIGN,"NCOAL_ASSIGN");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::OP_PRECEDENCE,"OP_PRECEDENCE");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::OP_PRECEDENCE_LOOKUP,"OP_PRECEDENCE_LOOKUP");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::OP_PRECEDENCE_RIGHT_ASSOCIATION,"OP_PRECEDENCE_RIGHT_ASSOCIATION");
	HX_MARK_MEMBER_NAME(ExprBinop_Impl__obj::EXPR_TO_LEXER_OP,"EXPR_TO_LEXER_OP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ExprBinop_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::ADD,"ADD");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::SUB,"SUB");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::MULT,"MULT");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::DIV,"DIV");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::MOD,"MOD");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::AND,"AND");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::OR,"OR");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::XOR,"XOR");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::SHL,"SHL");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::SHR,"SHR");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::USHR,"USHR");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::EQ,"EQ");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::NEQ,"NEQ");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::GTE,"GTE");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::LTE,"LTE");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::GT,"GT");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::LT,"LT");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::BOR,"BOR");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::BAND,"BAND");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::IS,"IS");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::NCOAL,"NCOAL");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::INTERVAL,"INTERVAL");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::ARROW,"ARROW");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::ASSIGN,"ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::ADD_ASSIGN,"ADD_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::SUB_ASSIGN,"SUB_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::MULT_ASSIGN,"MULT_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::DIV_ASSIGN,"DIV_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::MOD_ASSIGN,"MOD_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::SHL_ASSIGN,"SHL_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::SHR_ASSIGN,"SHR_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::USHR_ASSIGN,"USHR_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::OR_ASSIGN,"OR_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::AND_ASSIGN,"AND_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::XOR_ASSIGN,"XOR_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::NCOAL_ASSIGN,"NCOAL_ASSIGN");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::OP_PRECEDENCE,"OP_PRECEDENCE");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::OP_PRECEDENCE_LOOKUP,"OP_PRECEDENCE_LOOKUP");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::OP_PRECEDENCE_RIGHT_ASSOCIATION,"OP_PRECEDENCE_RIGHT_ASSOCIATION");
	HX_VISIT_MEMBER_NAME(ExprBinop_Impl__obj::EXPR_TO_LEXER_OP,"EXPR_TO_LEXER_OP");
};

#endif

::hx::Class ExprBinop_Impl__obj::__mClass;

static ::String ExprBinop_Impl__obj_sStaticFields[] = {
	HX_("ADD",01,8e,31,00),
	HX_("SUB",60,45,3f,00),
	HX_("MULT",f0,2f,26,33),
	HX_("DIV",31,d9,33,00),
	HX_("MOD",a2,b2,3a,00),
	HX_("AND",b7,96,31,00),
	HX_("OR",23,45,00,00),
	HX_("XOR",7b,0b,43,00),
	HX_("SHL",17,3a,3f,00),
	HX_("SHR",1d,3a,3f,00),
	HX_("USHR",e8,5c,6e,38),
	HX_("EQ",6c,3c,00,00),
	HX_("NEQ",3a,6c,3b,00),
	HX_("GTE",78,29,36,00),
	HX_("LTE",bd,f4,39,00),
	HX_("GT",2d,3e,00,00),
	HX_("LT",88,42,00,00),
	HX_("BOR",e5,59,32,00),
	HX_("BAND",b5,ab,d1,2b),
	HX_("IS",ea,3f,00,00),
	HX_("NCOAL",e5,b5,c6,15),
	HX_("INTERVAL",45,09,02,82),
	HX_("ARROW",a9,b1,7d,a3),
	HX_("ASSIGN",2f,f2,88,fe),
	HX_("ADD_ASSIGN",ed,a7,6e,79),
	HX_("SUB_ASSIGN",6e,2a,4e,8e),
	HX_("MULT_ASSIGN",de,b1,d8,6c),
	HX_("DIV_ASSIGN",bd,22,91,de),
	HX_("MOD_ASSIGN",6c,c9,4b,8d),
	HX_("SHL_ASSIGN",97,4a,04,14),
	HX_("SHR_ASSIGN",51,f7,32,6b),
	HX_("USHR_ASSIGN",e6,93,0c,35),
	HX_("OR_ASSIGN",0b,f9,a7,d7),
	HX_("AND_ASSIGN",f7,c1,dc,b6),
	HX_("XOR_ASSIGN",b3,2d,41,f1),
	HX_("NCOAL_ASSIGN",89,04,ca,10),
	HX_("OP_PRECEDENCE",a8,33,c9,c5),
	HX_("OP_PRECEDENCE_LOOKUP",71,71,dd,8d),
	HX_("OP_PRECEDENCE_RIGHT_ASSOCIATION",07,90,b6,97),
	HX_("EXPR_TO_LEXER_OP",0e,9a,ae,b2),
	HX_("isAssign",b9,e1,6f,a4),
	::String(null())
};

void ExprBinop_Impl__obj::__register()
{
	ExprBinop_Impl__obj _hx_dummy;
	ExprBinop_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript._Ast.ExprBinop_Impl_",83,56,2f,a0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ExprBinop_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ExprBinop_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ExprBinop_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ExprBinop_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ExprBinop_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExprBinop_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExprBinop_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ExprBinop_Impl__obj::__boot()
{
{
	ADD = ( (unsigned char)(0) );
}
{
	SUB = ( (unsigned char)(1) );
}
{
	MULT = ( (unsigned char)(2) );
}
{
	DIV = ( (unsigned char)(3) );
}
{
	MOD = ( (unsigned char)(4) );
}
{
	AND = ( (unsigned char)(5) );
}
{
	OR = ( (unsigned char)(6) );
}
{
	XOR = ( (unsigned char)(7) );
}
{
	SHL = ( (unsigned char)(8) );
}
{
	SHR = ( (unsigned char)(9) );
}
{
	USHR = ( (unsigned char)(10) );
}
{
	EQ = ( (unsigned char)(11) );
}
{
	NEQ = ( (unsigned char)(12) );
}
{
	GTE = ( (unsigned char)(13) );
}
{
	LTE = ( (unsigned char)(14) );
}
{
	GT = ( (unsigned char)(15) );
}
{
	LT = ( (unsigned char)(16) );
}
{
	BOR = ( (unsigned char)(17) );
}
{
	BAND = ( (unsigned char)(18) );
}
{
	IS = ( (unsigned char)(19) );
}
{
	NCOAL = ( (unsigned char)(20) );
}
{
	INTERVAL = ( (unsigned char)(21) );
}
{
	ARROW = ( (unsigned char)(22) );
}
{
	ASSIGN = ( (unsigned char)(23) );
}
{
	ADD_ASSIGN = ( (unsigned char)(24) );
}
{
	SUB_ASSIGN = ( (unsigned char)(25) );
}
{
	MULT_ASSIGN = ( (unsigned char)(26) );
}
{
	DIV_ASSIGN = ( (unsigned char)(27) );
}
{
	MOD_ASSIGN = ( (unsigned char)(28) );
}
{
	SHL_ASSIGN = ( (unsigned char)(29) );
}
{
	SHR_ASSIGN = ( (unsigned char)(30) );
}
{
	USHR_ASSIGN = ( (unsigned char)(31) );
}
{
	OR_ASSIGN = ( (unsigned char)(32) );
}
{
	AND_ASSIGN = ( (unsigned char)(33) );
}
{
	XOR_ASSIGN = ( (unsigned char)(34) );
}
{
	NCOAL_ASSIGN = ( (unsigned char)(35) );
}
{
	OP_PRECEDENCE = ::Array_obj< ::Dynamic>::__new(12)->init(0,::Array_obj< unsigned char >::__new(1)->init(0,( (unsigned char)(4) )))->init(1,::Array_obj< unsigned char >::__new(2)->init(0,( (unsigned char)(2) ))->init(1,( (unsigned char)(3) )))->init(2,::Array_obj< unsigned char >::__new(2)->init(0,( (unsigned char)(0) ))->init(1,( (unsigned char)(1) )))->init(3,::Array_obj< unsigned char >::__new(3)->init(0,( (unsigned char)(8) ))->init(1,( (unsigned char)(9) ))->init(2,( (unsigned char)(10) )))->init(4,::Array_obj< unsigned char >::__new(3)->init(0,( (unsigned char)(6) ))->init(1,( (unsigned char)(5) ))->init(2,( (unsigned char)(7) )))->init(5,::Array_obj< unsigned char >::__new(6)->init(0,( (unsigned char)(11) ))->init(1,( (unsigned char)(12) ))->init(2,( (unsigned char)(15) ))->init(3,( (unsigned char)(16) ))->init(4,( (unsigned char)(13) ))->init(5,( (unsigned char)(14) )))->init(6,::Array_obj< unsigned char >::__new(1)->init(0,( (unsigned char)(21) )))->init(7,::Array_obj< unsigned char >::__new(1)->init(0,( (unsigned char)(18) )))->init(8,::Array_obj< unsigned char >::__new(1)->init(0,( (unsigned char)(17) )))->init(9,::Array_obj< unsigned char >::__new(14)->init(0,( (unsigned char)(23) ))->init(1,( (unsigned char)(24) ))->init(2,( (unsigned char)(25) ))->init(3,( (unsigned char)(26) ))->init(4,( (unsigned char)(27) ))->init(5,( (unsigned char)(28) ))->init(6,( (unsigned char)(35) ))->init(7,( (unsigned char)(29) ))->init(8,( (unsigned char)(30) ))->init(9,( (unsigned char)(31) ))->init(10,( (unsigned char)(32) ))->init(11,( (unsigned char)(33) ))->init(12,( (unsigned char)(34) ))->init(13,( (unsigned char)(22) )))->init(10,::Array_obj< unsigned char >::__new(1)->init(0,( (unsigned char)(20) )))->init(11,::Array_obj< unsigned char >::__new(1)->init(0,( (unsigned char)(19) )));
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	::Array< int > _hx_run(){
		::Array< int > LOOKUP_MAP = ::Array_obj< int >::__new();
		{
			int _g = 0;
			int _g1 = ::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE->length;
			while((_g < _g1)){
				_g = (_g + 1);
				int i = (_g - 1);
				{
					int _g2 = 0;
					::Array< unsigned char > _g3 = ::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE->__get(i).StaticCast< ::Array< unsigned char > >();
					while((_g2 < _g3->length)){
						unsigned char x = _g3->__get(_g2);
						_g2 = (_g2 + 1);
						LOOKUP_MAP[( (int)(x) )] = i;
					}
				}
			}
		}
		return LOOKUP_MAP;
	}
	HX_END_LOCAL_FUNC0(return)

	OP_PRECEDENCE_LOOKUP = ( (::Array< int >)( ::Dynamic(new _hx_Closure_0())()) );
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	::Array< bool > _hx_run(){
		::Array< bool > LOOKUP_MAP = ::Array_obj< bool >::__new();
		{
			int _g = 0;
			::Array< unsigned char > _g1 = ::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE->__get(9).StaticCast< ::Array< unsigned char > >();
			while((_g < _g1->length)){
				unsigned char x = _g1->__get(_g);
				_g = (_g + 1);
				LOOKUP_MAP[( (int)(x) )] = true;
			}
		}
		return LOOKUP_MAP;
	}
	HX_END_LOCAL_FUNC0(return)

	OP_PRECEDENCE_RIGHT_ASSOCIATION = ( (::Array< bool >)( ::Dynamic(new _hx_Closure_0())()) );
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	 ::haxe::ds::IntMap _hx_run(){
		HX_JUST_GC_STACKFRAME
		 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
		_g->set(( (int)(( (unsigned char)(0) )) ),HX_("+",2b,00,00,00));
		_g->set(( (int)(( (unsigned char)(1) )) ),HX_("-",2d,00,00,00));
		_g->set(( (int)(( (unsigned char)(2) )) ),HX_("*",2a,00,00,00));
		_g->set(( (int)(( (unsigned char)(3) )) ),HX_("/",2f,00,00,00));
		_g->set(( (int)(( (unsigned char)(4) )) ),HX_("%",25,00,00,00));
		_g->set(( (int)(( (unsigned char)(5) )) ),HX_("&",26,00,00,00));
		_g->set(( (int)(( (unsigned char)(6) )) ),HX_("|",7c,00,00,00));
		_g->set(( (int)(( (unsigned char)(7) )) ),HX_("^",5e,00,00,00));
		_g->set(( (int)(( (unsigned char)(8) )) ),HX_("<<",80,34,00,00));
		_g->set(( (int)(( (unsigned char)(9) )) ),HX_(">>",40,36,00,00));
		_g->set(( (int)(( (unsigned char)(10) )) ),HX_(">>>",fe,41,2f,00));
		_g->set(( (int)(( (unsigned char)(11) )) ),HX_("==",60,35,00,00));
		_g->set(( (int)(( (unsigned char)(12) )) ),HX_("!=",fc,1c,00,00));
		_g->set(( (int)(( (unsigned char)(13) )) ),HX_(">=",3f,36,00,00));
		_g->set(( (int)(( (unsigned char)(14) )) ),HX_("<=",81,34,00,00));
		_g->set(( (int)(( (unsigned char)(15) )) ),HX_(">",3e,00,00,00));
		_g->set(( (int)(( (unsigned char)(16) )) ),HX_("<",3c,00,00,00));
		_g->set(( (int)(( (unsigned char)(17) )) ),HX_("||",80,6c,00,00));
		_g->set(( (int)(( (unsigned char)(18) )) ),HX_("&&",40,21,00,00));
		_g->set(( (int)(( (unsigned char)(19) )) ),HX_("is",ea,5b,00,00));
		_g->set(( (int)(( (unsigned char)(20) )) ),HX_("??",20,37,00,00));
		_g->set(( (int)(( (unsigned char)(21) )) ),HX_("...",ee,0f,23,00));
		_g->set(( (int)(( (unsigned char)(22) )) ),HX_("=>",61,35,00,00));
		_g->set(( (int)(( (unsigned char)(23) )) ),HX_("=",3d,00,00,00));
		_g->set(( (int)(( (unsigned char)(24) )) ),HX_("+=",b2,25,00,00));
		_g->set(( (int)(( (unsigned char)(25) )) ),HX_("-=",70,27,00,00));
		_g->set(( (int)(( (unsigned char)(26) )) ),HX_("*=",d3,24,00,00));
		_g->set(( (int)(( (unsigned char)(27) )) ),HX_("/=",2e,29,00,00));
		_g->set(( (int)(( (unsigned char)(28) )) ),HX_("%=",78,20,00,00));
		_g->set(( (int)(( (unsigned char)(29) )) ),HX_("<<=",bd,bb,2d,00));
		_g->set(( (int)(( (unsigned char)(30) )) ),HX_(">>=",fd,41,2f,00));
		_g->set(( (int)(( (unsigned char)(31) )) ),HX_(">>>=",7f,7c,2a,29));
		_g->set(( (int)(( (unsigned char)(32) )) ),HX_("|=",41,6c,00,00));
		_g->set(( (int)(( (unsigned char)(33) )) ),HX_("&=",57,21,00,00));
		_g->set(( (int)(( (unsigned char)(34) )) ),HX_("^=",1f,52,00,00));
		_g->set(( (int)(( (unsigned char)(35) )) ),HX_("??=",1d,05,30,00));
		return _g;
	}
	HX_END_LOCAL_FUNC0(return)

	EXPR_TO_LEXER_OP = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
}
}

} // end namespace hscript
} // end namespace _Ast
