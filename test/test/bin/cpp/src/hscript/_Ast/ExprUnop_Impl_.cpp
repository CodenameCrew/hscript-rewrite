// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hscript__Ast_ExprUnop_Impl_
#include <hscript/_Ast/ExprUnop_Impl_.h>
#endif

namespace hscript{
namespace _Ast{

void ExprUnop_Impl__obj::__construct() { }

Dynamic ExprUnop_Impl__obj::__CreateEmpty() { return new ExprUnop_Impl__obj; }

void *ExprUnop_Impl__obj::_hx_vtable = 0;

Dynamic ExprUnop_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ExprUnop_Impl__obj > _hx_result = new ExprUnop_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ExprUnop_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ec7e2f1;
}

unsigned char ExprUnop_Impl__obj::NEG_BIT;

unsigned char ExprUnop_Impl__obj::NOT;

unsigned char ExprUnop_Impl__obj::NEG;

unsigned char ExprUnop_Impl__obj::INC;

unsigned char ExprUnop_Impl__obj::DEC;

 ::haxe::ds::IntMap ExprUnop_Impl__obj::EXPR_TO_LEXER_UNOP;


ExprUnop_Impl__obj::ExprUnop_Impl__obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ExprUnop_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ExprUnop_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprUnop_Impl__obj::NEG_BIT,HX_("NEG_BIT",de,dd,9a,62)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprUnop_Impl__obj::NOT,HX_("NOT",f3,74,3b,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprUnop_Impl__obj::NEG,HX_("NEG",30,6c,3b,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprUnop_Impl__obj::INC,HX_("INC",be,a8,37,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &ExprUnop_Impl__obj::DEC,HX_("DEC",a2,d5,33,00)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ExprUnop_Impl__obj::EXPR_TO_LEXER_UNOP,HX_("EXPR_TO_LEXER_UNOP",e7,c1,09,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ExprUnop_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ExprUnop_Impl__obj::NEG_BIT,"NEG_BIT");
	HX_MARK_MEMBER_NAME(ExprUnop_Impl__obj::NOT,"NOT");
	HX_MARK_MEMBER_NAME(ExprUnop_Impl__obj::NEG,"NEG");
	HX_MARK_MEMBER_NAME(ExprUnop_Impl__obj::INC,"INC");
	HX_MARK_MEMBER_NAME(ExprUnop_Impl__obj::DEC,"DEC");
	HX_MARK_MEMBER_NAME(ExprUnop_Impl__obj::EXPR_TO_LEXER_UNOP,"EXPR_TO_LEXER_UNOP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ExprUnop_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ExprUnop_Impl__obj::NEG_BIT,"NEG_BIT");
	HX_VISIT_MEMBER_NAME(ExprUnop_Impl__obj::NOT,"NOT");
	HX_VISIT_MEMBER_NAME(ExprUnop_Impl__obj::NEG,"NEG");
	HX_VISIT_MEMBER_NAME(ExprUnop_Impl__obj::INC,"INC");
	HX_VISIT_MEMBER_NAME(ExprUnop_Impl__obj::DEC,"DEC");
	HX_VISIT_MEMBER_NAME(ExprUnop_Impl__obj::EXPR_TO_LEXER_UNOP,"EXPR_TO_LEXER_UNOP");
};

#endif

::hx::Class ExprUnop_Impl__obj::__mClass;

static ::String ExprUnop_Impl__obj_sStaticFields[] = {
	HX_("NEG_BIT",de,dd,9a,62),
	HX_("NOT",f3,74,3b,00),
	HX_("NEG",30,6c,3b,00),
	HX_("INC",be,a8,37,00),
	HX_("DEC",a2,d5,33,00),
	HX_("EXPR_TO_LEXER_UNOP",e7,c1,09,b3),
	::String(null())
};

void ExprUnop_Impl__obj::__register()
{
	ExprUnop_Impl__obj _hx_dummy;
	ExprUnop_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript._Ast.ExprUnop_Impl_",ff,a1,05,b9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ExprUnop_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ExprUnop_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ExprUnop_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ExprUnop_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExprUnop_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExprUnop_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ExprUnop_Impl__obj::__boot()
{
{
	NEG_BIT = ( (unsigned char)(0) );
}
{
	NOT = ( (unsigned char)(1) );
}
{
	NEG = ( (unsigned char)(2) );
}
{
	INC = ( (unsigned char)(3) );
}
{
	DEC = ( (unsigned char)(4) );
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	 ::haxe::ds::IntMap _hx_run(){
		HX_JUST_GC_STACKFRAME
		 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
		_g->set(( (int)(( (unsigned char)(0) )) ),HX_("~",7e,00,00,00));
		_g->set(( (int)(( (unsigned char)(1) )) ),HX_("!",21,00,00,00));
		_g->set(( (int)(( (unsigned char)(2) )) ),HX_("-",2d,00,00,00));
		_g->set(( (int)(( (unsigned char)(3) )) ),HX_("++",a0,25,00,00));
		_g->set(( (int)(( (unsigned char)(4) )) ),HX_("--",60,27,00,00));
		return _g;
	}
	HX_END_LOCAL_FUNC0(return)

	EXPR_TO_LEXER_UNOP = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
}
}

} // end namespace hscript
} // end namespace _Ast
