// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript__Lexer_LexerOp_Impl_
#include <hscript/_Lexer/LexerOp_Impl_.h>
#endif

static const ::String _hx_array_data_c4ff2767_0[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("%",25,00,00,00),HX_("&",26,00,00,00),HX_("|",7c,00,00,00),HX_("^",5e,00,00,00),HX_("<<",80,34,00,00),HX_(">>",40,36,00,00),HX_(">>>",fe,41,2f,00),HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),HX_("||",80,6c,00,00),HX_("&&",40,21,00,00),HX_("is",ea,5b,00,00),HX_("??",20,37,00,00),HX_("...",ee,0f,23,00),HX_("=>",61,35,00,00),HX_("->",71,27,00,00),HX_("=",3d,00,00,00),HX_("+=",b2,25,00,00),HX_("-=",70,27,00,00),HX_("*=",d3,24,00,00),HX_("/=",2e,29,00,00),HX_("%=",78,20,00,00),HX_("<<=",bd,bb,2d,00),HX_(">>=",fd,41,2f,00),HX_(">>>=",7f,7c,2a,29),HX_("|=",41,6c,00,00),HX_("&=",57,21,00,00),HX_("^=",1f,52,00,00),HX_("??=",1d,05,30,00),HX_("!",21,00,00,00),HX_("~",7e,00,00,00),HX_("++",a0,25,00,00),HX_("--",60,27,00,00),HX_("//",20,29,00,00),HX_("/*",1b,29,00,00),HX_("*/",c5,24,00,00),
};
namespace hscript{
namespace _Lexer{

void LexerOp_Impl__obj::__construct() { }

Dynamic LexerOp_Impl__obj::__CreateEmpty() { return new LexerOp_Impl__obj; }

void *LexerOp_Impl__obj::_hx_vtable = 0;

Dynamic LexerOp_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LexerOp_Impl__obj > _hx_result = new LexerOp_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LexerOp_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x724b77f5;
}

::String LexerOp_Impl__obj::ADD;

::String LexerOp_Impl__obj::SUB;

::String LexerOp_Impl__obj::MULT;

::String LexerOp_Impl__obj::DIV;

::String LexerOp_Impl__obj::MOD;

::String LexerOp_Impl__obj::AND;

::String LexerOp_Impl__obj::OR;

::String LexerOp_Impl__obj::XOR;

::String LexerOp_Impl__obj::SHL;

::String LexerOp_Impl__obj::SHR;

::String LexerOp_Impl__obj::USHR;

::String LexerOp_Impl__obj::EQ;

::String LexerOp_Impl__obj::NEQ;

::String LexerOp_Impl__obj::GTE;

::String LexerOp_Impl__obj::LTE;

::String LexerOp_Impl__obj::GT;

::String LexerOp_Impl__obj::LT;

::String LexerOp_Impl__obj::BOR;

::String LexerOp_Impl__obj::BAND;

::String LexerOp_Impl__obj::IS;

::String LexerOp_Impl__obj::NCOAL;

::String LexerOp_Impl__obj::INTERVAL;

::String LexerOp_Impl__obj::ARROW;

::String LexerOp_Impl__obj::FUNCTION_ARROW;

::String LexerOp_Impl__obj::ASSIGN;

::String LexerOp_Impl__obj::ADD_ASSIGN;

::String LexerOp_Impl__obj::SUB_ASSIGN;

::String LexerOp_Impl__obj::MULT_ASSIGN;

::String LexerOp_Impl__obj::DIV_ASSIGN;

::String LexerOp_Impl__obj::MOD_ASSIGN;

::String LexerOp_Impl__obj::SHL_ASSIGN;

::String LexerOp_Impl__obj::SHR_ASSIGN;

::String LexerOp_Impl__obj::USHR_ASSIGN;

::String LexerOp_Impl__obj::OR_ASSIGN;

::String LexerOp_Impl__obj::AND_ASSIGN;

::String LexerOp_Impl__obj::XOR_ASSIGN;

::String LexerOp_Impl__obj::NCOAL_ASSIGN;

::String LexerOp_Impl__obj::NOT;

::String LexerOp_Impl__obj::NOT_BITWISE;

::String LexerOp_Impl__obj::INCREMENT;

::String LexerOp_Impl__obj::DECREMENT;

::String LexerOp_Impl__obj::COMMENT;

::String LexerOp_Impl__obj::COMMENT_OPEN;

::String LexerOp_Impl__obj::COMMENT_CLOSE;

::Array< ::String > LexerOp_Impl__obj::ALL_LOPS;

 ::haxe::ds::StringMap LexerOp_Impl__obj::ALL_LOPS_LOOKUP;

 ::haxe::ds::StringMap LexerOp_Impl__obj::LEXER_TO_EXPR_OP;

 ::haxe::ds::StringMap LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP;


LexerOp_Impl__obj::LexerOp_Impl__obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LexerOp_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo LexerOp_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &LexerOp_Impl__obj::ADD,HX_("ADD",01,8e,31,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::SUB,HX_("SUB",60,45,3f,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::MULT,HX_("MULT",f0,2f,26,33)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::DIV,HX_("DIV",31,d9,33,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::MOD,HX_("MOD",a2,b2,3a,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::AND,HX_("AND",b7,96,31,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::OR,HX_("OR",23,45,00,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::XOR,HX_("XOR",7b,0b,43,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::SHL,HX_("SHL",17,3a,3f,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::SHR,HX_("SHR",1d,3a,3f,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::USHR,HX_("USHR",e8,5c,6e,38)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::EQ,HX_("EQ",6c,3c,00,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::NEQ,HX_("NEQ",3a,6c,3b,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::GTE,HX_("GTE",78,29,36,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::LTE,HX_("LTE",bd,f4,39,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::GT,HX_("GT",2d,3e,00,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::LT,HX_("LT",88,42,00,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::BOR,HX_("BOR",e5,59,32,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::BAND,HX_("BAND",b5,ab,d1,2b)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::IS,HX_("IS",ea,3f,00,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::NCOAL,HX_("NCOAL",e5,b5,c6,15)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::INTERVAL,HX_("INTERVAL",45,09,02,82)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::ARROW,HX_("ARROW",a9,b1,7d,a3)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::FUNCTION_ARROW,HX_("FUNCTION_ARROW",02,96,9e,57)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::ASSIGN,HX_("ASSIGN",2f,f2,88,fe)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::ADD_ASSIGN,HX_("ADD_ASSIGN",ed,a7,6e,79)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::SUB_ASSIGN,HX_("SUB_ASSIGN",6e,2a,4e,8e)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::MULT_ASSIGN,HX_("MULT_ASSIGN",de,b1,d8,6c)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::DIV_ASSIGN,HX_("DIV_ASSIGN",bd,22,91,de)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::MOD_ASSIGN,HX_("MOD_ASSIGN",6c,c9,4b,8d)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::SHL_ASSIGN,HX_("SHL_ASSIGN",97,4a,04,14)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::SHR_ASSIGN,HX_("SHR_ASSIGN",51,f7,32,6b)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::USHR_ASSIGN,HX_("USHR_ASSIGN",e6,93,0c,35)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::OR_ASSIGN,HX_("OR_ASSIGN",0b,f9,a7,d7)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::AND_ASSIGN,HX_("AND_ASSIGN",f7,c1,dc,b6)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::XOR_ASSIGN,HX_("XOR_ASSIGN",b3,2d,41,f1)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::NCOAL_ASSIGN,HX_("NCOAL_ASSIGN",89,04,ca,10)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::NOT,HX_("NOT",f3,74,3b,00)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::NOT_BITWISE,HX_("NOT_BITWISE",c5,65,a6,8b)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::INCREMENT,HX_("INCREMENT",0f,76,57,2d)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::DECREMENT,HX_("DECREMENT",f3,65,da,0b)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::COMMENT,HX_("COMMENT",3f,4e,44,01)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::COMMENT_OPEN,HX_("COMMENT_OPEN",0a,95,62,d6)},
	{::hx::fsString,(void *) &LexerOp_Impl__obj::COMMENT_CLOSE,HX_("COMMENT_CLOSE",58,9e,73,d4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &LexerOp_Impl__obj::ALL_LOPS,HX_("ALL_LOPS",84,32,d7,26)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &LexerOp_Impl__obj::ALL_LOPS_LOOKUP,HX_("ALL_LOPS_LOOKUP",15,46,05,4d)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &LexerOp_Impl__obj::LEXER_TO_EXPR_OP,HX_("LEXER_TO_EXPR_OP",da,c5,51,fa)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP,HX_("LEXER_TO_EXPR_UNOP",b3,78,a8,8a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void LexerOp_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::ADD,"ADD");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::SUB,"SUB");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::MULT,"MULT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::DIV,"DIV");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::MOD,"MOD");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::AND,"AND");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::OR,"OR");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::XOR,"XOR");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::SHL,"SHL");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::SHR,"SHR");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::USHR,"USHR");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::EQ,"EQ");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::NEQ,"NEQ");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::GTE,"GTE");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::LTE,"LTE");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::GT,"GT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::LT,"LT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::BOR,"BOR");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::BAND,"BAND");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::IS,"IS");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::NCOAL,"NCOAL");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::INTERVAL,"INTERVAL");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::ARROW,"ARROW");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::FUNCTION_ARROW,"FUNCTION_ARROW");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::ASSIGN,"ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::ADD_ASSIGN,"ADD_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::SUB_ASSIGN,"SUB_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::MULT_ASSIGN,"MULT_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::DIV_ASSIGN,"DIV_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::MOD_ASSIGN,"MOD_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::SHL_ASSIGN,"SHL_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::SHR_ASSIGN,"SHR_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::USHR_ASSIGN,"USHR_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::OR_ASSIGN,"OR_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::AND_ASSIGN,"AND_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::XOR_ASSIGN,"XOR_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::NCOAL_ASSIGN,"NCOAL_ASSIGN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::NOT,"NOT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::NOT_BITWISE,"NOT_BITWISE");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::INCREMENT,"INCREMENT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::DECREMENT,"DECREMENT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::COMMENT,"COMMENT");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::COMMENT_OPEN,"COMMENT_OPEN");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::COMMENT_CLOSE,"COMMENT_CLOSE");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::ALL_LOPS,"ALL_LOPS");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::ALL_LOPS_LOOKUP,"ALL_LOPS_LOOKUP");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::LEXER_TO_EXPR_OP,"LEXER_TO_EXPR_OP");
	HX_MARK_MEMBER_NAME(LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP,"LEXER_TO_EXPR_UNOP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LexerOp_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::ADD,"ADD");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::SUB,"SUB");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::MULT,"MULT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::DIV,"DIV");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::MOD,"MOD");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::AND,"AND");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::OR,"OR");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::XOR,"XOR");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::SHL,"SHL");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::SHR,"SHR");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::USHR,"USHR");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::EQ,"EQ");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::NEQ,"NEQ");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::GTE,"GTE");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::LTE,"LTE");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::GT,"GT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::LT,"LT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::BOR,"BOR");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::BAND,"BAND");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::IS,"IS");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::NCOAL,"NCOAL");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::INTERVAL,"INTERVAL");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::ARROW,"ARROW");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::FUNCTION_ARROW,"FUNCTION_ARROW");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::ASSIGN,"ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::ADD_ASSIGN,"ADD_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::SUB_ASSIGN,"SUB_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::MULT_ASSIGN,"MULT_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::DIV_ASSIGN,"DIV_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::MOD_ASSIGN,"MOD_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::SHL_ASSIGN,"SHL_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::SHR_ASSIGN,"SHR_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::USHR_ASSIGN,"USHR_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::OR_ASSIGN,"OR_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::AND_ASSIGN,"AND_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::XOR_ASSIGN,"XOR_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::NCOAL_ASSIGN,"NCOAL_ASSIGN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::NOT,"NOT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::NOT_BITWISE,"NOT_BITWISE");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::INCREMENT,"INCREMENT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::DECREMENT,"DECREMENT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::COMMENT,"COMMENT");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::COMMENT_OPEN,"COMMENT_OPEN");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::COMMENT_CLOSE,"COMMENT_CLOSE");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::ALL_LOPS,"ALL_LOPS");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::ALL_LOPS_LOOKUP,"ALL_LOPS_LOOKUP");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::LEXER_TO_EXPR_OP,"LEXER_TO_EXPR_OP");
	HX_VISIT_MEMBER_NAME(LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP,"LEXER_TO_EXPR_UNOP");
};

#endif

::hx::Class LexerOp_Impl__obj::__mClass;

static ::String LexerOp_Impl__obj_sStaticFields[] = {
	HX_("ADD",01,8e,31,00),
	HX_("SUB",60,45,3f,00),
	HX_("MULT",f0,2f,26,33),
	HX_("DIV",31,d9,33,00),
	HX_("MOD",a2,b2,3a,00),
	HX_("AND",b7,96,31,00),
	HX_("OR",23,45,00,00),
	HX_("XOR",7b,0b,43,00),
	HX_("SHL",17,3a,3f,00),
	HX_("SHR",1d,3a,3f,00),
	HX_("USHR",e8,5c,6e,38),
	HX_("EQ",6c,3c,00,00),
	HX_("NEQ",3a,6c,3b,00),
	HX_("GTE",78,29,36,00),
	HX_("LTE",bd,f4,39,00),
	HX_("GT",2d,3e,00,00),
	HX_("LT",88,42,00,00),
	HX_("BOR",e5,59,32,00),
	HX_("BAND",b5,ab,d1,2b),
	HX_("IS",ea,3f,00,00),
	HX_("NCOAL",e5,b5,c6,15),
	HX_("INTERVAL",45,09,02,82),
	HX_("ARROW",a9,b1,7d,a3),
	HX_("FUNCTION_ARROW",02,96,9e,57),
	HX_("ASSIGN",2f,f2,88,fe),
	HX_("ADD_ASSIGN",ed,a7,6e,79),
	HX_("SUB_ASSIGN",6e,2a,4e,8e),
	HX_("MULT_ASSIGN",de,b1,d8,6c),
	HX_("DIV_ASSIGN",bd,22,91,de),
	HX_("MOD_ASSIGN",6c,c9,4b,8d),
	HX_("SHL_ASSIGN",97,4a,04,14),
	HX_("SHR_ASSIGN",51,f7,32,6b),
	HX_("USHR_ASSIGN",e6,93,0c,35),
	HX_("OR_ASSIGN",0b,f9,a7,d7),
	HX_("AND_ASSIGN",f7,c1,dc,b6),
	HX_("XOR_ASSIGN",b3,2d,41,f1),
	HX_("NCOAL_ASSIGN",89,04,ca,10),
	HX_("NOT",f3,74,3b,00),
	HX_("NOT_BITWISE",c5,65,a6,8b),
	HX_("INCREMENT",0f,76,57,2d),
	HX_("DECREMENT",f3,65,da,0b),
	HX_("COMMENT",3f,4e,44,01),
	HX_("COMMENT_OPEN",0a,95,62,d6),
	HX_("COMMENT_CLOSE",58,9e,73,d4),
	HX_("ALL_LOPS",84,32,d7,26),
	HX_("ALL_LOPS_LOOKUP",15,46,05,4d),
	HX_("LEXER_TO_EXPR_OP",da,c5,51,fa),
	HX_("LEXER_TO_EXPR_UNOP",b3,78,a8,8a),
	::String(null())
};

void LexerOp_Impl__obj::__register()
{
	LexerOp_Impl__obj _hx_dummy;
	LexerOp_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript._Lexer.LexerOp_Impl_",67,27,ff,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LexerOp_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LexerOp_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< LexerOp_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LexerOp_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LexerOp_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LexerOp_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LexerOp_Impl__obj::__boot()
{
{
	ADD = HX_("+",2b,00,00,00);
}
{
	SUB = HX_("-",2d,00,00,00);
}
{
	MULT = HX_("*",2a,00,00,00);
}
{
	DIV = HX_("/",2f,00,00,00);
}
{
	MOD = HX_("%",25,00,00,00);
}
{
	AND = HX_("&",26,00,00,00);
}
{
	OR = HX_("|",7c,00,00,00);
}
{
	XOR = HX_("^",5e,00,00,00);
}
{
	SHL = HX_("<<",80,34,00,00);
}
{
	SHR = HX_(">>",40,36,00,00);
}
{
	USHR = HX_(">>>",fe,41,2f,00);
}
{
	EQ = HX_("==",60,35,00,00);
}
{
	NEQ = HX_("!=",fc,1c,00,00);
}
{
	GTE = HX_(">=",3f,36,00,00);
}
{
	LTE = HX_("<=",81,34,00,00);
}
{
	GT = HX_(">",3e,00,00,00);
}
{
	LT = HX_("<",3c,00,00,00);
}
{
	BOR = HX_("||",80,6c,00,00);
}
{
	BAND = HX_("&&",40,21,00,00);
}
{
	IS = HX_("is",ea,5b,00,00);
}
{
	NCOAL = HX_("??",20,37,00,00);
}
{
	INTERVAL = HX_("...",ee,0f,23,00);
}
{
	ARROW = HX_("=>",61,35,00,00);
}
{
	FUNCTION_ARROW = HX_("->",71,27,00,00);
}
{
	ASSIGN = HX_("=",3d,00,00,00);
}
{
	ADD_ASSIGN = HX_("+=",b2,25,00,00);
}
{
	SUB_ASSIGN = HX_("-=",70,27,00,00);
}
{
	MULT_ASSIGN = HX_("*=",d3,24,00,00);
}
{
	DIV_ASSIGN = HX_("/=",2e,29,00,00);
}
{
	MOD_ASSIGN = HX_("%=",78,20,00,00);
}
{
	SHL_ASSIGN = HX_("<<=",bd,bb,2d,00);
}
{
	SHR_ASSIGN = HX_(">>=",fd,41,2f,00);
}
{
	USHR_ASSIGN = HX_(">>>=",7f,7c,2a,29);
}
{
	OR_ASSIGN = HX_("|=",41,6c,00,00);
}
{
	AND_ASSIGN = HX_("&=",57,21,00,00);
}
{
	XOR_ASSIGN = HX_("^=",1f,52,00,00);
}
{
	NCOAL_ASSIGN = HX_("??=",1d,05,30,00);
}
{
	NOT = HX_("!",21,00,00,00);
}
{
	NOT_BITWISE = HX_("~",7e,00,00,00);
}
{
	INCREMENT = HX_("++",a0,25,00,00);
}
{
	DECREMENT = HX_("--",60,27,00,00);
}
{
	COMMENT = HX_("//",20,29,00,00);
}
{
	COMMENT_OPEN = HX_("/*",1b,29,00,00);
}
{
	COMMENT_CLOSE = HX_("*/",c5,24,00,00);
}
{
	ALL_LOPS = ::Array_obj< ::String >::fromData( _hx_array_data_c4ff2767_0,44);
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	 ::haxe::ds::StringMap _hx_run(){
		HX_JUST_GC_STACKFRAME
		 ::haxe::ds::StringMap LOOKUP_MAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
		{
			int _g = 0;
			::Array< ::String > _g1 = ::hscript::_Lexer::LexerOp_Impl__obj::ALL_LOPS;
			while((_g < _g1->length)){
				::String keyword = _g1->__get(_g);
				_g = (_g + 1);
				LOOKUP_MAP->set(::Std_obj::string(keyword),true);
			}
		}
		return LOOKUP_MAP;
	}
	HX_END_LOCAL_FUNC0(return)

	ALL_LOPS_LOOKUP = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	 ::haxe::ds::StringMap _hx_run(){
		HX_JUST_GC_STACKFRAME
		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
		_g->set(HX_("+",2b,00,00,00),( (unsigned char)(0) ));
		_g->set(HX_("-",2d,00,00,00),( (unsigned char)(1) ));
		_g->set(HX_("*",2a,00,00,00),( (unsigned char)(2) ));
		_g->set(HX_("/",2f,00,00,00),( (unsigned char)(3) ));
		_g->set(HX_("%",25,00,00,00),( (unsigned char)(4) ));
		_g->set(HX_("&",26,00,00,00),( (unsigned char)(5) ));
		_g->set(HX_("|",7c,00,00,00),( (unsigned char)(6) ));
		_g->set(HX_("^",5e,00,00,00),( (unsigned char)(7) ));
		_g->set(HX_("<<",80,34,00,00),( (unsigned char)(8) ));
		_g->set(HX_(">>",40,36,00,00),( (unsigned char)(9) ));
		_g->set(HX_(">>>",fe,41,2f,00),( (unsigned char)(10) ));
		_g->set(HX_("==",60,35,00,00),( (unsigned char)(11) ));
		_g->set(HX_("!=",fc,1c,00,00),( (unsigned char)(12) ));
		_g->set(HX_(">=",3f,36,00,00),( (unsigned char)(13) ));
		_g->set(HX_("<=",81,34,00,00),( (unsigned char)(14) ));
		_g->set(HX_(">",3e,00,00,00),( (unsigned char)(15) ));
		_g->set(HX_("<",3c,00,00,00),( (unsigned char)(16) ));
		_g->set(HX_("||",80,6c,00,00),( (unsigned char)(17) ));
		_g->set(HX_("&&",40,21,00,00),( (unsigned char)(18) ));
		_g->set(HX_("is",ea,5b,00,00),( (unsigned char)(19) ));
		_g->set(HX_("??",20,37,00,00),( (unsigned char)(20) ));
		_g->set(HX_("...",ee,0f,23,00),( (unsigned char)(21) ));
		_g->set(HX_("=>",61,35,00,00),( (unsigned char)(22) ));
		_g->set(HX_("=",3d,00,00,00),( (unsigned char)(23) ));
		_g->set(HX_("+=",b2,25,00,00),( (unsigned char)(24) ));
		_g->set(HX_("-=",70,27,00,00),( (unsigned char)(25) ));
		_g->set(HX_("*=",d3,24,00,00),( (unsigned char)(26) ));
		_g->set(HX_("/=",2e,29,00,00),( (unsigned char)(27) ));
		_g->set(HX_("%=",78,20,00,00),( (unsigned char)(28) ));
		_g->set(HX_("<<=",bd,bb,2d,00),( (unsigned char)(29) ));
		_g->set(HX_(">>=",fd,41,2f,00),( (unsigned char)(30) ));
		_g->set(HX_(">>>=",7f,7c,2a,29),( (unsigned char)(31) ));
		_g->set(HX_("|=",41,6c,00,00),( (unsigned char)(32) ));
		_g->set(HX_("&=",57,21,00,00),( (unsigned char)(33) ));
		_g->set(HX_("^=",1f,52,00,00),( (unsigned char)(34) ));
		_g->set(HX_("??=",1d,05,30,00),( (unsigned char)(35) ));
		return _g;
	}
	HX_END_LOCAL_FUNC0(return)

	LEXER_TO_EXPR_OP = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	 ::haxe::ds::StringMap _hx_run(){
		HX_JUST_GC_STACKFRAME
		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
		_g->set(HX_("~",7e,00,00,00),( (unsigned char)(0) ));
		_g->set(HX_("!",21,00,00,00),( (unsigned char)(1) ));
		_g->set(HX_("-",2d,00,00,00),( (unsigned char)(2) ));
		_g->set(HX_("++",a0,25,00,00),( (unsigned char)(3) ));
		_g->set(HX_("--",60,27,00,00),( (unsigned char)(4) ));
		return _g;
	}
	HX_END_LOCAL_FUNC0(return)

	LEXER_TO_EXPR_UNOP = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
}
}

} // end namespace hscript
} // end namespace _Lexer
