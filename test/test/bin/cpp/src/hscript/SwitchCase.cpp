// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_SwitchCase
#include <hscript/SwitchCase.h>
#endif

namespace hscript{

void SwitchCase_obj::__construct(::Array< ::Dynamic> values, ::hscript::Expr expr){
	this->values = values;
	this->expr = expr;
}

Dynamic SwitchCase_obj::__CreateEmpty() { return new SwitchCase_obj; }

void *SwitchCase_obj::_hx_vtable = 0;

Dynamic SwitchCase_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SwitchCase_obj > _hx_result = new SwitchCase_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SwitchCase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6cf437d7;
}


::hx::ObjectPtr< SwitchCase_obj > SwitchCase_obj::__new(::Array< ::Dynamic> values, ::hscript::Expr expr) {
	::hx::ObjectPtr< SwitchCase_obj > __this = new SwitchCase_obj();
	__this->__construct(values,expr);
	return __this;
}

::hx::ObjectPtr< SwitchCase_obj > SwitchCase_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> values, ::hscript::Expr expr) {
	SwitchCase_obj *__this = (SwitchCase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SwitchCase_obj), true, "hscript.SwitchCase"));
	*(void **)__this = SwitchCase_obj::_hx_vtable;
	__this->__construct(values,expr);
	return __this;
}

SwitchCase_obj::SwitchCase_obj()
{
}

void SwitchCase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SwitchCase);
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_END_CLASS();
}

void SwitchCase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(expr,"expr");
}

::hx::Val SwitchCase_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return ::hx::Val( values ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SwitchCase_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::hscript::Expr >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SwitchCase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("values",e2,03,b7,4f));
	outFields->push(HX_("expr",35,fd,1d,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SwitchCase_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SwitchCase_obj,values),HX_("values",e2,03,b7,4f)},
	{::hx::fsObject /*  ::hscript::Expr */ ,(int)offsetof(SwitchCase_obj,expr),HX_("expr",35,fd,1d,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SwitchCase_obj_sStaticStorageInfo = 0;
#endif

static ::String SwitchCase_obj_sMemberFields[] = {
	HX_("values",e2,03,b7,4f),
	HX_("expr",35,fd,1d,43),
	::String(null()) };

::hx::Class SwitchCase_obj::__mClass;

void SwitchCase_obj::__register()
{
	SwitchCase_obj _hx_dummy;
	SwitchCase_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.SwitchCase",ff,1a,2c,53);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SwitchCase_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SwitchCase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SwitchCase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SwitchCase_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
