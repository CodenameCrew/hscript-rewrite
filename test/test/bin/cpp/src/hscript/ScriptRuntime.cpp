// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Json
#include <haxe/Json.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_ErrorDef
#include <hscript/ErrorDef.h>
#endif
#ifndef INCLUDED_hscript_IHScriptCustomBehaviour
#include <hscript/IHScriptCustomBehaviour.h>
#endif
#ifndef INCLUDED_hscript_InterpLocalsImpl
#include <hscript/InterpLocalsImpl.h>
#endif
#ifndef INCLUDED_hscript_ScriptRuntime
#include <hscript/ScriptRuntime.h>
#endif
#ifndef INCLUDED_hscript_StaticInterp
#include <hscript/StaticInterp.h>
#endif
#ifndef INCLUDED_hscript__Interp_IDeclaredVariable
#include <hscript/_Interp/IDeclaredVariable.h>
#endif
#ifndef INCLUDED_hscript__Interp_IScriptParentType
#include <hscript/_Interp/IScriptParentType.h>
#endif
#ifndef INCLUDED_hscript__Interp_InterpLocals_Impl_
#include <hscript/_Interp/InterpLocals_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

namespace hscript{

void ScriptRuntime_obj::__construct(::String fileName){
	this->scriptParentType = ::hscript::_Interp::IScriptParentType_obj::ISNone_dyn();
	this->hasScriptParent = false;
	this->lineNumber = 0;
	this->fileName = null();
	this->returnValue = null();
	this->inTry = false;
	this->depth = 0;
	this->changes = ::Array_obj< ::Dynamic>::__new(0);
	::String _hx_tmp;
	if (::hx::IsNotNull( fileName )) {
		_hx_tmp = fileName;
	}
	else {
		_hx_tmp = HX_("",00,00,00,00);
	}
	this->fileName = _hx_tmp;
	this->variables = ::hscript::_Interp::InterpLocals_Impl__obj::_new(::hx::ObjectPtr<OBJ_>(this));
}

Dynamic ScriptRuntime_obj::__CreateEmpty() { return new ScriptRuntime_obj; }

void *ScriptRuntime_obj::_hx_vtable = 0;

Dynamic ScriptRuntime_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScriptRuntime_obj > _hx_result = new ScriptRuntime_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScriptRuntime_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2acd4ada;
}

 ::Dynamic ScriptRuntime_obj::set_scriptParent( ::Dynamic value){
            	HX_JUST_GC_STACKFRAME
	if (::hx::IsNull( value )) {
		this->scriptParentFields = null();
		this->hasScriptParent = false;
		this->scriptParentType = ::hscript::_Interp::IScriptParentType_obj::ISNone_dyn();
		return (this->scriptParent = null());
	}
	if (::hx::IsNull( this->scriptParentFields )) {
		this->scriptParentFields =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
	}
	this->scriptParentFields->clear();
	this->hasScriptParent = true;
	{
		 ::ValueType _g = ::Type_obj::_hx_typeof(value);
		switch((int)(_g->_hx_getIndex())){
			case (int)4: {
				{
					int _g1 = 0;
					::Array< ::String > _g2 = ::Reflect_obj::fields(value);
					while((_g1 < _g2->length)){
						::String field = _g2->__get(_g1);
						_g1 = (_g1 + 1);
						this->scriptParentFields->set(field,true);
					}
				}
				this->scriptParentType = ::hscript::_Interp::IScriptParentType_obj::ISObject_dyn();
			}
			break;
			case (int)6: {
				{
					int _g3 = 0;
					::Array< ::String > _g4 = ::Type_obj::getInstanceFields(_g->_hx_getObject(0).StaticCast< ::hx::Class >());
					while((_g3 < _g4->length)){
						::String field1 = _g4->__get(_g3);
						_g3 = (_g3 + 1);
						this->scriptParentFields->set(field1,true);
					}
				}
				this->scriptParentType = ::hscript::_Interp::IScriptParentType_obj::ISObject_dyn();
			}
			break;
			default:{
				this->hasScriptParent = false;
				this->scriptParentType = ::hscript::_Interp::IScriptParentType_obj::ISNone_dyn();
			}
		}
	}
	return (this->scriptParent = value);
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,set_scriptParent,return )

void ScriptRuntime_obj::reset(){
	this->variablesDeclared = null();
	this->variablesValues = null();
	this->variableNames = null();
	this->variablesLookup = null();
	this->changes = ::Array_obj< ::Dynamic>::__new(0);
	this->variables->useDefaults = true;
	this->variables->defaultsValues->clear();
	this->depth = 0;
	this->inTry = false;
	this->returnValue = null();
}


HX_DEFINE_DYNAMIC_FUNC0(ScriptRuntime_obj,reset,(void))

void ScriptRuntime_obj::loadTables(::Array< ::String > info){
            	HX_JUST_GC_STACKFRAME
	this->variablesDeclared = ::Array_obj< bool >::__new(info->length);
	this->variablesValues = ::Array_obj< ::Dynamic>::__new(info->length);
	{
		int _g = 0;
		int _g1 = this->variablesValues->length;
		while((_g < _g1)){
			_g = (_g + 1);
			this->variablesValues->__unsafe_set((_g - 1), ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),null())));
		}
	}
	this->variableNames = info->copy();
	this->variablesLookup =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
	{
		int _g_current = 0;
		while((_g_current < info->length)){
			::String _g_value = info->__get(_g_current);
			_g_current = (_g_current + 1);
			this->variablesLookup->set(_g_value,(_g_current - 1));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,loadTables,(void))

void ScriptRuntime_obj::loadBaseVariables(){
	 ::hscript::ScriptRuntime _gthis = ::hx::ObjectPtr<OBJ_>(this);
	{
		 ::hscript::InterpLocalsImpl _this = this->variables;
		 ::Dynamic value = ( ( ::Dynamic)(::hx::ClassOf< ::Std >()) );
		if (_this->useDefaults) {
			_this->defaultsValues->set(HX_("Std",83,60,3f,00),value);
		}
		else {
			bool _hx_tmp;
			if (::hx::IsNotNull( _this->parent->variablesLookup )) {
				_hx_tmp = _this->parent->variablesLookup->exists(HX_("Std",83,60,3f,00));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				 ::hscript::ScriptRuntime _this1 = _this->parent;
				int name = _this->parent->variablesLookup->get_int(HX_("Std",83,60,3f,00));
				_this1->variablesDeclared->__unsafe_set(name,true);
				_hx_array_unsafe_get(_this1->variablesValues,name)->__SetField(HX_("r",72,00,00,00),value,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this2 = this->variables;
		 ::Dynamic value1 = ( ( ::Dynamic)(::hx::ClassOf< ::Math >()) );
		if (_this2->useDefaults) {
			_this2->defaultsValues->set(HX_("Math",e8,6d,2f,33),value1);
		}
		else {
			bool _hx_tmp1;
			if (::hx::IsNotNull( _this2->parent->variablesLookup )) {
				_hx_tmp1 = _this2->parent->variablesLookup->exists(HX_("Math",e8,6d,2f,33));
			}
			else {
				_hx_tmp1 = false;
			}
			if (_hx_tmp1) {
				 ::hscript::ScriptRuntime _this3 = _this2->parent;
				int name1 = _this2->parent->variablesLookup->get_int(HX_("Math",e8,6d,2f,33));
				_this3->variablesDeclared->__unsafe_set(name1,true);
				_hx_array_unsafe_get(_this3->variablesValues,name1)->__SetField(HX_("r",72,00,00,00),value1,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this4 = this->variables;
		 ::Dynamic value2 = ( ( ::Dynamic)(::hx::ClassOf< ::Reflect >()) );
		if (_this4->useDefaults) {
			_this4->defaultsValues->set(HX_("Reflect",1d,ac,7a,b6),value2);
		}
		else {
			bool _hx_tmp2;
			if (::hx::IsNotNull( _this4->parent->variablesLookup )) {
				_hx_tmp2 = _this4->parent->variablesLookup->exists(HX_("Reflect",1d,ac,7a,b6));
			}
			else {
				_hx_tmp2 = false;
			}
			if (_hx_tmp2) {
				 ::hscript::ScriptRuntime _this5 = _this4->parent;
				int name2 = _this4->parent->variablesLookup->get_int(HX_("Reflect",1d,ac,7a,b6));
				_this5->variablesDeclared->__unsafe_set(name2,true);
				_hx_array_unsafe_get(_this5->variablesValues,name2)->__SetField(HX_("r",72,00,00,00),value2,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this6 = this->variables;
		 ::Dynamic value3 = ( ( ::Dynamic)(::hx::ClassOf< ::StringTools >()) );
		if (_this6->useDefaults) {
			_this6->defaultsValues->set(HX_("StringTools",6a,db,63,03),value3);
		}
		else {
			bool _hx_tmp3;
			if (::hx::IsNotNull( _this6->parent->variablesLookup )) {
				_hx_tmp3 = _this6->parent->variablesLookup->exists(HX_("StringTools",6a,db,63,03));
			}
			else {
				_hx_tmp3 = false;
			}
			if (_hx_tmp3) {
				 ::hscript::ScriptRuntime _this7 = _this6->parent;
				int name3 = _this6->parent->variablesLookup->get_int(HX_("StringTools",6a,db,63,03));
				_this7->variablesDeclared->__unsafe_set(name3,true);
				_hx_array_unsafe_get(_this7->variablesValues,name3)->__SetField(HX_("r",72,00,00,00),value3,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this8 = this->variables;
		 ::Dynamic value4 = ( ( ::Dynamic)(::hx::ClassOf< ::Xml >()) );
		if (_this8->useDefaults) {
			_this8->defaultsValues->set(HX_("Xml",b7,25,43,00),value4);
		}
		else {
			bool _hx_tmp4;
			if (::hx::IsNotNull( _this8->parent->variablesLookup )) {
				_hx_tmp4 = _this8->parent->variablesLookup->exists(HX_("Xml",b7,25,43,00));
			}
			else {
				_hx_tmp4 = false;
			}
			if (_hx_tmp4) {
				 ::hscript::ScriptRuntime _this9 = _this8->parent;
				int name4 = _this8->parent->variablesLookup->get_int(HX_("Xml",b7,25,43,00));
				_this9->variablesDeclared->__unsafe_set(name4,true);
				_hx_array_unsafe_get(_this9->variablesValues,name4)->__SetField(HX_("r",72,00,00,00),value4,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this10 = this->variables;
		 ::Dynamic value5 = ( ( ::Dynamic)(::hx::ClassOf< ::Type >()) );
		if (_this10->useDefaults) {
			_this10->defaultsValues->set(HX_("Type",da,1e,e2,37),value5);
		}
		else {
			bool _hx_tmp5;
			if (::hx::IsNotNull( _this10->parent->variablesLookup )) {
				_hx_tmp5 = _this10->parent->variablesLookup->exists(HX_("Type",da,1e,e2,37));
			}
			else {
				_hx_tmp5 = false;
			}
			if (_hx_tmp5) {
				 ::hscript::ScriptRuntime _this11 = _this10->parent;
				int name5 = _this10->parent->variablesLookup->get_int(HX_("Type",da,1e,e2,37));
				_this11->variablesDeclared->__unsafe_set(name5,true);
				_hx_array_unsafe_get(_this11->variablesValues,name5)->__SetField(HX_("r",72,00,00,00),value5,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this12 = this->variables;
		 ::Dynamic value6 = ( ( ::Dynamic)(::hx::ClassOf< ::Date >()) );
		if (_this12->useDefaults) {
			_this12->defaultsValues->set(HX_("Date",4e,82,3c,2d),value6);
		}
		else {
			bool _hx_tmp6;
			if (::hx::IsNotNull( _this12->parent->variablesLookup )) {
				_hx_tmp6 = _this12->parent->variablesLookup->exists(HX_("Date",4e,82,3c,2d));
			}
			else {
				_hx_tmp6 = false;
			}
			if (_hx_tmp6) {
				 ::hscript::ScriptRuntime _this13 = _this12->parent;
				int name6 = _this12->parent->variablesLookup->get_int(HX_("Date",4e,82,3c,2d));
				_this13->variablesDeclared->__unsafe_set(name6,true);
				_hx_array_unsafe_get(_this13->variablesValues,name6)->__SetField(HX_("r",72,00,00,00),value6,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this14 = this->variables;
		 ::Dynamic value7 = ( ( ::Dynamic)(::hx::ClassOf< ::Lambda >()) );
		if (_this14->useDefaults) {
			_this14->defaultsValues->set(HX_("Lambda",27,a7,54,85),value7);
		}
		else {
			bool _hx_tmp7;
			if (::hx::IsNotNull( _this14->parent->variablesLookup )) {
				_hx_tmp7 = _this14->parent->variablesLookup->exists(HX_("Lambda",27,a7,54,85));
			}
			else {
				_hx_tmp7 = false;
			}
			if (_hx_tmp7) {
				 ::hscript::ScriptRuntime _this15 = _this14->parent;
				int name7 = _this14->parent->variablesLookup->get_int(HX_("Lambda",27,a7,54,85));
				_this15->variablesDeclared->__unsafe_set(name7,true);
				_hx_array_unsafe_get(_this15->variablesValues,name7)->__SetField(HX_("r",72,00,00,00),value7,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this16 = this->variables;
		 ::Dynamic value8 = ( ( ::Dynamic)(::hx::ClassOf< ::haxe::Json >()) );
		if (_this16->useDefaults) {
			_this16->defaultsValues->set(HX_("Json",48,6e,41,31),value8);
		}
		else {
			bool _hx_tmp8;
			if (::hx::IsNotNull( _this16->parent->variablesLookup )) {
				_hx_tmp8 = _this16->parent->variablesLookup->exists(HX_("Json",48,6e,41,31));
			}
			else {
				_hx_tmp8 = false;
			}
			if (_hx_tmp8) {
				 ::hscript::ScriptRuntime _this17 = _this16->parent;
				int name8 = _this16->parent->variablesLookup->get_int(HX_("Json",48,6e,41,31));
				_this17->variablesDeclared->__unsafe_set(name8,true);
				_hx_array_unsafe_get(_this17->variablesValues,name8)->__SetField(HX_("r",72,00,00,00),value8,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this18 = this->variables;
		 ::Dynamic value9 = ( ( ::Dynamic)(::hx::ClassOf< ::haxe::crypto::Base64 >()) );
		if (_this18->useDefaults) {
			_this18->defaultsValues->set(HX_("Base64",af,71,bc,89),value9);
		}
		else {
			bool _hx_tmp9;
			if (::hx::IsNotNull( _this18->parent->variablesLookup )) {
				_hx_tmp9 = _this18->parent->variablesLookup->exists(HX_("Base64",af,71,bc,89));
			}
			else {
				_hx_tmp9 = false;
			}
			if (_hx_tmp9) {
				 ::hscript::ScriptRuntime _this19 = _this18->parent;
				int name9 = _this18->parent->variablesLookup->get_int(HX_("Base64",af,71,bc,89));
				_this19->variablesDeclared->__unsafe_set(name9,true);
				_hx_array_unsafe_get(_this19->variablesValues,name9)->__SetField(HX_("r",72,00,00,00),value9,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this20 = this->variables;
		 ::Dynamic value10 = ( ( ::Dynamic)(::hx::ClassOf< ::haxe::io::Path >()) );
		if (_this20->useDefaults) {
			_this20->defaultsValues->set(HX_("Path",c5,11,2b,35),value10);
		}
		else {
			bool _hx_tmp10;
			if (::hx::IsNotNull( _this20->parent->variablesLookup )) {
				_hx_tmp10 = _this20->parent->variablesLookup->exists(HX_("Path",c5,11,2b,35));
			}
			else {
				_hx_tmp10 = false;
			}
			if (_hx_tmp10) {
				 ::hscript::ScriptRuntime _this21 = _this20->parent;
				int name10 = _this20->parent->variablesLookup->get_int(HX_("Path",c5,11,2b,35));
				_this21->variablesDeclared->__unsafe_set(name10,true);
				_hx_array_unsafe_get(_this21->variablesValues,name10)->__SetField(HX_("r",72,00,00,00),value10,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this22 = this->variables;
		 ::Dynamic value11 = ( ( ::Dynamic)(::hx::ClassOf< ::haxe::Timer >()) );
		if (_this22->useDefaults) {
			_this22->defaultsValues->set(HX_("Timer",a5,2f,63,a3),value11);
		}
		else {
			bool _hx_tmp11;
			if (::hx::IsNotNull( _this22->parent->variablesLookup )) {
				_hx_tmp11 = _this22->parent->variablesLookup->exists(HX_("Timer",a5,2f,63,a3));
			}
			else {
				_hx_tmp11 = false;
			}
			if (_hx_tmp11) {
				 ::hscript::ScriptRuntime _this23 = _this22->parent;
				int name11 = _this22->parent->variablesLookup->get_int(HX_("Timer",a5,2f,63,a3));
				_this23->variablesDeclared->__unsafe_set(name11,true);
				_hx_array_unsafe_get(_this23->variablesValues,name11)->__SetField(HX_("r",72,00,00,00),value11,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this24 = this->variables;
		 ::Dynamic value12 = ( ( ::Dynamic)(::hx::ClassOf< ::EReg >()) );
		if (_this24->useDefaults) {
			_this24->defaultsValues->set(HX_("EReg",0f,4a,da,2d),value12);
		}
		else {
			bool _hx_tmp12;
			if (::hx::IsNotNull( _this24->parent->variablesLookup )) {
				_hx_tmp12 = _this24->parent->variablesLookup->exists(HX_("EReg",0f,4a,da,2d));
			}
			else {
				_hx_tmp12 = false;
			}
			if (_hx_tmp12) {
				 ::hscript::ScriptRuntime _this25 = _this24->parent;
				int name12 = _this24->parent->variablesLookup->get_int(HX_("EReg",0f,4a,da,2d));
				_this25->variablesDeclared->__unsafe_set(name12,true);
				_hx_array_unsafe_get(_this25->variablesValues,name12)->__SetField(HX_("r",72,00,00,00),value12,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this26 = this->variables;
		 ::Dynamic value13 = ( ( ::Dynamic)(::hx::ClassOf< ::StringBuf >()) );
		if (_this26->useDefaults) {
			_this26->defaultsValues->set(HX_("StringBuf",c2,ca,83,69),value13);
		}
		else {
			bool _hx_tmp13;
			if (::hx::IsNotNull( _this26->parent->variablesLookup )) {
				_hx_tmp13 = _this26->parent->variablesLookup->exists(HX_("StringBuf",c2,ca,83,69));
			}
			else {
				_hx_tmp13 = false;
			}
			if (_hx_tmp13) {
				 ::hscript::ScriptRuntime _this27 = _this26->parent;
				int name13 = _this26->parent->variablesLookup->get_int(HX_("StringBuf",c2,ca,83,69));
				_this27->variablesDeclared->__unsafe_set(name13,true);
				_hx_array_unsafe_get(_this27->variablesValues,name13)->__SetField(HX_("r",72,00,00,00),value13,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this28 = this->variables;
		 ::Dynamic value14 = ( ( ::Dynamic)(::hx::ClassOf< ::Sys >()) );
		if (_this28->useDefaults) {
			_this28->defaultsValues->set(HX_("Sys",ed,64,3f,00),value14);
		}
		else {
			bool _hx_tmp14;
			if (::hx::IsNotNull( _this28->parent->variablesLookup )) {
				_hx_tmp14 = _this28->parent->variablesLookup->exists(HX_("Sys",ed,64,3f,00));
			}
			else {
				_hx_tmp14 = false;
			}
			if (_hx_tmp14) {
				 ::hscript::ScriptRuntime _this29 = _this28->parent;
				int name14 = _this28->parent->variablesLookup->get_int(HX_("Sys",ed,64,3f,00));
				_this29->variablesDeclared->__unsafe_set(name14,true);
				_hx_array_unsafe_get(_this29->variablesValues,name14)->__SetField(HX_("r",72,00,00,00),value14,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this30 = this->variables;
		 ::Dynamic value15 = ( ( ::Dynamic)(::hx::ClassOf< ::sys::io::File >()) );
		if (_this30->useDefaults) {
			_this30->defaultsValues->set(HX_("File",9c,fa,94,2e),value15);
		}
		else {
			bool _hx_tmp15;
			if (::hx::IsNotNull( _this30->parent->variablesLookup )) {
				_hx_tmp15 = _this30->parent->variablesLookup->exists(HX_("File",9c,fa,94,2e));
			}
			else {
				_hx_tmp15 = false;
			}
			if (_hx_tmp15) {
				 ::hscript::ScriptRuntime _this31 = _this30->parent;
				int name15 = _this30->parent->variablesLookup->get_int(HX_("File",9c,fa,94,2e));
				_this31->variablesDeclared->__unsafe_set(name15,true);
				_hx_array_unsafe_get(_this31->variablesValues,name15)->__SetField(HX_("r",72,00,00,00),value15,::hx::paccDynamic);
			}
		}
	}
	{
		 ::hscript::InterpLocalsImpl _this32 = this->variables;
		 ::Dynamic value16 = ( ( ::Dynamic)(::hx::ClassOf< ::sys::FileSystem >()) );
		if (_this32->useDefaults) {
			_this32->defaultsValues->set(HX_("FileSystem",ab,e2,17,ca),value16);
		}
		else {
			bool _hx_tmp16;
			if (::hx::IsNotNull( _this32->parent->variablesLookup )) {
				_hx_tmp16 = _this32->parent->variablesLookup->exists(HX_("FileSystem",ab,e2,17,ca));
			}
			else {
				_hx_tmp16 = false;
			}
			if (_hx_tmp16) {
				 ::hscript::ScriptRuntime _this33 = _this32->parent;
				int name16 = _this32->parent->variablesLookup->get_int(HX_("FileSystem",ab,e2,17,ca));
				_this33->variablesDeclared->__unsafe_set(name16,true);
				_hx_array_unsafe_get(_this33->variablesValues,name16)->__SetField(HX_("r",72,00,00,00),value16,::hx::paccDynamic);
			}
		}
	}
	{
		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscript::ScriptRuntime,_gthis) HXARGC(1)
		void _hx_run(::cpp::VirtualArray vals){
			 ::Dynamic info =  ::Dynamic(::hx::Anon_obj::Create(2)
				->setFixed(0,HX_("fileName",e7,5a,43,62),_gthis->fileName)
				->setFixed(1,HX_("lineNumber",dd,81,22,76),_gthis->lineNumber));
			 ::Dynamic value = vals->shift();
			if ((vals->get_length() > 0)) {
				info->__SetField(HX_("customParams",d7,51,18,ed),vals,::hx::paccDynamic);
			}
			 ::Dynamic value1 = ::haxe::Log_obj::trace;
			value1(::Std_obj::string(value),info);
		}
		HX_END_LOCAL_FUNC1((void))

		 ::hscript::InterpLocalsImpl _this34 = this->variables;
		 ::Dynamic value17 = ::Reflect_obj::makeVarArgs( ::Dynamic(new _hx_Closure_0(_gthis)));
		if (_this34->useDefaults) {
			_this34->defaultsValues->set(HX_("trace",85,8e,1f,16),value17);
		}
		else {
			bool _hx_tmp17;
			if (::hx::IsNotNull( _this34->parent->variablesLookup )) {
				_hx_tmp17 = _this34->parent->variablesLookup->exists(HX_("trace",85,8e,1f,16));
			}
			else {
				_hx_tmp17 = false;
			}
			if (_hx_tmp17) {
				 ::hscript::ScriptRuntime _this35 = _this34->parent;
				int name17 = _this34->parent->variablesLookup->get_int(HX_("trace",85,8e,1f,16));
				_this35->variablesDeclared->__unsafe_set(name17,true);
				_hx_array_unsafe_get(_this35->variablesValues,name17)->__SetField(HX_("r",72,00,00,00),value17,::hx::paccDynamic);
			}
		}
	}
	this->variables->loadDefaults();
}


HX_DEFINE_DYNAMIC_FUNC0(ScriptRuntime_obj,loadBaseVariables,(void))

 ::Dynamic ScriptRuntime_obj::declare(int name, ::Dynamic value){
            	HX_JUST_GC_STACKFRAME
	::Array< ::Dynamic> _hx_tmp = this->changes;
	bool _g = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,name)) );
	_hx_tmp->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,name,_g,_hx_array_unsafe_get(this->variablesValues,name)));
	this->variablesDeclared->__unsafe_set(name,true);
	this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
		->setFixed(0,HX_("r",72,00,00,00),value)));
	return value;
}


HX_DEFINE_DYNAMIC_FUNC2(ScriptRuntime_obj,declare,return )

 ::Dynamic ScriptRuntime_obj::declareReferenced(int name, ::Dynamic ref){
            	HX_JUST_GC_STACKFRAME
	::Array< ::Dynamic> _hx_tmp = this->changes;
	bool _g = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,name)) );
	_hx_tmp->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,name,_g,_hx_array_unsafe_get(this->variablesValues,name)));
	this->variablesDeclared->__unsafe_set(name,true);
	this->variablesValues->__unsafe_set(name,ref);
	return  ::Dynamic(ref->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
}


HX_DEFINE_DYNAMIC_FUNC2(ScriptRuntime_obj,declareReferenced,return )

 ::Dynamic ScriptRuntime_obj::assign(int name, ::Dynamic value){
	this->variablesDeclared->__unsafe_set(name,true);
	_hx_array_unsafe_get(this->variablesValues,name)->__SetField(HX_("r",72,00,00,00),value,::hx::paccDynamic);
	return value;
}


HX_DEFINE_DYNAMIC_FUNC2(ScriptRuntime_obj,assign,return )

::cpp::VirtualArray ScriptRuntime_obj::duplicate(::cpp::VirtualArray vector){
	::cpp::VirtualArray newVector = ::cpp::VirtualArray_obj::__new(vector->get_length());
	{
		int _g = 0;
		int _g1 = vector->get_length();
		while((_g < _g1)){
			_g = (_g + 1);
			int i = (_g - 1);
			{
				 ::Dynamic val = _hx_array_unsafe_get(vector,i);
				newVector->__unsafe_set(i,val);
			}
		}
	}
	return newVector;
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,duplicate,return )

int ScriptRuntime_obj::store(){
	return this->changes->length;
}


HX_DEFINE_DYNAMIC_FUNC0(ScriptRuntime_obj,store,return )

void ScriptRuntime_obj::restore(int oldChangesIndex){
	while((this->changes->length > oldChangesIndex)){
		 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
		int name = change->name;
		if (change->oldDeclared) {
			this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
			this->variablesValues->__unsafe_set(name,change->oldValue);
		}
		else {
			this->variablesDeclared->__unsafe_set(name,false);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),null())));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,restore,(void))

 ::Dynamic ScriptRuntime_obj::resolve(::String varName){
            	HX_JUST_GC_STACKFRAME
	 ::Dynamic line = this->lineNumber;
	int _hx_tmp;
	if (::hx::IsNotNull( line )) {
		_hx_tmp = ( (int)(line) );
	}
	else {
		_hx_tmp = this->lineNumber;
	}
	HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnknownVariable(varName),null(),null(),this->fileName,_hx_tmp));
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,resolve,return )

 ::Dynamic ScriptRuntime_obj::resolveGlobal(int ident){
	::String varName = ( (::String)(_hx_array_unsafe_get(this->variableNames,ident)) );
	if (::hscript::StaticInterp_obj::staticVariables->exists(varName)) {
		return ::hscript::StaticInterp_obj::staticVariables->get(varName);
	}
	bool _hx_tmp;
	if (::hx::IsNotNull( this->publicVariables )) {
		_hx_tmp = this->publicVariables->exists(varName);
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		return this->publicVariables->get(varName);
	}
	if (this->hasScriptParent) {
		if (this->scriptParentFields->exists(varName)) {
			switch((int)(this->scriptParentType->_hx_getIndex())){
				case (int)0: {
					 ::Dynamic object = this->scriptParent;
					if (::Std_obj::isOfType(object,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
						return ::hscript::IHScriptCustomBehaviour_obj::hget(object,varName);
					}
					else {
						return ::Reflect_obj::getProperty(object,varName);
					}
				}
				break;
				case (int)1: {
					return null();
				}
				break;
			}
		}
		if (this->scriptParentFields->exists((HX_("get_",09,03,62,44) + varName))) {
			::String field = (HX_("get_",09,03,62,44) + varName);
			 ::Dynamic _hx_tmp1;
			switch((int)(this->scriptParentType->_hx_getIndex())){
				case (int)0: {
					 ::Dynamic object1 = this->scriptParent;
					if (::Std_obj::isOfType(object1,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
						_hx_tmp1 = ::hscript::IHScriptCustomBehaviour_obj::hget(object1,field);
					}
					else {
						_hx_tmp1 = ::Reflect_obj::getProperty(object1,field);
					}
				}
				break;
				case (int)1: {
					_hx_tmp1 = null();
				}
				break;
			}
			return _hx_tmp1();
		}
	}
	return this->resolve(varName);
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,resolveGlobal,return )

bool ScriptRuntime_obj::isScriptParentField(::String field){
	return this->scriptParentFields->exists(field);
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,isScriptParentField,return )

 ::Dynamic ScriptRuntime_obj::getScriptParentField(::String field){
	switch((int)(this->scriptParentType->_hx_getIndex())){
		case (int)0: {
			 ::Dynamic object = this->scriptParent;
			if (::Std_obj::isOfType(object,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
				return ::hscript::IHScriptCustomBehaviour_obj::hget(object,field);
			}
			else {
				return ::Reflect_obj::getProperty(object,field);
			}
		}
		break;
		case (int)1: {
			return null();
		}
		break;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ScriptRuntime_obj,getScriptParentField,return )

 ::Dynamic ScriptRuntime_obj::setScriptParentField(::String field, ::Dynamic value){
	switch((int)(this->scriptParentType->_hx_getIndex())){
		case (int)0: {
			 ::Dynamic object = this->scriptParent;
			if (::Std_obj::isOfType(object,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
				return ::hscript::IHScriptCustomBehaviour_obj::hset(object,field,value);
			}
			else {
				::Reflect_obj::setProperty(object,field,value);
				return value;
			}
		}
		break;
		case (int)1: {
			return null();
		}
		break;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ScriptRuntime_obj,setScriptParentField,return )

 ::Dynamic ScriptRuntime_obj::error( ::hscript::ErrorDef err, ::Dynamic line){
            	HX_JUST_GC_STACKFRAME
	int _hx_tmp;
	if (::hx::IsNotNull( line )) {
		_hx_tmp = ( (int)(line) );
	}
	else {
		_hx_tmp = this->lineNumber;
	}
	HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err,null(),null(),this->fileName,_hx_tmp));
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ScriptRuntime_obj,error,return )


::hx::ObjectPtr< ScriptRuntime_obj > ScriptRuntime_obj::__new(::String fileName) {
	::hx::ObjectPtr< ScriptRuntime_obj > __this = new ScriptRuntime_obj();
	__this->__construct(fileName);
	return __this;
}

::hx::ObjectPtr< ScriptRuntime_obj > ScriptRuntime_obj::__alloc(::hx::Ctx *_hx_ctx,::String fileName) {
	ScriptRuntime_obj *__this = (ScriptRuntime_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScriptRuntime_obj), true, "hscript.ScriptRuntime"));
	*(void **)__this = ScriptRuntime_obj::_hx_vtable;
	__this->__construct(fileName);
	return __this;
}

ScriptRuntime_obj::ScriptRuntime_obj()
{
}

void ScriptRuntime_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScriptRuntime);
	HX_MARK_MEMBER_NAME(variablesDeclared,"variablesDeclared");
	HX_MARK_MEMBER_NAME(variablesValues,"variablesValues");
	HX_MARK_MEMBER_NAME(variableNames,"variableNames");
	HX_MARK_MEMBER_NAME(variablesLookup,"variablesLookup");
	HX_MARK_MEMBER_NAME(changes,"changes");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(inTry,"inTry");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_MEMBER_NAME(fileName,"fileName");
	HX_MARK_MEMBER_NAME(lineNumber,"lineNumber");
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(publicVariables,"publicVariables");
	HX_MARK_MEMBER_NAME(errorHandler,"errorHandler");
	HX_MARK_MEMBER_NAME(hasScriptParent,"hasScriptParent");
	HX_MARK_MEMBER_NAME(scriptParent,"scriptParent");
	HX_MARK_MEMBER_NAME(scriptParentType,"scriptParentType");
	HX_MARK_MEMBER_NAME(scriptParentFields,"scriptParentFields");
	HX_MARK_END_CLASS();
}

void ScriptRuntime_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variablesDeclared,"variablesDeclared");
	HX_VISIT_MEMBER_NAME(variablesValues,"variablesValues");
	HX_VISIT_MEMBER_NAME(variableNames,"variableNames");
	HX_VISIT_MEMBER_NAME(variablesLookup,"variablesLookup");
	HX_VISIT_MEMBER_NAME(changes,"changes");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(inTry,"inTry");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
	HX_VISIT_MEMBER_NAME(fileName,"fileName");
	HX_VISIT_MEMBER_NAME(lineNumber,"lineNumber");
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(publicVariables,"publicVariables");
	HX_VISIT_MEMBER_NAME(errorHandler,"errorHandler");
	HX_VISIT_MEMBER_NAME(hasScriptParent,"hasScriptParent");
	HX_VISIT_MEMBER_NAME(scriptParent,"scriptParent");
	HX_VISIT_MEMBER_NAME(scriptParentType,"scriptParentType");
	HX_VISIT_MEMBER_NAME(scriptParentFields,"scriptParentFields");
}

::hx::Val ScriptRuntime_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return ::hx::Val( depth ); }
		if (HX_FIELD_EQ(inName,"inTry") ) { return ::hx::Val( inTry ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"store") ) { return ::hx::Val( store_dyn() ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"assign") ) { return ::hx::Val( assign_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"changes") ) { return ::hx::Val( changes ); }
		if (HX_FIELD_EQ(inName,"declare") ) { return ::hx::Val( declare_dyn() ); }
		if (HX_FIELD_EQ(inName,"restore") ) { return ::hx::Val( restore_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolve") ) { return ::hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { return ::hx::Val( fileName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return ::hx::Val( variables ); }
		if (HX_FIELD_EQ(inName,"duplicate") ) { return ::hx::Val( duplicate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineNumber") ) { return ::hx::Val( lineNumber ); }
		if (HX_FIELD_EQ(inName,"loadTables") ) { return ::hx::Val( loadTables_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return ::hx::Val( returnValue ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"errorHandler") ) { return ::hx::Val( errorHandler ); }
		if (HX_FIELD_EQ(inName,"scriptParent") ) { return ::hx::Val( scriptParent ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"variableNames") ) { return ::hx::Val( variableNames ); }
		if (HX_FIELD_EQ(inName,"resolveGlobal") ) { return ::hx::Val( resolveGlobal_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"variablesValues") ) { return ::hx::Val( variablesValues ); }
		if (HX_FIELD_EQ(inName,"variablesLookup") ) { return ::hx::Val( variablesLookup ); }
		if (HX_FIELD_EQ(inName,"publicVariables") ) { return ::hx::Val( publicVariables ); }
		if (HX_FIELD_EQ(inName,"hasScriptParent") ) { return ::hx::Val( hasScriptParent ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"scriptParentType") ) { return ::hx::Val( scriptParentType ); }
		if (HX_FIELD_EQ(inName,"set_scriptParent") ) { return ::hx::Val( set_scriptParent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"variablesDeclared") ) { return ::hx::Val( variablesDeclared ); }
		if (HX_FIELD_EQ(inName,"loadBaseVariables") ) { return ::hx::Val( loadBaseVariables_dyn() ); }
		if (HX_FIELD_EQ(inName,"declareReferenced") ) { return ::hx::Val( declareReferenced_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"scriptParentFields") ) { return ::hx::Val( scriptParentFields ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isScriptParentField") ) { return ::hx::Val( isScriptParentField_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getScriptParentField") ) { return ::hx::Val( getScriptParentField_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScriptParentField") ) { return ::hx::Val( setScriptParentField_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScriptRuntime_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inTry") ) { inTry=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"changes") ) { changes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { fileName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::hscript::InterpLocalsImpl >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineNumber") ) { lineNumber=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"errorHandler") ) { errorHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scriptParent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scriptParent(inValue.Cast<  ::Dynamic >()) );scriptParent=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"variableNames") ) { variableNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"variablesValues") ) { variablesValues=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"variablesLookup") ) { variablesLookup=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"publicVariables") ) { publicVariables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasScriptParent") ) { hasScriptParent=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"scriptParentType") ) { scriptParentType=inValue.Cast<  ::hscript::_Interp::IScriptParentType >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"variablesDeclared") ) { variablesDeclared=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"scriptParentFields") ) { scriptParentFields=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScriptRuntime_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("variablesDeclared",d1,06,15,3c));
	outFields->push(HX_("variablesValues",f9,bd,db,a8));
	outFields->push(HX_("variableNames",ec,53,6d,3b));
	outFields->push(HX_("variablesLookup",91,5c,da,ba));
	outFields->push(HX_("changes",03,b1,cc,cc));
	outFields->push(HX_("depth",03,f1,29,d7));
	outFields->push(HX_("inTry",56,82,08,be));
	outFields->push(HX_("returnValue",a1,4c,95,3e));
	outFields->push(HX_("fileName",e7,5a,43,62));
	outFields->push(HX_("lineNumber",dd,81,22,76));
	outFields->push(HX_("variables",b7,e2,62,82));
	outFields->push(HX_("publicVariables",ce,64,fb,f3));
	outFields->push(HX_("hasScriptParent",0f,8c,7d,ec));
	outFields->push(HX_("scriptParent",95,61,0d,85));
	outFields->push(HX_("scriptParentType",ef,6e,68,70));
	outFields->push(HX_("scriptParentFields",ee,41,ed,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScriptRuntime_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(ScriptRuntime_obj,variablesDeclared),HX_("variablesDeclared",d1,06,15,3c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ScriptRuntime_obj,variablesValues),HX_("variablesValues",f9,bd,db,a8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ScriptRuntime_obj,variableNames),HX_("variableNames",ec,53,6d,3b)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ScriptRuntime_obj,variablesLookup),HX_("variablesLookup",91,5c,da,ba)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ScriptRuntime_obj,changes),HX_("changes",03,b1,cc,cc)},
	{::hx::fsInt,(int)offsetof(ScriptRuntime_obj,depth),HX_("depth",03,f1,29,d7)},
	{::hx::fsBool,(int)offsetof(ScriptRuntime_obj,inTry),HX_("inTry",56,82,08,be)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ScriptRuntime_obj,returnValue),HX_("returnValue",a1,4c,95,3e)},
	{::hx::fsString,(int)offsetof(ScriptRuntime_obj,fileName),HX_("fileName",e7,5a,43,62)},
	{::hx::fsInt,(int)offsetof(ScriptRuntime_obj,lineNumber),HX_("lineNumber",dd,81,22,76)},
	{::hx::fsObject /*  ::hscript::InterpLocalsImpl */ ,(int)offsetof(ScriptRuntime_obj,variables),HX_("variables",b7,e2,62,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ScriptRuntime_obj,publicVariables),HX_("publicVariables",ce,64,fb,f3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ScriptRuntime_obj,errorHandler),HX_("errorHandler",e2,94,05,f7)},
	{::hx::fsBool,(int)offsetof(ScriptRuntime_obj,hasScriptParent),HX_("hasScriptParent",0f,8c,7d,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ScriptRuntime_obj,scriptParent),HX_("scriptParent",95,61,0d,85)},
	{::hx::fsObject /*  ::hscript::_Interp::IScriptParentType */ ,(int)offsetof(ScriptRuntime_obj,scriptParentType),HX_("scriptParentType",ef,6e,68,70)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ScriptRuntime_obj,scriptParentFields),HX_("scriptParentFields",ee,41,ed,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScriptRuntime_obj_sStaticStorageInfo = 0;
#endif

static ::String ScriptRuntime_obj_sMemberFields[] = {
	HX_("variablesDeclared",d1,06,15,3c),
	HX_("variablesValues",f9,bd,db,a8),
	HX_("variableNames",ec,53,6d,3b),
	HX_("variablesLookup",91,5c,da,ba),
	HX_("changes",03,b1,cc,cc),
	HX_("depth",03,f1,29,d7),
	HX_("inTry",56,82,08,be),
	HX_("returnValue",a1,4c,95,3e),
	HX_("fileName",e7,5a,43,62),
	HX_("lineNumber",dd,81,22,76),
	HX_("variables",b7,e2,62,82),
	HX_("publicVariables",ce,64,fb,f3),
	HX_("errorHandler",e2,94,05,f7),
	HX_("hasScriptParent",0f,8c,7d,ec),
	HX_("scriptParent",95,61,0d,85),
	HX_("scriptParentType",ef,6e,68,70),
	HX_("scriptParentFields",ee,41,ed,d7),
	HX_("set_scriptParent",92,3b,ee,df),
	HX_("reset",cf,49,c8,e6),
	HX_("loadTables",6b,83,88,31),
	HX_("loadBaseVariables",60,a6,74,e6),
	HX_("declare",2a,4c,c6,e8),
	HX_("declareReferenced",03,b3,ed,10),
	HX_("assign",2f,46,06,4c),
	HX_("duplicate",8b,21,17,a1),
	HX_("store",e1,13,16,84),
	HX_("restore",4e,67,b0,6a),
	HX_("resolve",ec,12,60,67),
	HX_("resolveGlobal",6f,b1,c9,e3),
	HX_("isScriptParentField",9b,23,88,c7),
	HX_("getScriptParentField",6f,fd,35,f8),
	HX_("setScriptParentField",e3,b4,ed,c4),
	HX_("error",c8,cb,29,73),
	::String(null()) };

::hx::Class ScriptRuntime_obj::__mClass;

void ScriptRuntime_obj::__register()
{
	ScriptRuntime_obj _hx_dummy;
	ScriptRuntime_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.ScriptRuntime",b2,d0,d5,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScriptRuntime_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScriptRuntime_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScriptRuntime_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScriptRuntime_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
