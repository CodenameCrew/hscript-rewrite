// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_hscript_Argument
#include <hscript/Argument.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ExprDef
#include <hscript/ExprDef.h>
#endif
#ifndef INCLUDED_hscript_LConst
#include <hscript/LConst.h>
#endif
#ifndef INCLUDED_hscript_ObjectField
#include <hscript/ObjectField.h>
#endif
#ifndef INCLUDED_hscript_SwitchCase
#include <hscript/SwitchCase.h>
#endif
#ifndef INCLUDED_hscript_anaylzers_ConstEval
#include <hscript/anaylzers/ConstEval.h>
#endif

namespace hscript{
namespace anaylzers{

void ConstEval_obj::__construct() { }

Dynamic ConstEval_obj::__CreateEmpty() { return new ConstEval_obj; }

void *ConstEval_obj::_hx_vtable = 0;

Dynamic ConstEval_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ConstEval_obj > _hx_result = new ConstEval_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ConstEval_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f6d36af;
}

 ::hscript::Expr ConstEval_obj::eval( ::hscript::Expr expr,::Array< ::String > vars){
            	HX_JUST_GC_STACKFRAME
	 ::hscript::ExprDef _g = expr->expr;
	 ::hscript::ExprDef _hx_tmp;
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)1: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)2: {
			 ::hscript::Expr _g1 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp1;
			if (::hx::IsNotNull( _g1 )) {
				_hx_tmp1 = ::hscript::anaylzers::ConstEval_obj::eval(_g1,vars);
			}
			else {
				_hx_tmp1 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EVar(_g->_hx_getInt(0),_hx_tmp1,_g->_hx_getObject(2),_g->_hx_getObject(3));
		}
		break;
		case (int)3: {
			_hx_tmp = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars)->expr;
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g2 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g3 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g4 = 0;
				while((_g4 < _g2->length)){
					 ::hscript::Expr expr1 = _g2->__get(_g4).StaticCast<  ::hscript::Expr >();
					_g4 = (_g4 + 1);
					_g3->push(::hscript::anaylzers::ConstEval_obj::eval(expr1,vars));
				}
			}
			::Array< ::Dynamic> _g5 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g6 = 0;
				while((_g6 < _g3->length)){
					 ::hscript::Expr v = _g3->__get(_g6).StaticCast<  ::hscript::Expr >();
					_g6 = (_g6 + 1);
					if (::hx::IsNotNull( v )) {
						_g5->push(v);
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EBlock(_g5);
		}
		break;
		case (int)5: {
			::String _g7 = _g->_hx_getString(1);
			 ::Dynamic _g8 = _g->_hx_getObject(2);
			 ::hscript::Expr optimizedExpr = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			vars->indexOf(HX_("Math",e8,6d,2f,33),null());
			{
				 ::hscript::ExprDef _g9 = optimizedExpr->expr;
				switch((int)(_g9->_hx_getIndex())){
					case (int)0: {
						 ::hscript::LConst _g10 = _g9->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
						if ((_g10->_hx_getIndex() == 2)) {
							::String _g11 = _g10->_hx_getString(0);
							::String _hx_switch_0 = _g7;
							if (  (_hx_switch_0==HX_("code",2d,b1,c4,41)) ){
								if ((_g11.length == 1)) {
									 ::hscript::ExprDef _hx_tmp2 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(_g11.charCodeAt(0)));
									return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp2,optimizedExpr->line);
								}
								goto _hx_goto_2;
							}
							if (  (_hx_switch_0==HX_("length",e6,94,07,9f)) ){
								return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(_g11.length)),optimizedExpr->line);
								goto _hx_goto_2;
							}
							/* default */{
							}
							_hx_goto_2:;
						}
					}
					break;
					case (int)1: {
						if ((_g9->_hx_getInt(0) != -1)) {
							::String _hx_switch_1 = _g7;
							if (  (_hx_switch_1==HX_("NEGATIVE_INFINITY",32,f1,1e,93)) ){
								return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::NEGATIVE_INFINITY)),optimizedExpr->line);
								goto _hx_goto_3;
							}
							if (  (_hx_switch_1==HX_("NaN",9b,84,3b,00)) ){
								return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::NaN)),optimizedExpr->line);
								goto _hx_goto_3;
							}
							if (  (_hx_switch_1==HX_("PI",f9,45,00,00)) ){
								return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::PI)),optimizedExpr->line);
								goto _hx_goto_3;
							}
							if (  (_hx_switch_1==HX_("POSITIVE_INFINITY",6e,48,1e,72)) ){
								return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::POSITIVE_INFINITY)),optimizedExpr->line);
								goto _hx_goto_3;
							}
							_hx_goto_3:;
						}
					}
					break;
					default:{
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EField(optimizedExpr,_g7,_g8);
		}
		break;
		case (int)6: {
			unsigned char _g12 = ( (unsigned char)(_g->_hx_getInt(0)) );
			 ::hscript::Expr _g13 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr leftOptimized = ::hscript::anaylzers::ConstEval_obj::eval(_g13,vars);
			 ::hscript::Expr rightOptimized = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars);
			 ::hscript::LConst leftConst = ::hscript::anaylzers::ConstEval_obj::exprToConst(leftOptimized);
			 ::hscript::LConst rightConst = ::hscript::anaylzers::ConstEval_obj::exprToConst(rightOptimized);
			bool _hx_tmp3;
			bool _hx_tmp4;
			bool _hx_tmp5;
			if (::hx::IsNotNull( leftConst )) {
				_hx_tmp5 = ::hx::IsNotNull( rightConst );
			}
			else {
				_hx_tmp5 = false;
			}
			if (_hx_tmp5) {
				 ::Dynamic _hx_tmp6;
				unsigned char _hx_switch_2 = _g12;
				if (  (_hx_switch_2==( (unsigned char)(24) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(25) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(26) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(27) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(28) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(29) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(30) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(31) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(32) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(33) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(34) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				if (  (_hx_switch_2==( (unsigned char)(35) )) ){
					_hx_tmp6 = true;
					goto _hx_goto_4;
				}
				/* default */{
					_hx_tmp6 = false;
				}
				_hx_goto_4:;
				_hx_tmp4 = !(( (bool)(_hx_tmp6) ));
			}
			else {
				_hx_tmp4 = false;
			}
			if (_hx_tmp4) {
				_hx_tmp3 = (_g12 != ( (unsigned char)(21) ));
			}
			else {
				_hx_tmp3 = false;
			}
			if (_hx_tmp3) {
				 ::Dynamic leftValue;
				switch((int)(leftConst->_hx_getIndex())){
					case (int)0: {
						leftValue = leftConst->_hx_getInt(0);
					}
					break;
					case (int)1: {
						leftValue = leftConst->_hx_getFloat(0);
					}
					break;
					case (int)2: {
						leftValue = leftConst->_hx_getString(0);
					}
					break;
					case (int)3: {
						leftValue = leftConst->_hx_getBool(0);
					}
					break;
					case (int)4: {
						leftValue = null();
					}
					break;
				}
				 ::Dynamic rightValue;
				switch((int)(rightConst->_hx_getIndex())){
					case (int)0: {
						rightValue = rightConst->_hx_getInt(0);
					}
					break;
					case (int)1: {
						rightValue = rightConst->_hx_getFloat(0);
					}
					break;
					case (int)2: {
						rightValue = rightConst->_hx_getString(0);
					}
					break;
					case (int)3: {
						rightValue = rightConst->_hx_getBool(0);
					}
					break;
					case (int)4: {
						rightValue = null();
					}
					break;
				}
				 ::Dynamic _hx_tmp7;
				unsigned char _hx_switch_3 = _g12;
				if (  (_hx_switch_3==( (unsigned char)(0) )) ){
					_hx_tmp7 = (leftValue + rightValue);
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(1) )) ){
					_hx_tmp7 = (( (Float)(leftValue) ) - ( (Float)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(2) )) ){
					_hx_tmp7 = (( (Float)(leftValue) ) * ( (Float)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(3) )) ){
					_hx_tmp7 = (( (Float)(leftValue) ) / ( (Float)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(4) )) ){
					_hx_tmp7 = ::hx::Mod(leftValue,rightValue);
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(5) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) & ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(6) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) | ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(7) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) ^ ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(8) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) << ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(9) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) >> ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(10) )) ){
					_hx_tmp7 = ::hx::UShr(( (int)(leftValue) ),( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(11) )) ){
					_hx_tmp7 = ::hx::IsEq( leftValue,rightValue );
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(12) )) ){
					_hx_tmp7 = ::hx::IsNotEq( leftValue,rightValue );
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(13) )) ){
					_hx_tmp7 = ::hx::IsGreaterEq( leftValue,rightValue );
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(14) )) ){
					_hx_tmp7 = ::hx::IsLessEq( leftValue,rightValue );
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(15) )) ){
					_hx_tmp7 = ::hx::IsGreater( leftValue,rightValue );
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(16) )) ){
					_hx_tmp7 = ::hx::IsLess( leftValue,rightValue );
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(17) )) ){
					if (!(( (bool)(leftValue) ))) {
						_hx_tmp7 = rightValue;
					}
					else {
						_hx_tmp7 = true;
					}
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(18) )) ){
					if (( (bool)(leftValue) )) {
						_hx_tmp7 = rightValue;
					}
					else {
						_hx_tmp7 = false;
					}
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(19) )) ){
					_hx_tmp7 = ::Std_obj::isOfType(leftValue,rightValue);
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(20) )) ){
					 ::Dynamic tmp = leftValue;
					if (::hx::IsNotNull( tmp )) {
						_hx_tmp7 = tmp;
					}
					else {
						_hx_tmp7 = rightValue;
					}
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(21) )) ){
					_hx_tmp7 =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(leftValue) ),( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(22) )) ||  (_hx_switch_3==( (unsigned char)(23) )) ){
					_hx_tmp7 = null();
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(24) )) ){
					_hx_tmp7 = (leftValue + rightValue);
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(25) )) ){
					_hx_tmp7 = (( (Float)(leftValue) ) - ( (Float)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(26) )) ){
					_hx_tmp7 = (( (Float)(leftValue) ) * ( (Float)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(27) )) ){
					_hx_tmp7 = (( (Float)(leftValue) ) / ( (Float)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(28) )) ){
					_hx_tmp7 = ::hx::Mod(leftValue,rightValue);
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(29) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) << ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(30) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) >> ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(31) )) ){
					_hx_tmp7 = ::hx::UShr(( (int)(leftValue) ),( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(32) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) | ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(33) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) & ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(34) )) ){
					_hx_tmp7 = (( (int)(leftValue) ) ^ ( (int)(rightValue) ));
					goto _hx_goto_5;
				}
				if (  (_hx_switch_3==( (unsigned char)(35) )) ){
					 ::Dynamic tmp1 = leftValue;
					if (::hx::IsNotNull( tmp1 )) {
						_hx_tmp7 = tmp1;
					}
					else {
						_hx_tmp7 = rightValue;
					}
					goto _hx_goto_5;
				}
				_hx_goto_5:;
				 ::hscript::ExprDef _hx_tmp8 = ::hscript::ExprDef_obj::EConst(::hscript::anaylzers::ConstEval_obj::dynamicToConst(_hx_tmp7));
				return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp8,_g13->line);
			}
			_hx_tmp = ::hscript::ExprDef_obj::EBinop(_g12,leftOptimized,rightOptimized);
		}
		break;
		case (int)7: {
			unsigned char _g14 = ( (unsigned char)(_g->_hx_getInt(0)) );
			bool _g15 = _g->_hx_getBool(1);
			 ::hscript::Expr _g16 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr optimizedExpr1 = ::hscript::anaylzers::ConstEval_obj::eval(_g16,vars);
			 ::hscript::LConst exprConst = ::hscript::anaylzers::ConstEval_obj::exprToConst(optimizedExpr1);
			bool _hx_tmp9;
			if (::hx::IsNotNull( exprConst )) {
				_hx_tmp9 = _g15;
			}
			else {
				_hx_tmp9 = false;
			}
			if (_hx_tmp9) {
				unsigned char _hx_switch_4 = _g14;
				if (  (_hx_switch_4==( (unsigned char)(0) )) ){
					 ::Dynamic _hx_tmp10;
					switch((int)(exprConst->_hx_getIndex())){
						case (int)0: {
							_hx_tmp10 = exprConst->_hx_getInt(0);
						}
						break;
						case (int)1: {
							_hx_tmp10 = exprConst->_hx_getFloat(0);
						}
						break;
						case (int)2: {
							_hx_tmp10 = exprConst->_hx_getString(0);
						}
						break;
						case (int)3: {
							_hx_tmp10 = exprConst->_hx_getBool(0);
						}
						break;
						case (int)4: {
							_hx_tmp10 = null();
						}
						break;
					}
					 ::hscript::ExprDef _hx_tmp11 = ::hscript::ExprDef_obj::EConst(::hscript::anaylzers::ConstEval_obj::dynamicToConst(~(( (int)(_hx_tmp10) ))));
					return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp11,optimizedExpr1->line);
					goto _hx_goto_6;
				}
				if (  (_hx_switch_4==( (unsigned char)(1) )) ){
					 ::Dynamic _hx_tmp12;
					switch((int)(exprConst->_hx_getIndex())){
						case (int)0: {
							_hx_tmp12 = exprConst->_hx_getInt(0);
						}
						break;
						case (int)1: {
							_hx_tmp12 = exprConst->_hx_getFloat(0);
						}
						break;
						case (int)2: {
							_hx_tmp12 = exprConst->_hx_getString(0);
						}
						break;
						case (int)3: {
							_hx_tmp12 = exprConst->_hx_getBool(0);
						}
						break;
						case (int)4: {
							_hx_tmp12 = null();
						}
						break;
					}
					 ::hscript::ExprDef _hx_tmp13 = ::hscript::ExprDef_obj::EConst(::hscript::anaylzers::ConstEval_obj::dynamicToConst(!(( (bool)(_hx_tmp12) ))));
					return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp13,optimizedExpr1->line);
					goto _hx_goto_6;
				}
				if (  (_hx_switch_4==( (unsigned char)(2) )) ){
					 ::Dynamic _hx_tmp14;
					switch((int)(exprConst->_hx_getIndex())){
						case (int)0: {
							_hx_tmp14 = exprConst->_hx_getInt(0);
						}
						break;
						case (int)1: {
							_hx_tmp14 = exprConst->_hx_getFloat(0);
						}
						break;
						case (int)2: {
							_hx_tmp14 = exprConst->_hx_getString(0);
						}
						break;
						case (int)3: {
							_hx_tmp14 = exprConst->_hx_getBool(0);
						}
						break;
						case (int)4: {
							_hx_tmp14 = null();
						}
						break;
					}
					 ::hscript::ExprDef _hx_tmp15 = ::hscript::ExprDef_obj::EConst(::hscript::anaylzers::ConstEval_obj::dynamicToConst(-(_hx_tmp14)));
					return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp15,optimizedExpr1->line);
					goto _hx_goto_6;
				}
				/* default */{
				}
				_hx_goto_6:;
			}
			_hx_tmp = ::hscript::ExprDef_obj::EUnop(_g14,_g15,_g16);
		}
		break;
		case (int)8: {
			::Array< ::Dynamic> _g17 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr optimizedFunc = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			::Array< ::Dynamic> _g18 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g19 = 0;
				while((_g19 < _g17->length)){
					 ::hscript::Expr arg = _g17->__get(_g19).StaticCast<  ::hscript::Expr >();
					_g19 = (_g19 + 1);
					_g18->push(::hscript::anaylzers::ConstEval_obj::eval(arg,vars));
				}
			}
			vars->indexOf(HX_("Math",e8,6d,2f,33),null());
			{
				 ::hscript::ExprDef _g20 = optimizedFunc->expr;
				if ((_g20->_hx_getIndex() == 5)) {
					::String _g21 = _g20->_hx_getString(1);
					{
						 ::hscript::ExprDef _hx_tmp16 = _g20->_hx_getObject(0).StaticCast<  ::hscript::Expr >()->expr;
						switch((int)(_hx_tmp16->_hx_getIndex())){
							case (int)0: {
								 ::hscript::LConst _g22 = _hx_tmp16->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
								if ((_g22->_hx_getIndex() == 2)) {
									::String _g23 = _g22->_hx_getString(0);
									{
										::Array< ::Dynamic> _g24 = ::Array_obj< ::Dynamic>::__new(0);
										{
											int _g25 = 0;
											while((_g25 < _g18->length)){
												 ::hscript::Expr expr2 = _g18->__get(_g25).StaticCast<  ::hscript::Expr >();
												_g25 = (_g25 + 1);
												_g24->push(::hscript::anaylzers::ConstEval_obj::exprToConst(expr2));
											}
										}
										switch((int)(_g24->length)){
											case (int)0: {
												::String _hx_switch_5 = _g21;
												if (  (_hx_switch_5==HX_("toLowerCase",56,4c,64,b8)) ){
													 ::hscript::ExprDef _hx_tmp17 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(_g23.toLowerCase()));
													return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp17,optimizedFunc->line);
													goto _hx_goto_9;
												}
												if (  (_hx_switch_5==HX_("toString",ac,d0,6e,38)) ){
													 ::hscript::ExprDef _hx_tmp18 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(_g23.toString()));
													return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp18,optimizedFunc->line);
													goto _hx_goto_9;
												}
												if (  (_hx_switch_5==HX_("toUpperCase",37,30,fd,38)) ){
													 ::hscript::ExprDef _hx_tmp19 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(_g23.toUpperCase()));
													return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp19,optimizedFunc->line);
													goto _hx_goto_9;
												}
												_hx_goto_9:;
											}
											break;
											case (int)1: {
												 ::hscript::LConst _g26 = _g24->__get(0).StaticCast<  ::hscript::LConst >();
												switch((int)(_g26->_hx_getIndex())){
													case (int)0: {
														int _g27 = _g26->_hx_getInt(0);
														::String _hx_switch_6 = _g21;
														if (  (_hx_switch_6==HX_("charAt",69,79,75,b7)) ){
															 ::hscript::ExprDef _hx_tmp20 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(_g23.charAt(_g27)));
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp20,optimizedFunc->line);
															goto _hx_goto_10;
														}
														if (  (_hx_switch_6==HX_("charCodeAt",f6,e6,54,35)) ){
															 ::Dynamic ret = _g23.charCodeAt(_g27);
															if (::hx::IsNull( ret )) {
																return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCNull_dyn()),optimizedFunc->line);
															}
															goto _hx_goto_10;
														}
														/* default */{
														}
														_hx_goto_10:;
													}
													break;
													case (int)2: {
														if ((_g21 == HX_("split",da,ea,6e,81))) {
															::Array< ::Dynamic> _g28 = ::Array_obj< ::Dynamic>::__new(0);
															{
																int _g29 = 0;
																::Array< ::String > _g30 = _g23.split(_g26->_hx_getString(0));
																while((_g29 < _g30->length)){
																	::String s = _g30->__get(_g29);
																	_g29 = (_g29 + 1);
																	_g28->push( ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(s)),optimizedFunc->line));
																}
															}
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EArrayDecl(_g28),optimizedFunc->line);
														}
													}
													break;
													default:{
													}
												}
											}
											break;
											case (int)2: {
												 ::hscript::LConst _g31 = _g24->__get(0).StaticCast<  ::hscript::LConst >();
												 ::hscript::LConst _g32 = _g24->__get(1).StaticCast<  ::hscript::LConst >();
												switch((int)(_g31->_hx_getIndex())){
													case (int)0: {
														int _g33 = _g31->_hx_getInt(0);
														if ((_g32->_hx_getIndex() == 0)) {
															int _g34 = _g32->_hx_getInt(0);
															::String _hx_switch_7 = _g21;
															if (  (_hx_switch_7==HX_("substr",31,ef,0a,9a)) ){
																 ::hscript::ExprDef _hx_tmp21 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(_g23.substr(_g33,_g34)));
																return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp21,optimizedFunc->line);
																goto _hx_goto_12;
															}
															if (  (_hx_switch_7==HX_("substring",51,f2,e7,e2)) ){
																 ::hscript::ExprDef _hx_tmp22 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCString(_g23.substring(_g33,_g34)));
																return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp22,optimizedFunc->line);
																goto _hx_goto_12;
															}
															_hx_goto_12:;
														}
													}
													break;
													case (int)2: {
														::String _g35 = _g31->_hx_getString(0);
														if (::hx::IsNull( _g32 )) {
															::String _hx_switch_8 = _g21;
															if (  (_hx_switch_8==HX_("indexOf",c9,48,bf,e0)) ){
																 ::hscript::ExprDef _hx_tmp23 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(_g23.indexOf(_g35,null())));
																return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp23,optimizedFunc->line);
																goto _hx_goto_13;
															}
															if (  (_hx_switch_8==HX_("lastIndexOf",13,fd,6a,95)) ){
																 ::hscript::ExprDef _hx_tmp24 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(_g23.lastIndexOf(_g35,null())));
																return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp24,optimizedFunc->line);
																goto _hx_goto_13;
															}
															_hx_goto_13:;
														}
														else {
															if ((_g32->_hx_getIndex() == 0)) {
																int _g36 = _g32->_hx_getInt(0);
																::String _hx_switch_9 = _g21;
																if (  (_hx_switch_9==HX_("indexOf",c9,48,bf,e0)) ){
																	 ::hscript::ExprDef _hx_tmp25 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(_g23.indexOf(_g35,_g36)));
																	return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp25,optimizedFunc->line);
																	goto _hx_goto_14;
																}
																if (  (_hx_switch_9==HX_("lastIndexOf",13,fd,6a,95)) ){
																	 ::hscript::ExprDef _hx_tmp26 = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(_g23.lastIndexOf(_g35,_g36)));
																	return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp26,optimizedFunc->line);
																	goto _hx_goto_14;
																}
																_hx_goto_14:;
															}
														}
													}
													break;
													default:{
													}
												}
											}
											break;
											default:{
											}
										}
									}
								}
							}
							break;
							case (int)1: {
								::String field = _g21;
								if ((_hx_tmp16->_hx_getInt(0) != -1)) {
									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,field, ::hscript::Expr,optimizedFunc) HXARGC(2)
									 ::hscript::Expr _hx_run( ::Dynamic v1, ::Dynamic v2){
										HX_JUST_GC_STACKFRAME
										::String _hx_switch_10 = field;
										if (  (_hx_switch_10==HX_("atan2",92,ff,d4,26)) ){
											return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::atan2(( (Float)(v1) ),( (Float)(v2) )))),optimizedFunc->line);
											goto _hx_goto_16;
										}
										if (  (_hx_switch_10==HX_("max",a4,0a,53,00)) ){
											return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::max(( (Float)(v1) ),( (Float)(v2) )))),optimizedFunc->line);
											goto _hx_goto_16;
										}
										if (  (_hx_switch_10==HX_("min",92,11,53,00)) ){
											return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::min(( (Float)(v1) ),( (Float)(v2) )))),optimizedFunc->line);
											goto _hx_goto_16;
										}
										if (  (_hx_switch_10==HX_("pow",98,5d,55,00)) ){
											return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::pow(( (Float)(v1) ),( (Float)(v2) )))),optimizedFunc->line);
											goto _hx_goto_16;
										}
										_hx_goto_16:;
										return null();
									}
									HX_END_LOCAL_FUNC2(return)

									::Array< ::Dynamic> _g37 = ::Array_obj< ::Dynamic>::__new(0);
									{
										int _g38 = 0;
										while((_g38 < _g18->length)){
											 ::hscript::Expr expr3 = _g18->__get(_g38).StaticCast<  ::hscript::Expr >();
											_g38 = (_g38 + 1);
											_g37->push(::hscript::anaylzers::ConstEval_obj::exprToConst(expr3));
										}
									}
									 ::Dynamic twoArgMathEval =  ::Dynamic(new _hx_Closure_0(field,optimizedFunc));
									switch((int)(_g37->length)){
										case (int)1: {
											 ::hscript::LConst _g39 = _g37->__get(0).StaticCast<  ::hscript::LConst >();
											if (::hx::IsNotNull( _g39 )) {
												switch((int)(_g39->_hx_getIndex())){
													case (int)0: {
														int _g40 = _g39->_hx_getInt(0);
														::String _hx_switch_11 = field;
														if (  (_hx_switch_11==HX_("abs",72,f0,49,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::abs(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("acos",86,32,69,40)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::acos(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("asin",57,51,75,40)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::asin(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("atan",a0,0c,76,40)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::atan(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("cos",47,80,4b,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::cos(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("exp",9d,0c,4d,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::exp(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("isFinite",b9,dc,e8,de)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCBool(::Math_obj::isFinite(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("isNaN",f1,f6,51,c1)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCBool(::Math_obj::isNaN(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("log",84,54,52,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::log(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("sin",18,9f,57,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::sin(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("sqrt",e0,ab,59,4c)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::sqrt(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														if (  (_hx_switch_11==HX_("tan",61,5a,58,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::tan(( (Float)(_g40) )))),optimizedFunc->line);
															goto _hx_goto_17;
														}
														_hx_goto_17:;
													}
													break;
													case (int)1: {
														Float _g41 = _g39->_hx_getFloat(0);
														::String _hx_switch_12 = field;
														if (  (_hx_switch_12==HX_("abs",72,f0,49,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::abs(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("acos",86,32,69,40)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::acos(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("asin",57,51,75,40)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::asin(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("atan",a0,0c,76,40)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::atan(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("ceil",05,1f,bd,41)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::ceil(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("cos",47,80,4b,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::cos(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("exp",9d,0c,4d,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::exp(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("fceil",6b,4a,9c,fc)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::fceil(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("ffloor",a6,9f,fd,ca)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::ffloor(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("floor",cc,d1,96,02)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::floor(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("fround",28,c6,cc,b5)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::fround(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("isFinite",b9,dc,e8,de)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCBool(::Math_obj::isFinite(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("isNaN",f1,f6,51,c1)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCBool(::Math_obj::isNaN(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("log",84,54,52,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::log(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("round",4e,f8,65,ed)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::round(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("sin",18,9f,57,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::sin(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("sqrt",e0,ab,59,4c)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::sqrt(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														if (  (_hx_switch_12==HX_("tan",61,5a,58,00)) ){
															return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(::Math_obj::tan(_g41))),optimizedFunc->line);
															goto _hx_goto_18;
														}
														_hx_goto_18:;
													}
													break;
													default:{
													}
												}
											}
										}
										break;
										case (int)2: {
											 ::hscript::LConst _g42 = _g37->__get(0).StaticCast<  ::hscript::LConst >();
											 ::hscript::LConst _g43 = _g37->__get(1).StaticCast<  ::hscript::LConst >();
											if (::hx::IsNotNull( _g42 )) {
												switch((int)(_g42->_hx_getIndex())){
													case (int)0: {
														int _g44 = _g42->_hx_getInt(0);
														switch((int)(_g43->_hx_getIndex())){
															case (int)0: {
																 ::hscript::Expr evalExpr = ( ( ::hscript::Expr)(twoArgMathEval(_g44,_g43->_hx_getInt(0))) );
																if (::hx::IsNotNull( evalExpr )) {
																	return evalExpr;
																}
															}
															break;
															case (int)1: {
																 ::hscript::Expr evalExpr1 = ( ( ::hscript::Expr)(twoArgMathEval(_g44,_g43->_hx_getFloat(0))) );
																if (::hx::IsNotNull( evalExpr1 )) {
																	return evalExpr1;
																}
															}
															break;
															default:{
															}
														}
													}
													break;
													case (int)1: {
														Float _g45 = _g42->_hx_getFloat(0);
														switch((int)(_g43->_hx_getIndex())){
															case (int)0: {
																 ::hscript::Expr evalExpr2 = ( ( ::hscript::Expr)(twoArgMathEval(_g45,_g43->_hx_getInt(0))) );
																if (::hx::IsNotNull( evalExpr2 )) {
																	return evalExpr2;
																}
															}
															break;
															case (int)1: {
																 ::hscript::Expr evalExpr3 = ( ( ::hscript::Expr)(twoArgMathEval(_g45,_g43->_hx_getFloat(0))) );
																if (::hx::IsNotNull( evalExpr3 )) {
																	return evalExpr3;
																}
															}
															break;
															default:{
															}
														}
													}
													break;
													default:{
													}
												}
											}
										}
										break;
										default:{
										}
									}
								}
							}
							break;
							default:{
							}
						}
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::ECall(optimizedFunc,_g18);
		}
		break;
		case (int)9: {
			 ::hscript::Expr _g46 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g47 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr optimizedCond = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			 ::hscript::LConst condConst = ::hscript::anaylzers::ConstEval_obj::exprToConst(optimizedCond);
			if (::hx::IsNotNull( condConst )) {
				if ((condConst->_hx_getIndex() == 3)) {
					if ((condConst->_hx_getBool(0) == true)) {
						 ::hscript::Expr body = ::hscript::anaylzers::ConstEval_obj::eval(_g46,vars);
						 ::hscript::ExprDef _g48 = body->expr;
						if ((_g48->_hx_getIndex() == 4)) {
							::Array< ::Dynamic> _g49 = _g48->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
							if ((_g49->length == 1)) {
								return _g49->__get(0).StaticCast<  ::hscript::Expr >();
							}
							else {
								return body;
							}
						}
						else {
							return body;
						}
					}
					else {
						 ::hscript::Expr elseBody;
						if (::hx::IsNotNull( _g47 )) {
							elseBody = ::hscript::anaylzers::ConstEval_obj::eval(_g47,vars);
						}
						else {
							elseBody = null();
						}
						if (::hx::IsNull( elseBody )) {
							return null();
						}
						else {
							 ::hscript::ExprDef _g50 = elseBody->expr;
							if ((_g50->_hx_getIndex() == 4)) {
								::Array< ::Dynamic> _g51 = _g50->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
								if ((_g51->length == 1)) {
									return _g51->__get(0).StaticCast<  ::hscript::Expr >();
								}
								else {
									return elseBody;
								}
							}
							else {
								return elseBody;
							}
						}
					}
				}
				else {
					 ::hscript::Expr elseBody1;
					if (::hx::IsNotNull( _g47 )) {
						elseBody1 = ::hscript::anaylzers::ConstEval_obj::eval(_g47,vars);
					}
					else {
						elseBody1 = null();
					}
					if (::hx::IsNull( elseBody1 )) {
						return null();
					}
					else {
						 ::hscript::ExprDef _g52 = elseBody1->expr;
						if ((_g52->_hx_getIndex() == 4)) {
							::Array< ::Dynamic> _g53 = _g52->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
							if ((_g53->length == 1)) {
								return _g53->__get(0).StaticCast<  ::hscript::Expr >();
							}
							else {
								return elseBody1;
							}
						}
						else {
							return elseBody1;
						}
					}
				}
			}
			 ::hscript::Expr _hx_tmp27 = ::hscript::anaylzers::ConstEval_obj::eval(_g46,vars);
			 ::hscript::Expr _hx_tmp28;
			if (::hx::IsNotNull( _g47 )) {
				_hx_tmp28 = ::hscript::anaylzers::ConstEval_obj::eval(_g47,vars);
			}
			else {
				_hx_tmp28 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EIf(optimizedCond,_hx_tmp27,_hx_tmp28);
		}
		break;
		case (int)10: {
			 ::hscript::Expr _hx_tmp29 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EWhile(_hx_tmp29,::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)11: {
			 ::hscript::Expr _hx_tmp30 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EFor(_g->_hx_getInt(0),_hx_tmp30,::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)12: {
			 ::hscript::Expr _hx_tmp31 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EForKeyValue(_g->_hx_getInt(0),_g->_hx_getInt(1),_hx_tmp31,::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)13: case (int)14: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)15: {
			::Array< ::Dynamic> _g54 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g55 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			int _g56 = _g->_hx_getInt(2);
			bool _g57 = _g->_hx_getBool(3);
			bool _g58 = _g->_hx_getBool(4);
			::Array< ::Dynamic> _g59 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g60 = 0;
				while((_g60 < _g54->length)){
					 ::hscript::Argument arg1 = _g54->__get(_g60).StaticCast<  ::hscript::Argument >();
					_g60 = (_g60 + 1);
					if (::hx::IsNotNull( arg1->value )) {
						int arg2 = arg1->name;
						bool arg3 = arg1->opt;
						_g59->push( ::hscript::Argument_obj::__alloc( HX_CTX ,arg2,arg3,::hscript::anaylzers::ConstEval_obj::eval(arg1->value,vars)));
					}
					else {
						_g59->push(arg1);
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EFunction(_g59,::hscript::anaylzers::ConstEval_obj::eval(_g55,vars),_g56,_g57,_g58);
		}
		break;
		case (int)16: {
			 ::hscript::Expr _g61 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp32;
			if (::hx::IsNotNull( _g61 )) {
				_hx_tmp32 = ::hscript::anaylzers::ConstEval_obj::eval(_g61,vars);
			}
			else {
				_hx_tmp32 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EReturn(_hx_tmp32);
		}
		break;
		case (int)17: {
			 ::hscript::Expr _hx_tmp33 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EArray(_hx_tmp33,::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)18: {
			::Array< ::Dynamic> _g62 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g63 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g64 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g65 = 0;
				while((_g65 < _g62->length)){
					 ::hscript::Expr expr4 = _g62->__get(_g65).StaticCast<  ::hscript::Expr >();
					_g65 = (_g65 + 1);
					_g64->push(::hscript::anaylzers::ConstEval_obj::eval(expr4,vars));
				}
			}
			::Array< ::Dynamic> _g66 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g67 = 0;
				while((_g67 < _g63->length)){
					 ::hscript::Expr expr5 = _g63->__get(_g67).StaticCast<  ::hscript::Expr >();
					_g67 = (_g67 + 1);
					_g66->push(::hscript::anaylzers::ConstEval_obj::eval(expr5,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EMapDecl(_g64,_g66);
		}
		break;
		case (int)19: {
			::Array< ::Dynamic> _g68 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g69 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g70 = 0;
				while((_g70 < _g68->length)){
					 ::hscript::Expr expr6 = _g68->__get(_g70).StaticCast<  ::hscript::Expr >();
					_g70 = (_g70 + 1);
					_g69->push(::hscript::anaylzers::ConstEval_obj::eval(expr6,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EArrayDecl(_g69);
		}
		break;
		case (int)20: {
			int _g71 = _g->_hx_getInt(0);
			::Array< ::Dynamic> _g72 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			int mapIndexes = vars->indexOf(HX_("StringMap",2b,12,8c,69),null());
			int mapIndexes1 = vars->indexOf(HX_("IntMap",0d,a9,08,d3),null());
			int mapIndexes2 = vars->indexOf(HX_("EnumValueMap",ec,9b,fb,92),null());
			int mapIndexes3 = vars->indexOf(HX_("ObjectMap",fd,a4,50,e5),null());
			::Array< int > mapIndexes4 = ::Array_obj< int >::__new(5)->init(0,mapIndexes)->init(1,mapIndexes1)->init(2,mapIndexes2)->init(3,mapIndexes3)->init(4,vars->indexOf(HX_("Map",7c,c2,3a,00),null()));
			{
				int _g73 = 0;
				while((_g73 < mapIndexes4->length)){
					int mapIndex = mapIndexes4->__get(_g73);
					_g73 = (_g73 + 1);
					bool _hx_tmp34;
					if ((mapIndex != -1)) {
						_hx_tmp34 = (_g71 == mapIndex);
					}
					else {
						_hx_tmp34 = false;
					}
					if (_hx_tmp34) {
						return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EMapDecl(::Array_obj< ::Dynamic>::__new(0),::Array_obj< ::Dynamic>::__new(0)),expr->line);
					}
				}
			}
			::Array< ::Dynamic> _g74 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g75 = 0;
				while((_g75 < _g72->length)){
					 ::hscript::Expr expr7 = _g72->__get(_g75).StaticCast<  ::hscript::Expr >();
					_g75 = (_g75 + 1);
					_g74->push(::hscript::anaylzers::ConstEval_obj::eval(expr7,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::ENew(_g71,_g74);
		}
		break;
		case (int)21: {
			_hx_tmp = ::hscript::ExprDef_obj::EThrow(::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)22: {
			 ::hscript::Expr _hx_tmp35 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::ETry(_hx_tmp35,_g->_hx_getInt(1),::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)23: {
			::Array< ::Dynamic> _g76 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g77 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g78 = 0;
				while((_g78 < _g76->length)){
					 ::hscript::ObjectField field1 = _g76->__get(_g78).StaticCast<  ::hscript::ObjectField >();
					_g78 = (_g78 + 1);
					::String field2 = field1->name;
					_g77->push( ::hscript::ObjectField_obj::__alloc( HX_CTX ,field2,::hscript::anaylzers::ConstEval_obj::eval(field1->expr,vars)));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EObject(_g77);
		}
		break;
		case (int)24: {
			 ::hscript::Expr _g79 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g80 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr optimizedCond1 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			 ::hscript::LConst condConst1 = ::hscript::anaylzers::ConstEval_obj::exprToConst(optimizedCond1);
			if (::hx::IsNotNull( condConst1 )) {
				if ((condConst1->_hx_getIndex() == 3)) {
					if ((condConst1->_hx_getBool(0) == true)) {
						 ::hscript::Expr body1 = ::hscript::anaylzers::ConstEval_obj::eval(_g79,vars);
						 ::hscript::ExprDef _g81 = body1->expr;
						if ((_g81->_hx_getIndex() == 4)) {
							::Array< ::Dynamic> _g82 = _g81->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
							if ((_g82->length == 1)) {
								return _g82->__get(0).StaticCast<  ::hscript::Expr >();
							}
							else {
								return body1;
							}
						}
						else {
							return body1;
						}
					}
					else {
						 ::hscript::Expr elseBody2 = ::hscript::anaylzers::ConstEval_obj::eval(_g80,vars);
						if (::hx::IsNull( elseBody2 )) {
							return null();
						}
						else {
							 ::hscript::ExprDef _g83 = elseBody2->expr;
							if ((_g83->_hx_getIndex() == 4)) {
								::Array< ::Dynamic> _g84 = _g83->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
								if ((_g84->length == 1)) {
									return _g84->__get(0).StaticCast<  ::hscript::Expr >();
								}
								else {
									return elseBody2;
								}
							}
							else {
								return elseBody2;
							}
						}
					}
				}
				else {
					 ::hscript::Expr elseBody3 = ::hscript::anaylzers::ConstEval_obj::eval(_g80,vars);
					if (::hx::IsNull( elseBody3 )) {
						return null();
					}
					else {
						 ::hscript::ExprDef _g85 = elseBody3->expr;
						if ((_g85->_hx_getIndex() == 4)) {
							::Array< ::Dynamic> _g86 = _g85->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
							if ((_g86->length == 1)) {
								return _g86->__get(0).StaticCast<  ::hscript::Expr >();
							}
							else {
								return elseBody3;
							}
						}
						else {
							return elseBody3;
						}
					}
				}
			}
			 ::hscript::Expr _hx_tmp36 = ::hscript::anaylzers::ConstEval_obj::eval(_g79,vars);
			_hx_tmp = ::hscript::ExprDef_obj::ETernary(optimizedCond1,_hx_tmp36,::hscript::anaylzers::ConstEval_obj::eval(_g80,vars));
		}
		break;
		case (int)25: {
			::Array< ::Dynamic> _g87 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g88 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp37 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			::Array< ::Dynamic> _g89 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g90 = 0;
				while((_g90 < _g87->length)){
					 ::hscript::SwitchCase switchCase = _g87->__get(_g90).StaticCast<  ::hscript::SwitchCase >();
					_g90 = (_g90 + 1);
					::Array< ::Dynamic> _g91 = ::Array_obj< ::Dynamic>::__new(0);
					{
						int _g92 = 0;
						::Array< ::Dynamic> _g93 = switchCase->values;
						while((_g92 < _g93->length)){
							 ::hscript::Expr val = _g93->__get(_g92).StaticCast<  ::hscript::Expr >();
							_g92 = (_g92 + 1);
							_g91->push(::hscript::anaylzers::ConstEval_obj::eval(val,vars));
						}
					}
					_g89->push( ::hscript::SwitchCase_obj::__alloc( HX_CTX ,_g91,::hscript::anaylzers::ConstEval_obj::eval(switchCase->expr,vars)));
				}
			}
			 ::hscript::Expr _hx_tmp38;
			if (::hx::IsNotNull( _g88 )) {
				_hx_tmp38 = ::hscript::anaylzers::ConstEval_obj::eval(_g88,vars);
			}
			else {
				_hx_tmp38 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::ESwitch(_hx_tmp37,_g89,_hx_tmp38);
		}
		break;
		case (int)26: {
			 ::hscript::Expr _hx_tmp39 = ::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EDoWhile(_hx_tmp39,::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)27: {
			::String _g94 = _g->_hx_getString(0);
			::Array< ::Dynamic> _g95 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g96 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			::Array< ::Dynamic> _g97 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g98 = 0;
				while((_g98 < _g95->length)){
					 ::hscript::Expr arg4 = _g95->__get(_g98).StaticCast<  ::hscript::Expr >();
					_g98 = (_g98 + 1);
					_g97->push(::hscript::anaylzers::ConstEval_obj::eval(arg4,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EMeta(_g94,_g97,::hscript::anaylzers::ConstEval_obj::eval(_g96,vars));
		}
		break;
		case (int)28: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)29: {
			::Array< ::String > _g99 = _g->_hx_getObject(0).StaticCast< ::Array< ::String > >();
			_hx_tmp = ::hscript::ExprDef_obj::EInfo(_g99,::hscript::anaylzers::ConstEval_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),_g99));
		}
		break;
	}
	return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp,expr->line);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ConstEval_obj,eval,return )

 ::hscript::LConst ConstEval_obj::exprToConst( ::hscript::Expr expr){
	 ::hscript::ExprDef _g = expr->expr;
	if ((_g->_hx_getIndex() == 0)) {
		return _g->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
	}
	else {
		return null();
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ConstEval_obj,exprToConst,return )

 ::hscript::LConst ConstEval_obj::dynamicToConst( ::Dynamic value){
	 ::ValueType _g = ::Type_obj::_hx_typeof(value);
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			return ::hscript::LConst_obj::LCNull_dyn();
		}
		break;
		case (int)1: {
			return ::hscript::LConst_obj::LCInt(value);
		}
		break;
		case (int)2: {
			return ::hscript::LConst_obj::LCFloat(value);
		}
		break;
		case (int)3: {
			return ::hscript::LConst_obj::LCBool(value);
		}
		break;
		case (int)6: {
			if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ClassOf< ::String >() )) {
				return ::hscript::LConst_obj::LCString(value);
			}
			else {
				HX_STACK_DO_THROW((HX_("Unknown type of constant: ",83,cc,eb,66) + ::Std_obj::string(::Type_obj::_hx_typeof(value))));
			}
		}
		break;
		default:{
			HX_STACK_DO_THROW((HX_("Unknown type of constant: ",83,cc,eb,66) + ::Std_obj::string(::Type_obj::_hx_typeof(value))));
		}
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ConstEval_obj,dynamicToConst,return )

int ConstEval_obj::constToInt( ::hscript::LConst _hx_const){
	if ((_hx_const->_hx_getIndex() == 0)) {
		return _hx_const->_hx_getInt(0);
	}
	else {
		return 0;
	}
	return 0;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ConstEval_obj,constToInt,return )


ConstEval_obj::ConstEval_obj()
{
}

bool ConstEval_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"eval") ) { outValue = eval_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"constToInt") ) { outValue = constToInt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"exprToConst") ) { outValue = exprToConst_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dynamicToConst") ) { outValue = dynamicToConst_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ConstEval_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ConstEval_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ConstEval_obj::__mClass;

static ::String ConstEval_obj_sStaticFields[] = {
	HX_("eval",9c,6b,1c,43),
	HX_("exprToConst",33,b1,f0,a0),
	HX_("dynamicToConst",29,4c,a6,7f),
	HX_("constToInt",d1,4d,ef,1d),
	::String(null())
};

void ConstEval_obj::__register()
{
	ConstEval_obj _hx_dummy;
	ConstEval_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.anaylzers.ConstEval",29,0b,46,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ConstEval_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ConstEval_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ConstEval_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConstEval_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConstEval_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
} // end namespace anaylzers
