// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript_Argument
#include <hscript/Argument.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ExprDef
#include <hscript/ExprDef.h>
#endif
#ifndef INCLUDED_hscript_ObjectField
#include <hscript/ObjectField.h>
#endif
#ifndef INCLUDED_hscript_SwitchCase
#include <hscript/SwitchCase.h>
#endif
#ifndef INCLUDED_hscript_anaylzers_Inliner
#include <hscript/anaylzers/Inliner.h>
#endif

namespace hscript{
namespace anaylzers{

void Inliner_obj::__construct() { }

Dynamic Inliner_obj::__CreateEmpty() { return new Inliner_obj; }

void *Inliner_obj::_hx_vtable = 0;

Dynamic Inliner_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Inliner_obj > _hx_result = new Inliner_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Inliner_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a25fe59;
}

 ::hscript::Expr Inliner_obj::eval( ::hscript::Expr expr,::Array< ::String > vars){
            	HX_JUST_GC_STACKFRAME
	 ::hscript::ExprDef _g = expr->expr;
	 ::hscript::ExprDef _hx_tmp;
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)1: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)2: {
			 ::hscript::Expr _g1 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp1;
			if (::hx::IsNotNull( _g1 )) {
				_hx_tmp1 = ::hscript::anaylzers::Inliner_obj::eval(_g1,vars);
			}
			else {
				_hx_tmp1 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EVar(_g->_hx_getInt(0),_hx_tmp1,_g->_hx_getObject(2),_g->_hx_getObject(3));
		}
		break;
		case (int)3: {
			_hx_tmp = ::hscript::ExprDef_obj::EParent(::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g2 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g3 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g4 = 0;
				while((_g4 < _g2->length)){
					 ::hscript::Expr expr1 = _g2->__get(_g4).StaticCast<  ::hscript::Expr >();
					_g4 = (_g4 + 1);
					_g3->push(::hscript::anaylzers::Inliner_obj::eval(expr1,vars));
				}
			}
			::Array< ::Dynamic> _g5 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g6 = 0;
				while((_g6 < _g3->length)){
					 ::hscript::Expr v = _g3->__get(_g6).StaticCast<  ::hscript::Expr >();
					_g6 = (_g6 + 1);
					if (::hx::IsNotNull( v )) {
						_g5->push(v);
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EBlock(_g5);
		}
		break;
		case (int)5: {
			_hx_tmp = ::hscript::ExprDef_obj::EField(::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars),_g->_hx_getString(1),_g->_hx_getObject(2));
		}
		break;
		case (int)6: {
			 ::hscript::Expr _hx_tmp2 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EBinop(_g->_hx_getInt(0),_hx_tmp2,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)7: {
			_hx_tmp = ::hscript::ExprDef_obj::EUnop(_g->_hx_getInt(0),_g->_hx_getBool(1),::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)8: {
			::Array< ::Dynamic> _g7 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _hx_tmp3 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			::Array< ::Dynamic> _g8 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g9 = 0;
				while((_g9 < _g7->length)){
					 ::hscript::Expr expr2 = _g7->__get(_g9).StaticCast<  ::hscript::Expr >();
					_g9 = (_g9 + 1);
					_g8->push(::hscript::anaylzers::Inliner_obj::eval(expr2,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::ECall(_hx_tmp3,_g8);
		}
		break;
		case (int)9: {
			 ::hscript::Expr _g10 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp4 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			 ::hscript::Expr _hx_tmp5 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars);
			 ::hscript::Expr _hx_tmp6;
			if (::hx::IsNotNull( _g10 )) {
				_hx_tmp6 = ::hscript::anaylzers::Inliner_obj::eval(_g10,vars);
			}
			else {
				_hx_tmp6 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EIf(_hx_tmp4,_hx_tmp5,_hx_tmp6);
		}
		break;
		case (int)10: {
			 ::hscript::Expr _hx_tmp7 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EWhile(_hx_tmp7,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)11: {
			 ::hscript::Expr _hx_tmp8 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EFor(_g->_hx_getInt(0),_hx_tmp8,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)12: {
			 ::hscript::Expr _hx_tmp9 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EForKeyValue(_g->_hx_getInt(0),_g->_hx_getInt(1),_hx_tmp9,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)13: case (int)14: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)15: {
			::Array< ::Dynamic> _g11 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g12 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			int _g13 = _g->_hx_getInt(2);
			bool _g14 = _g->_hx_getBool(3);
			bool _g15 = _g->_hx_getBool(4);
			::Array< ::Dynamic> _g16 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g17 = 0;
				while((_g17 < _g11->length)){
					 ::hscript::Argument arg = _g11->__get(_g17).StaticCast<  ::hscript::Argument >();
					_g17 = (_g17 + 1);
					if (::hx::IsNotNull( arg->value )) {
						int arg1 = arg->name;
						bool arg2 = arg->opt;
						_g16->push( ::hscript::Argument_obj::__alloc( HX_CTX ,arg1,arg2,::hscript::anaylzers::Inliner_obj::eval(arg->value,vars)));
					}
					else {
						_g16->push(arg);
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EFunction(_g16,::hscript::anaylzers::Inliner_obj::eval(_g12,vars),_g13,_g14,_g15);
		}
		break;
		case (int)16: {
			 ::hscript::Expr _g18 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp10;
			if (::hx::IsNotNull( _g18 )) {
				_hx_tmp10 = ::hscript::anaylzers::Inliner_obj::eval(_g18,vars);
			}
			else {
				_hx_tmp10 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EReturn(_hx_tmp10);
		}
		break;
		case (int)17: {
			 ::hscript::Expr _hx_tmp11 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EArray(_hx_tmp11,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)18: {
			::Array< ::Dynamic> _g19 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g20 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g21 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g22 = 0;
				while((_g22 < _g19->length)){
					 ::hscript::Expr expr3 = _g19->__get(_g22).StaticCast<  ::hscript::Expr >();
					_g22 = (_g22 + 1);
					_g21->push(::hscript::anaylzers::Inliner_obj::eval(expr3,vars));
				}
			}
			::Array< ::Dynamic> _g23 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g24 = 0;
				while((_g24 < _g20->length)){
					 ::hscript::Expr expr4 = _g20->__get(_g24).StaticCast<  ::hscript::Expr >();
					_g24 = (_g24 + 1);
					_g23->push(::hscript::anaylzers::Inliner_obj::eval(expr4,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EMapDecl(_g21,_g23);
		}
		break;
		case (int)19: {
			::Array< ::Dynamic> _g25 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g26 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g27 = 0;
				while((_g27 < _g25->length)){
					 ::hscript::Expr expr5 = _g25->__get(_g27).StaticCast<  ::hscript::Expr >();
					_g27 = (_g27 + 1);
					_g26->push(::hscript::anaylzers::Inliner_obj::eval(expr5,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EArrayDecl(_g26);
		}
		break;
		case (int)20: {
			int _g28 = _g->_hx_getInt(0);
			::Array< ::Dynamic> _g29 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g30 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g31 = 0;
				while((_g31 < _g29->length)){
					 ::hscript::Expr expr6 = _g29->__get(_g31).StaticCast<  ::hscript::Expr >();
					_g31 = (_g31 + 1);
					_g30->push(::hscript::anaylzers::Inliner_obj::eval(expr6,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::ENew(_g28,_g30);
		}
		break;
		case (int)21: {
			_hx_tmp = ::hscript::ExprDef_obj::EThrow(::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)22: {
			 ::hscript::Expr _hx_tmp12 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::ETry(_hx_tmp12,_g->_hx_getInt(1),::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)23: {
			::Array< ::Dynamic> _g32 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g33 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g34 = 0;
				while((_g34 < _g32->length)){
					 ::hscript::ObjectField field = _g32->__get(_g34).StaticCast<  ::hscript::ObjectField >();
					_g34 = (_g34 + 1);
					::String field1 = field->name;
					_g33->push( ::hscript::ObjectField_obj::__alloc( HX_CTX ,field1,::hscript::anaylzers::Inliner_obj::eval(field->expr,vars)));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EObject(_g33);
		}
		break;
		case (int)24: {
			 ::hscript::Expr _hx_tmp13 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			 ::hscript::Expr _hx_tmp14 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::ETernary(_hx_tmp13,_hx_tmp14,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)25: {
			::Array< ::Dynamic> _g35 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g36 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp15 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			::Array< ::Dynamic> _g37 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g38 = 0;
				while((_g38 < _g35->length)){
					 ::hscript::SwitchCase switchCase = _g35->__get(_g38).StaticCast<  ::hscript::SwitchCase >();
					_g38 = (_g38 + 1);
					::Array< ::Dynamic> _g39 = ::Array_obj< ::Dynamic>::__new(0);
					{
						int _g40 = 0;
						::Array< ::Dynamic> _g41 = switchCase->values;
						while((_g40 < _g41->length)){
							 ::hscript::Expr val = _g41->__get(_g40).StaticCast<  ::hscript::Expr >();
							_g40 = (_g40 + 1);
							_g39->push(::hscript::anaylzers::Inliner_obj::eval(val,vars));
						}
					}
					_g37->push( ::hscript::SwitchCase_obj::__alloc( HX_CTX ,_g39,::hscript::anaylzers::Inliner_obj::eval(switchCase->expr,vars)));
				}
			}
			 ::hscript::Expr _hx_tmp16;
			if (::hx::IsNotNull( _g36 )) {
				_hx_tmp16 = ::hscript::anaylzers::Inliner_obj::eval(_g36,vars);
			}
			else {
				_hx_tmp16 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::ESwitch(_hx_tmp15,_g37,_hx_tmp16);
		}
		break;
		case (int)26: {
			 ::hscript::Expr _hx_tmp17 = ::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),vars);
			_hx_tmp = ::hscript::ExprDef_obj::EDoWhile(_hx_tmp17,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),vars));
		}
		break;
		case (int)27: {
			::String _g42 = _g->_hx_getString(0);
			::Array< ::Dynamic> _g43 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g44 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			::Array< ::Dynamic> _g45 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g46 = 0;
				while((_g46 < _g43->length)){
					 ::hscript::Expr arg3 = _g43->__get(_g46).StaticCast<  ::hscript::Expr >();
					_g46 = (_g46 + 1);
					_g45->push(::hscript::anaylzers::Inliner_obj::eval(arg3,vars));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EMeta(_g42,_g45,::hscript::anaylzers::Inliner_obj::eval(_g44,vars));
		}
		break;
		case (int)28: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)29: {
			::Array< ::String > _g47 = _g->_hx_getObject(0).StaticCast< ::Array< ::String > >();
			_hx_tmp = ::hscript::ExprDef_obj::EInfo(_g47,::hscript::anaylzers::Inliner_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),_g47));
		}
		break;
	}
	return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp,expr->line);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Inliner_obj,eval,return )


Inliner_obj::Inliner_obj()
{
}

bool Inliner_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"eval") ) { outValue = eval_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Inliner_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Inliner_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Inliner_obj::__mClass;

static ::String Inliner_obj_sStaticFields[] = {
	HX_("eval",9c,6b,1c,43),
	::String(null())
};

void Inliner_obj::__register()
{
	Inliner_obj _hx_dummy;
	Inliner_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.anaylzers.Inliner",03,ba,16,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Inliner_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Inliner_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Inliner_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inliner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inliner_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
} // end namespace anaylzers
