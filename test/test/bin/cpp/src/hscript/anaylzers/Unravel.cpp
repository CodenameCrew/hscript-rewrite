// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript_Argument
#include <hscript/Argument.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ExprDef
#include <hscript/ExprDef.h>
#endif
#ifndef INCLUDED_hscript_LConst
#include <hscript/LConst.h>
#endif
#ifndef INCLUDED_hscript_ObjectField
#include <hscript/ObjectField.h>
#endif
#ifndef INCLUDED_hscript_SwitchCase
#include <hscript/SwitchCase.h>
#endif
#ifndef INCLUDED_hscript_anaylzers_Unravel
#include <hscript/anaylzers/Unravel.h>
#endif
#ifndef INCLUDED_hscript_utils_ExprUtils
#include <hscript/utils/ExprUtils.h>
#endif

static const bool _hx_array_data_6b3c231f_15[] = {
	0,
};
namespace hscript{
namespace anaylzers{

void Unravel_obj::__construct() { }

Dynamic Unravel_obj::__CreateEmpty() { return new Unravel_obj; }

void *Unravel_obj::_hx_vtable = 0;

Dynamic Unravel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Unravel_obj > _hx_result = new Unravel_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Unravel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1cee79ad;
}

int Unravel_obj::SAFE_FOR_UNLOOP;

 ::hscript::Expr Unravel_obj::eval( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	 ::hscript::ExprDef _g = expr->expr;
	 ::hscript::ExprDef _hx_tmp;
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)1: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)2: {
			 ::hscript::Expr _g1 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp1;
			if (::hx::IsNotNull( _g1 )) {
				_hx_tmp1 = ::hscript::anaylzers::Unravel_obj::eval(_g1);
			}
			else {
				_hx_tmp1 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EVar(_g->_hx_getInt(0),_hx_tmp1,_g->_hx_getObject(2),_g->_hx_getObject(3));
		}
		break;
		case (int)3: {
			_hx_tmp = ::hscript::ExprDef_obj::EParent(::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g2 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			bool _hx_tmp2;
			if ((_g2->length == 1)) {
				_hx_tmp2 = ::hx::IsNotNull( _g2->__get(0).StaticCast<  ::hscript::Expr >() );
			}
			else {
				_hx_tmp2 = false;
			}
			if (_hx_tmp2) {
				return _g2->__get(0).StaticCast<  ::hscript::Expr >();
			}
			::Array< ::Dynamic> optimizedExprs = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g3 = 0;
				while((_g3 < _g2->length)){
					 ::hscript::Expr expr1 = _g2->__get(_g3).StaticCast<  ::hscript::Expr >();
					_g3 = (_g3 + 1);
					 ::hscript::Expr optimizedExpr = ::hscript::anaylzers::Unravel_obj::eval(expr1);
					optimizedExprs->push(optimizedExpr);
					{
						 ::hscript::ExprDef _g4 = optimizedExpr->expr;
						if ((_g4->_hx_getIndex() == 16)) {
							if (::hx::IsNull( _g4->_hx_getObject(0).StaticCast<  ::hscript::Expr >() )) {
								optimizedExprs->pop().StaticCast<  ::hscript::Expr >();
								goto _hx_goto_0;
							}
							else {
								goto _hx_goto_0;
							}
						}
					}
				}
				_hx_goto_0:;
			}
			::Array< ::Dynamic> unrolledExprs = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g5 = 0;
				while((_g5 < optimizedExprs->length)){
					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< bool >,declaresVariables) HXARGC(1)
					void _hx_run( ::hscript::Expr expr){
						 ::hscript::ExprDef _g = expr->expr;
						switch((int)(_g->_hx_getIndex())){
							case (int)2: {
								bool _hx_tmp;
								if (!(( (bool)(_g->_hx_getObject(2)) ))) {
									_hx_tmp = !(( (bool)(_g->_hx_getObject(3)) ));
								}
								else {
									_hx_tmp = false;
								}
								if (_hx_tmp) {
									declaresVariables[0] = true;
								}
							}
							break;
							case (int)15: {
								bool _hx_tmp1;
								if (!(_g->_hx_getBool(3))) {
									_hx_tmp1 = !(_g->_hx_getBool(4));
								}
								else {
									_hx_tmp1 = false;
								}
								if (_hx_tmp1) {
									declaresVariables[0] = true;
								}
							}
							break;
							case (int)28: {
								declaresVariables[0] = true;
							}
							break;
							default:{
							}
						}
					}
					HX_END_LOCAL_FUNC1((void))

					 ::hscript::Expr expr2 = optimizedExprs->__get(_g5).StaticCast<  ::hscript::Expr >();
					_g5 = (_g5 + 1);
					::Array< bool > declaresVariables = ::Array_obj< bool >::fromData( _hx_array_data_6b3c231f_15,1);
					::hscript::utils::ExprUtils_obj::iterate(expr2, ::Dynamic(new _hx_Closure_0(declaresVariables)));
					if (declaresVariables->__get(0)) {
						unrolledExprs->push(expr2);
					}
					else {
						 ::hscript::ExprDef _g6 = expr2->expr;
						if ((_g6->_hx_getIndex() == 4)) {
							::Array< ::Dynamic> _g7 = _g6->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
							{
								int _g8 = 0;
								while((_g8 < _g7->length)){
									 ::hscript::Expr expr3 = _g7->__get(_g8).StaticCast<  ::hscript::Expr >();
									_g8 = (_g8 + 1);
									unrolledExprs->push(expr3);
								}
							}
						}
						else {
							unrolledExprs->push(expr2);
						}
					}
				}
			}
			::Array< ::Dynamic> _g9 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g10 = 0;
				while((_g10 < unrolledExprs->length)){
					 ::hscript::Expr v = unrolledExprs->__get(_g10).StaticCast<  ::hscript::Expr >();
					_g10 = (_g10 + 1);
					if (::hx::IsNotNull( v )) {
						_g9->push(v);
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EBlock(_g9);
		}
		break;
		case (int)5: {
			_hx_tmp = ::hscript::ExprDef_obj::EField(::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()),_g->_hx_getString(1),_g->_hx_getObject(2));
		}
		break;
		case (int)6: {
			 ::hscript::Expr _hx_tmp3 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::EBinop(_g->_hx_getInt(0),_hx_tmp3,::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)7: {
			_hx_tmp = ::hscript::ExprDef_obj::EUnop(_g->_hx_getInt(0),_g->_hx_getBool(1),::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)8: {
			::Array< ::Dynamic> _g11 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _hx_tmp4 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			::Array< ::Dynamic> _g12 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g13 = 0;
				while((_g13 < _g11->length)){
					 ::hscript::Expr expr4 = _g11->__get(_g13).StaticCast<  ::hscript::Expr >();
					_g13 = (_g13 + 1);
					_g12->push(::hscript::anaylzers::Unravel_obj::eval(expr4));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::ECall(_hx_tmp4,_g12);
		}
		break;
		case (int)9: {
			 ::hscript::Expr _g14 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp5 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			 ::hscript::Expr _hx_tmp6 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			 ::hscript::Expr _hx_tmp7;
			if (::hx::IsNotNull( _g14 )) {
				_hx_tmp7 = ::hscript::anaylzers::Unravel_obj::eval(_g14);
			}
			else {
				_hx_tmp7 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EIf(_hx_tmp5,_hx_tmp6,_hx_tmp7);
		}
		break;
		case (int)10: {
			 ::hscript::Expr _hx_tmp8 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::EWhile(_hx_tmp8,::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)11: {
			int varName = _g->_hx_getInt(0);
			 ::hscript::Expr optimizedIterator = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			 ::hscript::Expr optimizedBody = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
			 ::hscript::ExprDef _g15 = optimizedIterator->expr;
			if ((_g15->_hx_getIndex() == 6)) {
				if ((_g15->_hx_getInt(0) == 21)) {
					 ::hscript::ExprDef _hx_tmp9 = _g15->_hx_getObject(1).StaticCast<  ::hscript::Expr >()->expr;
					if ((_hx_tmp9->_hx_getIndex() == 0)) {
						 ::hscript::LConst _g16 = _hx_tmp9->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
						if ((_g16->_hx_getIndex() == 0)) {
							int _g17 = _g16->_hx_getInt(0);
							 ::hscript::ExprDef _hx_tmp10 = _g15->_hx_getObject(2).StaticCast<  ::hscript::Expr >()->expr;
							if ((_hx_tmp10->_hx_getIndex() == 0)) {
								 ::hscript::LConst _g18 = _hx_tmp10->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
								if ((_g18->_hx_getIndex() == 0)) {
									int _g19 = _g18->_hx_getInt(0);
									bool _hx_tmp11;
									if ((_g19 > _g17)) {
										_hx_tmp11 = ((_g19 - _g17) <= ::hscript::anaylzers::Unravel_obj::SAFE_FOR_UNLOOP);
									}
									else {
										_hx_tmp11 = false;
									}
									if (_hx_tmp11) {
										::Array< ::Dynamic> unrolledLoops = ::Array_obj< ::Dynamic>::__new(0);
										{
											int _g20 = _g17;
											while((_g20 < _g19)){
												HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1,int,varName,int,i) HXARGC(1)
												 ::hscript::Expr _hx_run( ::hscript::Expr bodyExpr){
													HX_JUST_GC_STACKFRAME
													 ::hscript::ExprDef _g = bodyExpr->expr;
													 ::hscript::ExprDef newBody;
													if ((_g->_hx_getIndex() == 1)) {
														if ((_g->_hx_getInt(0) == varName)) {
															newBody = ::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(i));
														}
														else {
															newBody = bodyExpr->expr;
														}
													}
													else {
														newBody = bodyExpr->expr;
													}
													return  ::hscript::Expr_obj::__alloc( HX_CTX ,newBody,bodyExpr->line);
												}
												HX_END_LOCAL_FUNC1(return)

												_g20 = (_g20 + 1);
												int i = (_g20 - 1);
												unrolledLoops->push(::hscript::anaylzers::Unravel_obj::eval(::hscript::utils::ExprUtils_obj::map(optimizedBody, ::Dynamic(new _hx_Closure_1(varName,i)))));
											}
										}
										return  ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EBlock(unrolledLoops),expr->line);
									}
									_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
								}
								else {
									_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
								}
							}
							else {
								_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
							}
						}
						else {
							_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
						}
					}
					else {
						_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
					}
				}
				else {
					_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
				}
			}
			else {
				_hx_tmp = ::hscript::ExprDef_obj::EFor(varName,optimizedIterator,optimizedBody);
			}
		}
		break;
		case (int)12: {
			 ::hscript::Expr _hx_tmp12 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::EForKeyValue(_g->_hx_getInt(0),_g->_hx_getInt(1),_hx_tmp12,::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)13: case (int)14: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)15: {
			::Array< ::Dynamic> _g21 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g22 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			int _g23 = _g->_hx_getInt(2);
			bool _g24 = _g->_hx_getBool(3);
			bool _g25 = _g->_hx_getBool(4);
			::Array< ::Dynamic> _g26 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g27 = 0;
				while((_g27 < _g21->length)){
					 ::hscript::Argument arg = _g21->__get(_g27).StaticCast<  ::hscript::Argument >();
					_g27 = (_g27 + 1);
					if (::hx::IsNotNull( arg->value )) {
						int arg1 = arg->name;
						bool arg2 = arg->opt;
						_g26->push( ::hscript::Argument_obj::__alloc( HX_CTX ,arg1,arg2,::hscript::anaylzers::Unravel_obj::eval(arg->value)));
					}
					else {
						_g26->push(arg);
					}
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EFunction(_g26,::hscript::anaylzers::Unravel_obj::eval(_g22),_g23,_g24,_g25);
		}
		break;
		case (int)16: {
			 ::hscript::Expr _g28 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp13;
			if (::hx::IsNotNull( _g28 )) {
				_hx_tmp13 = ::hscript::anaylzers::Unravel_obj::eval(_g28);
			}
			else {
				_hx_tmp13 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::EReturn(_hx_tmp13);
		}
		break;
		case (int)17: {
			 ::hscript::Expr _hx_tmp14 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::EArray(_hx_tmp14,::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)18: {
			::Array< ::Dynamic> _g29 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g30 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g31 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g32 = 0;
				while((_g32 < _g29->length)){
					 ::hscript::Expr expr5 = _g29->__get(_g32).StaticCast<  ::hscript::Expr >();
					_g32 = (_g32 + 1);
					_g31->push(::hscript::anaylzers::Unravel_obj::eval(expr5));
				}
			}
			::Array< ::Dynamic> _g33 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g34 = 0;
				while((_g34 < _g30->length)){
					 ::hscript::Expr expr6 = _g30->__get(_g34).StaticCast<  ::hscript::Expr >();
					_g34 = (_g34 + 1);
					_g33->push(::hscript::anaylzers::Unravel_obj::eval(expr6));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EMapDecl(_g31,_g33);
		}
		break;
		case (int)19: {
			::Array< ::Dynamic> _g35 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g36 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g37 = 0;
				while((_g37 < _g35->length)){
					 ::hscript::Expr expr7 = _g35->__get(_g37).StaticCast<  ::hscript::Expr >();
					_g37 = (_g37 + 1);
					_g36->push(::hscript::anaylzers::Unravel_obj::eval(expr7));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EArrayDecl(_g36);
		}
		break;
		case (int)20: {
			int _g38 = _g->_hx_getInt(0);
			::Array< ::Dynamic> _g39 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g40 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g41 = 0;
				while((_g41 < _g39->length)){
					 ::hscript::Expr expr8 = _g39->__get(_g41).StaticCast<  ::hscript::Expr >();
					_g41 = (_g41 + 1);
					_g40->push(::hscript::anaylzers::Unravel_obj::eval(expr8));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::ENew(_g38,_g40);
		}
		break;
		case (int)21: {
			_hx_tmp = ::hscript::ExprDef_obj::EThrow(::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)22: {
			 ::hscript::Expr _hx_tmp15 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::ETry(_hx_tmp15,_g->_hx_getInt(1),::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)23: {
			::Array< ::Dynamic> _g42 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g43 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g44 = 0;
				while((_g44 < _g42->length)){
					 ::hscript::ObjectField field = _g42->__get(_g44).StaticCast<  ::hscript::ObjectField >();
					_g44 = (_g44 + 1);
					::String field1 = field->name;
					_g43->push( ::hscript::ObjectField_obj::__alloc( HX_CTX ,field1,::hscript::anaylzers::Unravel_obj::eval(field->expr)));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EObject(_g43);
		}
		break;
		case (int)24: {
			 ::hscript::Expr _hx_tmp16 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			 ::hscript::Expr _hx_tmp17 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::ETernary(_hx_tmp16,_hx_tmp17,::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)25: {
			::Array< ::Dynamic> _g45 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g46 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _hx_tmp18 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			::Array< ::Dynamic> _g47 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g48 = 0;
				while((_g48 < _g45->length)){
					 ::hscript::SwitchCase switchCase = _g45->__get(_g48).StaticCast<  ::hscript::SwitchCase >();
					_g48 = (_g48 + 1);
					::Array< ::Dynamic> _g49 = ::Array_obj< ::Dynamic>::__new(0);
					{
						int _g50 = 0;
						::Array< ::Dynamic> _g51 = switchCase->values;
						while((_g50 < _g51->length)){
							 ::hscript::Expr val = _g51->__get(_g50).StaticCast<  ::hscript::Expr >();
							_g50 = (_g50 + 1);
							_g49->push(::hscript::anaylzers::Unravel_obj::eval(val));
						}
					}
					_g47->push( ::hscript::SwitchCase_obj::__alloc( HX_CTX ,_g49,::hscript::anaylzers::Unravel_obj::eval(switchCase->expr)));
				}
			}
			 ::hscript::Expr _hx_tmp19;
			if (::hx::IsNotNull( _g46 )) {
				_hx_tmp19 = ::hscript::anaylzers::Unravel_obj::eval(_g46);
			}
			else {
				_hx_tmp19 = null();
			}
			_hx_tmp = ::hscript::ExprDef_obj::ESwitch(_hx_tmp18,_g47,_hx_tmp19);
		}
		break;
		case (int)26: {
			 ::hscript::Expr _hx_tmp20 = ::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			_hx_tmp = ::hscript::ExprDef_obj::EDoWhile(_hx_tmp20,::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)27: {
			::String _g52 = _g->_hx_getString(0);
			::Array< ::Dynamic> _g53 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g54 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			::Array< ::Dynamic> _g55 = ::Array_obj< ::Dynamic>::__new(0);
			{
				int _g56 = 0;
				while((_g56 < _g53->length)){
					 ::hscript::Expr arg3 = _g53->__get(_g56).StaticCast<  ::hscript::Expr >();
					_g56 = (_g56 + 1);
					_g55->push(::hscript::anaylzers::Unravel_obj::eval(arg3));
				}
			}
			_hx_tmp = ::hscript::ExprDef_obj::EMeta(_g52,_g55,::hscript::anaylzers::Unravel_obj::eval(_g54));
		}
		break;
		case (int)28: {
			_hx_tmp = expr->expr;
		}
		break;
		case (int)29: {
			_hx_tmp = ::hscript::ExprDef_obj::EInfo(_g->_hx_getObject(0).StaticCast< ::Array< ::String > >(),::hscript::anaylzers::Unravel_obj::eval(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >()));
		}
		break;
	}
	return  ::hscript::Expr_obj::__alloc( HX_CTX ,_hx_tmp,expr->line);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unravel_obj,eval,return )


Unravel_obj::Unravel_obj()
{
}

bool Unravel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"eval") ) { outValue = eval_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"SAFE_FOR_UNLOOP") ) { outValue = ( SAFE_FOR_UNLOOP ); return true; }
	}
	return false;
}

bool Unravel_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"SAFE_FOR_UNLOOP") ) { SAFE_FOR_UNLOOP=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Unravel_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Unravel_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Unravel_obj::SAFE_FOR_UNLOOP,HX_("SAFE_FOR_UNLOOP",05,c8,e6,de)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Unravel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Unravel_obj::SAFE_FOR_UNLOOP,"SAFE_FOR_UNLOOP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Unravel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Unravel_obj::SAFE_FOR_UNLOOP,"SAFE_FOR_UNLOOP");
};

#endif

::hx::Class Unravel_obj::__mClass;

static ::String Unravel_obj_sStaticFields[] = {
	HX_("SAFE_FOR_UNLOOP",05,c8,e6,de),
	HX_("eval",9c,6b,1c,43),
	::String(null())
};

void Unravel_obj::__register()
{
	Unravel_obj _hx_dummy;
	Unravel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.anaylzers.Unravel",1f,23,3c,6b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Unravel_obj::__GetStatic;
	__mClass->mSetStaticField = &Unravel_obj::__SetStatic;
	__mClass->mMarkFunc = Unravel_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Unravel_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Unravel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Unravel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Unravel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Unravel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Unravel_obj::__boot()
{
{
	SAFE_FOR_UNLOOP = 128;
}
}

} // end namespace hscript
} // end namespace anaylzers
