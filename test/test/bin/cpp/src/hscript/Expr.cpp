// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ExprDef
#include <hscript/ExprDef.h>
#endif

namespace hscript{

void Expr_obj::__construct( ::hscript::ExprDef expr,int line){
	this->expr = expr;
	this->line = line;
}

Dynamic Expr_obj::__CreateEmpty() { return new Expr_obj; }

void *Expr_obj::_hx_vtable = 0;

Dynamic Expr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Expr_obj > _hx_result = new Expr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Expr_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x595cb608;
}


::hx::ObjectPtr< Expr_obj > Expr_obj::__new( ::hscript::ExprDef expr,int line) {
	::hx::ObjectPtr< Expr_obj > __this = new Expr_obj();
	__this->__construct(expr,line);
	return __this;
}

::hx::ObjectPtr< Expr_obj > Expr_obj::__alloc(::hx::Ctx *_hx_ctx, ::hscript::ExprDef expr,int line) {
	Expr_obj *__this = (Expr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Expr_obj), true, "hscript.Expr"));
	*(void **)__this = Expr_obj::_hx_vtable;
	__this->__construct(expr,line);
	return __this;
}

Expr_obj::Expr_obj()
{
}

void Expr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Expr);
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_END_CLASS();
}

void Expr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(expr,"expr");
	HX_VISIT_MEMBER_NAME(line,"line");
}

::hx::Val Expr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr ); }
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Expr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::hscript::ExprDef >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Expr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("expr",35,fd,1d,43));
	outFields->push(HX_("line",f4,17,b3,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Expr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hscript::ExprDef */ ,(int)offsetof(Expr_obj,expr),HX_("expr",35,fd,1d,43)},
	{::hx::fsInt,(int)offsetof(Expr_obj,line),HX_("line",f4,17,b3,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Expr_obj_sStaticStorageInfo = 0;
#endif

static ::String Expr_obj_sMemberFields[] = {
	HX_("expr",35,fd,1d,43),
	HX_("line",f4,17,b3,47),
	::String(null()) };

::hx::Class Expr_obj::__mClass;

void Expr_obj::__register()
{
	Expr_obj _hx_dummy;
	Expr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Expr",30,4b,dc,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Expr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Expr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Expr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Expr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
