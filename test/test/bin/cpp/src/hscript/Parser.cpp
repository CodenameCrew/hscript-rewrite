// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Argument
#include <hscript/Argument.h>
#endif
#ifndef INCLUDED_hscript_EImportMode
#include <hscript/EImportMode.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_ErrorDef
#include <hscript/ErrorDef.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ExprDef
#include <hscript/ExprDef.h>
#endif
#ifndef INCLUDED_hscript_LConst
#include <hscript/LConst.h>
#endif
#ifndef INCLUDED_hscript_LToken
#include <hscript/LToken.h>
#endif
#ifndef INCLUDED_hscript_Lexer
#include <hscript/Lexer.h>
#endif
#ifndef INCLUDED_hscript_ObjectField
#include <hscript/ObjectField.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_hscript_SwitchCase
#include <hscript/SwitchCase.h>
#endif
#ifndef INCLUDED_hscript__Ast_ExprBinop_Impl_
#include <hscript/_Ast/ExprBinop_Impl_.h>
#endif
#ifndef INCLUDED_hscript__Lexer_LexerOp_Impl_
#include <hscript/_Lexer/LexerOp_Impl_.h>
#endif

namespace hscript{

void Parser_obj::__construct(::String fileName){
            	HX_JUST_GC_STACKFRAME
	this->preprocesorValues =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
	this->fileName = null();
	this->staticModifier = false;
	this->publicModifier = false;
	this->uniqueID = 0;
	this->variablesList = ::Array_obj< ::String >::__new(0);
	this->token = 0;
	this->tokens = ::Array_obj< ::Dynamic>::__new(0);
	::String _hx_tmp;
	if (::hx::IsNotNull( fileName )) {
		_hx_tmp = fileName;
	}
	else {
		_hx_tmp = HX_("",00,00,00,00);
	}
	this->fileName = _hx_tmp;
	this->loadBaseVariables();
}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b857072;
}

void Parser_obj::reset(){
	this->tokens->resize(0);
	this->token = 0;
	this->variablesList->resize(0);
	this->uniqueID = 0;
	this->publicModifier = false;
	this->staticModifier = false;
	this->preprocesorValues->clear();
	this->loadBaseVariables();
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,reset,(void))

 ::hscript::Expr Parser_obj::parseString(::String string){
	return this->parse(::hscript::Lexer_obj::tokenize(string));
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseString,return )

 ::hscript::Expr Parser_obj::parse(::Array< ::Dynamic> tokens){
	bool _hx_tmp;
	if (::hx::IsNotNull( tokens )) {
		_hx_tmp = (tokens->length == 0);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		return this->create(::hscript::ExprDef_obj::EInfo(null(),this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(0)))));
	}
	this->tokens = tokens;
	::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
	while(true){
		 ::hscript::LToken _hx_tmp1;
		if ((this->token >= this->tokens->length)) {
			_hx_tmp1 = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_hx_tmp1 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		if (::hx::IsPointerEq( _hx_tmp1,::hscript::LToken_obj::LTEof_dyn() )) {
			goto _hx_goto_0;
		}
		this->parseBlock(exprs);
	}
	_hx_goto_0:;
	::Array< ::String > _hx_tmp2 = this->variablesList;
	 ::hscript::Expr _hx_tmp3;
	if ((exprs->length == 1)) {
		_hx_tmp3 = exprs->__get(0).StaticCast<  ::hscript::Expr >();
	}
	else {
		_hx_tmp3 = this->create(::hscript::ExprDef_obj::EBlock(exprs));
	}
	return this->create(::hscript::ExprDef_obj::EInfo(_hx_tmp2,_hx_tmp3));
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parse,return )

void Parser_obj::loadBaseVariables(){
	this->preprocesorValues->set(HX_("true",4e,a7,03,4d),true);
	this->preprocesorValues->set(HX_("false",a3,35,4f,fb),false);
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,loadBaseVariables,(void))

 ::hscript::Expr Parser_obj::parseExpr(){
            	HX_JUST_GC_STACKFRAME
	 ::hscript::LToken _g;
	if ((this->token >= this->tokens->length)) {
		_g = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			if (this->maybe(::hscript::LToken_obj::LTCloseP_dyn())) {
				this->deepEnsure(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)));
				return this->create(::hscript::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(0),this->parseExpr(),-1,false,false));
			}
			 ::hscript::Expr expr = this->parseExpr();
			{
				 ::hscript::LToken _g1;
				if ((this->token >= this->tokens->length)) {
					_g1 = ::hscript::LToken_obj::LTEof_dyn();
				}
				else {
					_g1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
				}
				switch((int)(_g1->_hx_getIndex())){
					case (int)1: {
						return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EParent(expr)));
					}
					break;
					case (int)6: {
						if ((this->token > 0)) {
							this->token--;
						}
						else {
							this->token = 0;
						}
						{
							 ::hscript::ExprDef _g2 = expr->expr;
							if ((_g2->_hx_getIndex() == 1)) {
								::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::hscript::Argument_obj::__alloc( HX_CTX ,_g2->_hx_getInt(0),null(),null()));
								::Array< ::Dynamic> args1 = args;
								if (this->maybe(::hscript::LToken_obj::LTComma_dyn())) {
									args1 = this->parseFunctionArgs(args);
								}
								else {
									this->deepEnsure(::hscript::LToken_obj::LTCloseP_dyn());
								}
								this->deepEnsure(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)));
								return this->create(::hscript::ExprDef_obj::EFunction(args1,this->parseExpr(),-1,false,false));
							}
						}
					}
					break;
					case (int)8: {
						this->parseType();
						{
							 ::hscript::LToken _g3;
							if ((this->token >= this->tokens->length)) {
								_g3 = ::hscript::LToken_obj::LTEof_dyn();
							}
							else {
								_g3 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
							}
							switch((int)(_g3->_hx_getIndex())){
								case (int)1: {
									if ((this->token > 0)) {
										this->token--;
									}
									else {
										this->token = 0;
									}
									{
										 ::hscript::ExprDef _g4 = expr->expr;
										if ((_g4->_hx_getIndex() == 1)) {
											::Array< ::Dynamic> args2 = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::hscript::Argument_obj::__alloc( HX_CTX ,_g4->_hx_getInt(0),null(),null()));
											::Array< ::Dynamic> args3 = args2;
											if (this->maybe(::hscript::LToken_obj::LTComma_dyn())) {
												args3 = this->parseFunctionArgs(args2);
											}
											else {
												this->deepEnsure(::hscript::LToken_obj::LTCloseP_dyn());
											}
											this->deepEnsure(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)));
											return this->create(::hscript::ExprDef_obj::EFunction(args3,this->parseExpr(),-1,false,false));
										}
									}
								}
								break;
								case (int)6: {
									if ((this->token > 0)) {
										this->token--;
									}
									else {
										this->token = 0;
									}
									{
										 ::hscript::ExprDef _g5 = expr->expr;
										if ((_g5->_hx_getIndex() == 1)) {
											::Array< ::Dynamic> args4 = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::hscript::Argument_obj::__alloc( HX_CTX ,_g5->_hx_getInt(0),null(),null()));
											::Array< ::Dynamic> args5 = args4;
											if (this->maybe(::hscript::LToken_obj::LTComma_dyn())) {
												args5 = this->parseFunctionArgs(args4);
											}
											else {
												this->deepEnsure(::hscript::LToken_obj::LTCloseP_dyn());
											}
											this->deepEnsure(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)));
											return this->create(::hscript::ExprDef_obj::EFunction(args5,this->parseExpr(),-1,false,false));
										}
									}
								}
								break;
								default:{
								}
							}
						}
					}
					break;
					case (int)15: {
						if (::hx::IsNull( expr )) {
							if (this->maybe(::hscript::LToken_obj::LTColon_dyn())) {
								this->parseType();
							}
							::Array< ::Dynamic> args6 = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::hscript::Argument_obj::__alloc( HX_CTX ,this->variableID(_g1->_hx_getString(0)),true,null()));
							::Array< ::Dynamic> args7 = args6;
							if (this->maybe(::hscript::LToken_obj::LTComma_dyn())) {
								args7 = this->parseFunctionArgs(args6);
							}
							else {
								this->deepEnsure(::hscript::LToken_obj::LTCloseP_dyn());
							}
							this->deepEnsure(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)));
							return this->create(::hscript::ExprDef_obj::EFunction(args7,this->parseExpr(),-1,false,false));
						}
						{
							 ::hscript::ExprDef _g6 = expr->expr;
							if ((_g6->_hx_getIndex() == 1)) {
								::Array< ::Dynamic> args8 = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::hscript::Argument_obj::__alloc( HX_CTX ,_g6->_hx_getInt(0),true,null()));
								::Array< ::Dynamic> args9 = args8;
								if (this->maybe(::hscript::LToken_obj::LTComma_dyn())) {
									args9 = this->parseFunctionArgs(args8);
								}
								else {
									this->deepEnsure(::hscript::LToken_obj::LTCloseP_dyn());
								}
								this->deepEnsure(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)));
								return this->create(::hscript::ExprDef_obj::EFunction(args9,this->parseExpr(),-1,false,false));
							}
						}
					}
					break;
					case (int)19: {
						return expr;
					}
					break;
					default:{
					}
				}
			}
			return ( ( ::hscript::Expr)(this->unexpected()) );
		}
		break;
		case (int)2: {
			::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
			if (this->maybe(::hscript::LToken_obj::LTCloseBr_dyn())) {
				return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))));
			}
			 ::hscript::Expr testExpr = this->parseExpr();
			bool mapDeclaration = false;
			::Array< ::Dynamic> values = ::Array_obj< ::Dynamic>::__new(0);
			{
				 ::hscript::ExprDef _g7 = testExpr->expr;
				if ((_g7->_hx_getIndex() == 6)) {
					if ((_g7->_hx_getInt(0) == 22)) {
						mapDeclaration = true;
						exprs->push(_g7->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
						values->push(_g7->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
					}
					else {
						exprs->push(testExpr);
					}
				}
				else {
					exprs->push(testExpr);
				}
			}
			{
				 ::hscript::LToken _g8;
				if ((this->token >= this->tokens->length)) {
					_g8 = ::hscript::LToken_obj::LTEof_dyn();
				}
				else {
					_g8 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
				}
				switch((int)(_g8->_hx_getIndex())){
					case (int)3: {
					}
					break;
					case (int)6: {
						while(!(this->maybe(::hscript::LToken_obj::LTCloseBr_dyn()))){
							 ::hscript::Expr expr1 = this->parseExpr();
							{
								 ::hscript::ExprDef _g9 = expr1->expr;
								if ((_g9->_hx_getIndex() == 6)) {
									if ((_g9->_hx_getInt(0) == 22)) {
										if (mapDeclaration) {
											exprs->push(_g9->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
											values->push(_g9->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
										}
										else {
											if (mapDeclaration) {
												this->expected(::hscript::LToken_obj::LTOp(HX_("=>",61,35,00,00)));
											}
											else {
												exprs->push(expr1);
											}
										}
									}
									else {
										if (mapDeclaration) {
											this->expected(::hscript::LToken_obj::LTOp(HX_("=>",61,35,00,00)));
										}
										else {
											exprs->push(expr1);
										}
									}
								}
								else {
									if (mapDeclaration) {
										this->expected(::hscript::LToken_obj::LTOp(HX_("=>",61,35,00,00)));
									}
									else {
										exprs->push(expr1);
									}
								}
							}
							{
								 ::hscript::LToken _g10;
								if ((this->token >= this->tokens->length)) {
									_g10 = ::hscript::LToken_obj::LTEof_dyn();
								}
								else {
									_g10 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
								}
								switch((int)(_g10->_hx_getIndex())){
									case (int)3: {
										goto _hx_goto_1;
									}
									break;
									case (int)6: {
									}
									break;
									default:{
										this->unexpected();
										goto _hx_goto_1;
									}
								}
							}
						}
						_hx_goto_1:;
					}
					break;
					default:{
						this->unexpected();
					}
				}
			}
			bool _hx_tmp;
			if ((exprs->length == 1)) {
				_hx_tmp = ::hx::IsNotNull( exprs->__get(0).StaticCast<  ::hscript::Expr >() );
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				 ::hscript::Expr firstExpr = exprs->__get(0).StaticCast<  ::hscript::Expr >();
				switch((int)(firstExpr->expr->_hx_getIndex())){
					case (int)10: {
						int temporaryVariable = this->variableID((HX_("__a_",fe,af,13,3f) + this->uniqueID++));
						 ::hscript::Expr exprBlock;
						if (this->isMapComprehension(firstExpr)) {
							 ::hscript::Expr exprBlock1 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable,this->create(::hscript::ExprDef_obj::EMapDecl(::Array_obj< ::Dynamic>::__new(0),::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock2 = this->parseMapComprehensions(temporaryVariable,firstExpr);
							exprBlock = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock1)->init(1,exprBlock2)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable)))));
						}
						else {
							 ::hscript::Expr exprBlock3 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable,this->create(::hscript::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock4 = this->parseArrayComprehensions(temporaryVariable,firstExpr);
							exprBlock = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock3)->init(1,exprBlock4)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable)))));
						}
						return this->parseNextExpr(exprBlock);
					}
					break;
					case (int)11: {
						int temporaryVariable1 = this->variableID((HX_("__a_",fe,af,13,3f) + this->uniqueID++));
						 ::hscript::Expr exprBlock5;
						if (this->isMapComprehension(firstExpr)) {
							 ::hscript::Expr exprBlock6 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable1,this->create(::hscript::ExprDef_obj::EMapDecl(::Array_obj< ::Dynamic>::__new(0),::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock7 = this->parseMapComprehensions(temporaryVariable1,firstExpr);
							exprBlock5 = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock6)->init(1,exprBlock7)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable1)))));
						}
						else {
							 ::hscript::Expr exprBlock8 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable1,this->create(::hscript::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock9 = this->parseArrayComprehensions(temporaryVariable1,firstExpr);
							exprBlock5 = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock8)->init(1,exprBlock9)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable1)))));
						}
						return this->parseNextExpr(exprBlock5);
					}
					break;
					case (int)12: {
						int temporaryVariable2 = this->variableID((HX_("__a_",fe,af,13,3f) + this->uniqueID++));
						 ::hscript::Expr exprBlock10;
						if (this->isMapComprehension(firstExpr)) {
							 ::hscript::Expr exprBlock11 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable2,this->create(::hscript::ExprDef_obj::EMapDecl(::Array_obj< ::Dynamic>::__new(0),::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock12 = this->parseMapComprehensions(temporaryVariable2,firstExpr);
							exprBlock10 = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock11)->init(1,exprBlock12)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable2)))));
						}
						else {
							 ::hscript::Expr exprBlock13 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable2,this->create(::hscript::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock14 = this->parseArrayComprehensions(temporaryVariable2,firstExpr);
							exprBlock10 = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock13)->init(1,exprBlock14)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable2)))));
						}
						return this->parseNextExpr(exprBlock10);
					}
					break;
					case (int)26: {
						int temporaryVariable3 = this->variableID((HX_("__a_",fe,af,13,3f) + this->uniqueID++));
						 ::hscript::Expr exprBlock15;
						if (this->isMapComprehension(firstExpr)) {
							 ::hscript::Expr exprBlock16 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable3,this->create(::hscript::ExprDef_obj::EMapDecl(::Array_obj< ::Dynamic>::__new(0),::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock17 = this->parseMapComprehensions(temporaryVariable3,firstExpr);
							exprBlock15 = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock16)->init(1,exprBlock17)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable3)))));
						}
						else {
							 ::hscript::Expr exprBlock18 = this->create(::hscript::ExprDef_obj::EVar(temporaryVariable3,this->create(::hscript::ExprDef_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))),null(),null()));
							 ::hscript::Expr exprBlock19 = this->parseArrayComprehensions(temporaryVariable3,firstExpr);
							exprBlock15 = this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,exprBlock18)->init(1,exprBlock19)->init(2,this->create(::hscript::ExprDef_obj::EIdent(temporaryVariable3)))));
						}
						return this->parseNextExpr(exprBlock15);
					}
					break;
					default:{
					}
				}
			}
			 ::hscript::Expr _hx_tmp1;
			if (mapDeclaration) {
				_hx_tmp1 = this->create(::hscript::ExprDef_obj::EMapDecl(exprs,values));
			}
			else {
				_hx_tmp1 = this->create(::hscript::ExprDef_obj::EArrayDecl(exprs));
			}
			return this->parseNextExpr(_hx_tmp1);
		}
		break;
		case (int)4: {
			 ::hscript::LToken nextToken;
			if ((this->token >= this->tokens->length)) {
				nextToken = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				nextToken = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			bool isObject = false;
			switch((int)(nextToken->_hx_getIndex())){
				case (int)5: {
					return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EObject(null())));
				}
				break;
				case (int)15: {
					 ::hscript::LToken peekToken;
					if ((this->token >= this->tokens->length)) {
						peekToken = ::hscript::LToken_obj::LTEof_dyn();
					}
					else {
						peekToken = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
					}
					if (::hx::IsPointerEq( peekToken,::hscript::LToken_obj::LTColon_dyn() )) {
						isObject = true;
					}
					if ((this->token > 0)) {
						this->token--;
					}
					else {
						this->token = 0;
					}
				}
				break;
				case (int)16: {
					if ((nextToken->_hx_getObject(0).StaticCast<  ::hscript::LConst >()->_hx_getIndex() == 2)) {
						 ::hscript::LToken peekToken1;
						if ((this->token >= this->tokens->length)) {
							peekToken1 = ::hscript::LToken_obj::LTEof_dyn();
						}
						else {
							peekToken1 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
						}
						if (::hx::IsPointerEq( peekToken1,::hscript::LToken_obj::LTColon_dyn() )) {
							isObject = true;
						}
						if ((this->token > 0)) {
							this->token--;
						}
						else {
							this->token = 0;
						}
					}
					else {
						if ((this->token > 0)) {
							this->token--;
						}
						else {
							this->token = 0;
						}
					}
				}
				break;
				default:{
					if ((this->token > 0)) {
						this->token--;
					}
					else {
						this->token = 0;
					}
				}
			}
			if (isObject) {
				return this->parseObject();
			}
			else {
				::Array< ::Dynamic> exprs1 = ::Array_obj< ::Dynamic>::__new(0);
				while(true){
					bool _hx_tmp2;
					 ::hscript::LToken _hx_tmp3;
					if ((this->token >= this->tokens->length)) {
						_hx_tmp3 = ::hscript::LToken_obj::LTEof_dyn();
					}
					else {
						_hx_tmp3 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
					}
					if (::hx::IsPointerNotEq( _hx_tmp3,::hscript::LToken_obj::LTCloseCB_dyn() )) {
						 ::hscript::LToken _hx_tmp4;
						if ((this->token >= this->tokens->length)) {
							_hx_tmp4 = ::hscript::LToken_obj::LTEof_dyn();
						}
						else {
							_hx_tmp4 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
						}
						_hx_tmp2 = ::hx::IsPointerEq( _hx_tmp4,::hscript::LToken_obj::LTEof_dyn() );
					}
					else {
						_hx_tmp2 = true;
					}
					if (_hx_tmp2) {
						goto _hx_goto_2;
					}
					this->parseBlock(exprs1);
				}
				_hx_goto_2:;
				this->ensure(::hscript::LToken_obj::LTCloseCB_dyn());
				return this->create(::hscript::ExprDef_obj::EBlock(exprs1));
			}
		}
		break;
		case (int)10: {
			return null();
		}
		break;
		case (int)13: {
			::String _g11 = _g->_hx_getString(0);
			if (::hscript::_Lexer::LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP->exists(_g11)) {
				unsigned char unop = ( (unsigned char)(::hscript::_Lexer::LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP->get(_g11)) );
				if ((_g11 == HX_("-",2d,00,00,00))) {
					 ::hscript::Expr expr2 = this->parseExpr();
					if (::hx::IsNull( expr2 )) {
						return this->parseUnop(unop,expr2);
					}
					 ::hscript::ExprDef _g12 = expr2->expr;
					if ((_g12->_hx_getIndex() == 0)) {
						 ::hscript::LConst _g13 = _g12->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
						switch((int)(_g13->_hx_getIndex())){
							case (int)0: {
								return this->create(::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(-(_g13->_hx_getInt(0)))));
							}
							break;
							case (int)1: {
								return this->create(::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCFloat(-(_g13->_hx_getFloat(0)))));
							}
							break;
							default:{
								return this->parseUnop(unop,expr2);
							}
						}
					}
					else {
						return this->parseUnop(unop,expr2);
					}
				}
				return this->parseUnop(unop,this->parseExpr());
			}
			return ( ( ::hscript::Expr)(this->unexpected()) );
		}
		break;
		case (int)14: {
			return this->parseNextExpr(this->parseKeyword(_g->_hx_getString(0)));
		}
		break;
		case (int)15: {
			return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EIdent(this->variableID(_g->_hx_getString(0)))));
		}
		break;
		case (int)16: {
			return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EConst(_g->_hx_getObject(0).StaticCast<  ::hscript::LConst >())));
		}
		break;
		case (int)17: {
			::Array< ::Dynamic> args10 = null();
			if (this->maybe(::hscript::LToken_obj::LTOpenP_dyn())) {
				args10 = this->parseParentheses();
			}
			return this->create(::hscript::ExprDef_obj::EMeta(_g->_hx_getString(0),args10,this->parseExpr()));
		}
		break;
		case (int)18: {
			return this->parseNextExpr(this->parsePreprocess(_g->_hx_getString(0)));
		}
		break;
		default:{
			this->unexpected();
			return null();
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseExpr,return )

 ::hscript::Expr Parser_obj::parseNextExpr( ::hscript::Expr prev){
	 ::hscript::LToken _g;
	if ((this->token >= this->tokens->length)) {
		_g = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			return this->parseNextExpr(this->create(::hscript::ExprDef_obj::ECall(prev,this->parseParentheses())));
		}
		break;
		case (int)2: {
			 ::hscript::Expr arrayIndex = this->parseExpr();
			this->ensure(::hscript::LToken_obj::LTCloseBr_dyn());
			return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EArray(prev,arrayIndex)));
		}
		break;
		case (int)10: {
			 ::hscript::Expr thenExpr = this->parseExpr();
			this->ensure(::hscript::LToken_obj::LTColon_dyn());
			return this->create(::hscript::ExprDef_obj::ETernary(prev,thenExpr,this->parseExpr()));
		}
		break;
		case (int)7: case (int)11: {
			 ::hscript::LToken isSafe;
			bool isSafe1;
			if (((this->token - 1) >= 0)) {
				isSafe1 = ((this->token - 1) >= this->tokens->length);
			}
			else {
				isSafe1 = true;
			}
			if (isSafe1) {
				isSafe = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				isSafe = this->tokens->__get((this->token - 1))->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			bool isSafe2 = ::hx::IsPointerEq( isSafe,::hscript::LToken_obj::LTQuestionDot_dyn() );
			::String fieldName;
			 ::hscript::LToken _g1;
			if ((this->token >= this->tokens->length)) {
				_g1 = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g1->_hx_getIndex())){
				case (int)14: {
					fieldName = _g1->_hx_getString(0);
				}
				break;
				case (int)15: {
					fieldName = _g1->_hx_getString(0);
				}
				break;
				default:{
					fieldName = ( (::String)(this->unexpected()) );
				}
			}
			return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EField(prev,fieldName,isSafe2)));
		}
		break;
		case (int)12: {
			bool bracketed = this->maybe(::hscript::LToken_obj::LTOpenCB_dyn());
			 ::hscript::Expr body = this->parseNextExpr(this->parseExpr());
			body = this->stringifyExpr(body);
			if (bracketed) {
				this->ensure(::hscript::LToken_obj::LTCloseCB_dyn());
			}
			 ::hscript::Expr next = this->parseNextExpr(this->parseExpr());
			 ::hscript::Expr first = this->create(::hscript::ExprDef_obj::EBinop(( (unsigned char)(0) ),prev,body));
			 ::hscript::ExprDef _g2 = prev->expr;
			bool _hx_tmp;
			if ((_g2->_hx_getIndex() == 0)) {
				 ::hscript::LConst _g3 = _g2->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
				if ((_g3->_hx_getIndex() == 2)) {
					if ((_g3->_hx_getString(0) == HX_("",00,00,00,00))) {
						_hx_tmp = true;
					}
					else {
						_hx_tmp = false;
					}
				}
				else {
					_hx_tmp = false;
				}
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				first = body;
			}
			 ::hscript::ExprDef _g4 = next->expr;
			bool _hx_tmp1;
			if ((_g4->_hx_getIndex() == 0)) {
				 ::hscript::LConst _g5 = _g4->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
				if ((_g5->_hx_getIndex() == 2)) {
					if ((_g5->_hx_getString(0) == HX_("",00,00,00,00))) {
						_hx_tmp1 = true;
					}
					else {
						_hx_tmp1 = false;
					}
				}
				else {
					_hx_tmp1 = false;
				}
			}
			else {
				_hx_tmp1 = false;
			}
			if (_hx_tmp1) {
				return first;
			}
			return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EBinop(( (unsigned char)(0) ),first,next)));
		}
		break;
		case (int)13: {
			::String _g6 = _g->_hx_getString(0);
			if ((_g6 == HX_("->",71,27,00,00))) {
				 ::hscript::ExprDef _g7 = prev->expr;
				switch((int)(_g7->_hx_getIndex())){
					case (int)1: {
						return this->create(::hscript::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(0),this->parseExpr(),-1,false,false));
					}
					break;
					case (int)3: {
						if ((_g7->_hx_getObject(0).StaticCast<  ::hscript::Expr >()->expr->_hx_getIndex() == 1)) {
							return this->create(::hscript::ExprDef_obj::EFunction(::Array_obj< ::Dynamic>::__new(0),this->parseExpr(),-1,false,false));
						}
						else {
							this->unexpected();
						}
					}
					break;
					default:{
						this->unexpected();
					}
				}
			}
			bool _hx_tmp2;
			if ((_g6 != HX_("++",a0,25,00,00))) {
				_hx_tmp2 = (_g6 == HX_("--",60,27,00,00));
			}
			else {
				_hx_tmp2 = true;
			}
			if (_hx_tmp2) {
				bool _hx_tmp3;
				if (!(this->isBlock(prev))) {
					if ((prev->expr->_hx_getIndex() == 3)) {
						_hx_tmp3 = true;
					}
					else {
						_hx_tmp3 = false;
					}
				}
				else {
					_hx_tmp3 = true;
				}
				if (_hx_tmp3) {
					if ((this->token > 0)) {
						this->token--;
					}
					else {
						this->token = 0;
					}
					return prev;
				}
				return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EUnop(::hscript::_Lexer::LexerOp_Impl__obj::LEXER_TO_EXPR_UNOP->get(_g6),false,prev)));
			}
			 ::hscript::Expr expr = this->parseExpr();
			return this->parseBinop(( (unsigned char)(::hscript::_Lexer::LexerOp_Impl__obj::LEXER_TO_EXPR_OP->get(_g6)) ),prev,expr);
		}
		break;
		default:{
			if ((this->token > 0)) {
				this->token--;
			}
			else {
				this->token = 0;
			}
			return prev;
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseNextExpr,return )

 ::hscript::Expr Parser_obj::parseKeyword(::String keyword){
            	HX_JUST_GC_STACKFRAME
	::String _hx_switch_0 = keyword;
	if (  (_hx_switch_0==HX_("break",bf,24,ec,b8)) ){
		return this->create(::hscript::ExprDef_obj::EBreak_dyn());
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
		return this->create(::hscript::ExprDef_obj::EContinue_dyn());
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("do",8b,57,00,00)) ){
		 ::hscript::Expr expr = this->parseExpr();
		this->deepEnsure(::hscript::LToken_obj::LTKeyWord(HX_("while",b1,43,bd,c9)));
		return this->create(::hscript::ExprDef_obj::EDoWhile(this->parseExpr(),expr));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
		return ( ( ::hscript::Expr)(this->unexpected()) );
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("final",76,5f,9a,00)) ||  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
		::String variableName = this->parseIdent();
		if (this->maybe(::hscript::LToken_obj::LTColon_dyn())) {
			this->parseType();
		}
		 ::hscript::Expr assign = null();
		if (this->maybe(::hscript::LToken_obj::LTOp(HX_("=",3d,00,00,00)))) {
			assign = this->parseExpr();
		}
		int _hx_tmp = this->variableID(variableName);
		return this->create(::hscript::ExprDef_obj::EVar(_hx_tmp,assign,this->publicModifier,this->staticModifier));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("for",09,c7,4d,00)) ){
		this->ensure(::hscript::LToken_obj::LTOpenP_dyn());
		::String key = this->parseIdent();
		::String value = null();
		if (this->maybe(::hscript::LToken_obj::LTOp(HX_("=>",61,35,00,00)))) {
			value = this->parseIdent();
		}
		this->deepEnsure(::hscript::LToken_obj::LTKeyWord(HX_("in",e5,5b,00,00)));
		 ::hscript::Expr iterator = this->parseExpr();
		this->ensure(::hscript::LToken_obj::LTCloseP_dyn());
		 ::hscript::Expr expr1 = this->parseExpr();
		if (::hx::IsNotNull( value )) {
			int _hx_tmp1 = this->variableID(key);
			return this->create(::hscript::ExprDef_obj::EForKeyValue(_hx_tmp1,this->variableID(value),iterator,expr1));
		}
		else {
			return this->create(::hscript::ExprDef_obj::EFor(this->variableID(key),iterator,expr1));
		}
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
		::String functionName;
		 ::hscript::LToken _g;
		if ((this->token >= this->tokens->length)) {
			_g = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		switch((int)(_g->_hx_getIndex())){
			case (int)14: {
				functionName = _g->_hx_getString(0);
			}
			break;
			case (int)15: {
				functionName = _g->_hx_getString(0);
			}
			break;
			default:{
				if ((this->token > 0)) {
					this->token--;
				}
				else {
					this->token = 0;
				}
				functionName = null();
			}
		}
		this->ensure(::hscript::LToken_obj::LTOpenP_dyn());
		::Array< ::Dynamic> args = this->parseFunctionArgs(null());
		if (this->maybe(::hscript::LToken_obj::LTColon_dyn())) {
			this->parseType();
		}
		 ::hscript::Expr expr2 = this->parseExpr();
		int _hx_tmp2 = this->variableID(functionName);
		return this->create(::hscript::ExprDef_obj::EFunction(args,expr2,_hx_tmp2,this->publicModifier,this->staticModifier));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
		this->ensure(::hscript::LToken_obj::LTOpenP_dyn());
		 ::hscript::Expr condition = this->parseExpr();
		this->ensure(::hscript::LToken_obj::LTCloseP_dyn());
		 ::hscript::Expr expr3 = this->parseExpr();
		 ::hscript::Expr elseExpr = null();
		bool semic = this->maybe(::hscript::LToken_obj::LTSemiColon_dyn());
		if (this->maybe(::hscript::LToken_obj::LTKeyWord(HX_("else",b9,e4,14,43)))) {
			elseExpr = this->parseExpr();
		}
		else {
			if (semic) {
				if ((this->token > 0)) {
					this->token--;
				}
				else {
					this->token = 0;
				}
			}
		}
		return this->create(::hscript::ExprDef_obj::EIf(condition,expr3,elseExpr));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("import",65,a1,82,08)) ){
		 ::hscript::EImportMode mode = ::hscript::EImportMode_obj::Normal_dyn();
		::Array< ::String > identifiers = ::Array_obj< ::String >::__new(0);
		identifiers->push(this->parseIdent());
		while(true){
			 ::hscript::LToken _g1;
			if ((this->token >= this->tokens->length)) {
				_g1 = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g1->_hx_getIndex())){
				case (int)7: {
					 ::hscript::LToken _g2;
					if ((this->token >= this->tokens->length)) {
						_g2 = ::hscript::LToken_obj::LTEof_dyn();
					}
					else {
						_g2 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
					}
					switch((int)(_g2->_hx_getIndex())){
						case (int)13: {
							if ((_g2->_hx_getString(0) == HX_("*",2a,00,00,00))) {
								mode = ::hscript::EImportMode_obj::All_dyn();
							}
							else {
								this->unexpected();
								goto _hx_goto_4;
							}
						}
						break;
						case (int)15: {
							identifiers->push(_g2->_hx_getString(0));
						}
						break;
						default:{
							this->unexpected();
							goto _hx_goto_4;
						}
					}
				}
				break;
				case (int)9: {
					if ((this->token > 0)) {
						this->token--;
					}
					else {
						this->token = 0;
					}
					goto _hx_goto_4;
				}
				break;
				case (int)14: {
					if ((_g1->_hx_getString(0) == HX_("as",f2,54,00,00))) {
						mode = ::hscript::EImportMode_obj::As(this->parseIdent());
					}
					else {
						this->unexpected();
						goto _hx_goto_4;
					}
				}
				break;
				default:{
					this->unexpected();
					goto _hx_goto_4;
				}
			}
		}
		_hx_goto_4:;
		return this->create(::hscript::ExprDef_obj::EImport(identifiers->join(HX_(".",2e,00,00,00)),mode));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("inline",59,ca,3f,99)) ){
		this->deepEnsure(::hscript::LToken_obj::LTKeyWord(HX_("function",18,ab,52,14)));
		return this->parseKeyword(HX_("function",18,ab,52,14));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("new",60,d0,53,00)) ){
		::String className = this->parseClassName();
		::Array< ::Dynamic> args1 = this->parseParentheses();
		return this->create(::hscript::ExprDef_obj::ENew(this->variableID(className),args1));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("override",4c,22,28,49)) ){
		 ::hscript::LToken _g3;
		if ((this->token >= this->tokens->length)) {
			_g3 = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g3 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		if ((_g3->_hx_getIndex() == 14)) {
			::String _hx_switch_1 = _g3->_hx_getString(0);
			if (  (_hx_switch_1==HX_("final",76,5f,9a,00)) ){
				return this->parseKeyword(HX_("final",76,5f,9a,00));
				goto _hx_goto_5;
			}
			if (  (_hx_switch_1==HX_("function",18,ab,52,14)) ){
				return this->parseKeyword(HX_("function",18,ab,52,14));
				goto _hx_goto_5;
			}
			if (  (_hx_switch_1==HX_("public",a9,80,f3,66)) ){
				return this->parseKeyword(HX_("static",ae,dc,fb,05));
				goto _hx_goto_5;
			}
			if (  (_hx_switch_1==HX_("static",ae,dc,fb,05)) ){
				return this->parseKeyword(HX_("static",ae,dc,fb,05));
				goto _hx_goto_5;
			}
			if (  (_hx_switch_1==HX_("var",e7,de,59,00)) ){
				return this->parseKeyword(HX_("var",e7,de,59,00));
				goto _hx_goto_5;
			}
			/* default */{
				return ( ( ::hscript::Expr)(this->unexpected()) );
			}
			_hx_goto_5:;
		}
		else {
			return ( ( ::hscript::Expr)(this->unexpected()) );
		}
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("public",a9,80,f3,66)) ){
		this->publicModifier = true;
		 ::hscript::Expr modifierExpr;
		 ::hscript::LToken _g4;
		if ((this->token >= this->tokens->length)) {
			_g4 = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g4 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		if ((_g4->_hx_getIndex() == 14)) {
			::String _hx_switch_2 = _g4->_hx_getString(0);
			if (  (_hx_switch_2==HX_("final",76,5f,9a,00)) ){
				modifierExpr = this->parseKeyword(HX_("final",76,5f,9a,00));
				goto _hx_goto_6;
			}
			if (  (_hx_switch_2==HX_("function",18,ab,52,14)) ){
				modifierExpr = this->parseKeyword(HX_("function",18,ab,52,14));
				goto _hx_goto_6;
			}
			if (  (_hx_switch_2==HX_("override",4c,22,28,49)) ){
				modifierExpr = this->parseKeyword(HX_("override",4c,22,28,49));
				goto _hx_goto_6;
			}
			if (  (_hx_switch_2==HX_("static",ae,dc,fb,05)) ){
				modifierExpr = this->parseKeyword(HX_("static",ae,dc,fb,05));
				goto _hx_goto_6;
			}
			if (  (_hx_switch_2==HX_("var",e7,de,59,00)) ){
				modifierExpr = this->parseKeyword(HX_("var",e7,de,59,00));
				goto _hx_goto_6;
			}
			/* default */{
				modifierExpr = ( ( ::hscript::Expr)(this->unexpected()) );
			}
			_hx_goto_6:;
		}
		else {
			modifierExpr = ( ( ::hscript::Expr)(this->unexpected()) );
		}
		this->publicModifier = false;
		return modifierExpr;
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("return",b0,a4,2d,09)) ){
		 ::hscript::Expr _hx_tmp3;
		 ::hscript::LToken _hx_tmp4;
		if ((this->token >= this->tokens->length)) {
			_hx_tmp4 = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_hx_tmp4 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		if (::hx::IsPointerEq( _hx_tmp4,::hscript::LToken_obj::LTSemiColon_dyn() )) {
			_hx_tmp3 = null();
		}
		else {
			_hx_tmp3 = this->parseExpr();
		}
		return this->create(::hscript::ExprDef_obj::EReturn(_hx_tmp3));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("static",ae,dc,fb,05)) ){
		this->staticModifier = true;
		 ::hscript::Expr modifierExpr1;
		 ::hscript::LToken _g5;
		if ((this->token >= this->tokens->length)) {
			_g5 = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g5 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		if ((_g5->_hx_getIndex() == 14)) {
			::String _hx_switch_3 = _g5->_hx_getString(0);
			if (  (_hx_switch_3==HX_("final",76,5f,9a,00)) ){
				modifierExpr1 = this->parseKeyword(HX_("final",76,5f,9a,00));
				goto _hx_goto_7;
			}
			if (  (_hx_switch_3==HX_("function",18,ab,52,14)) ){
				modifierExpr1 = this->parseKeyword(HX_("function",18,ab,52,14));
				goto _hx_goto_7;
			}
			if (  (_hx_switch_3==HX_("override",4c,22,28,49)) ){
				modifierExpr1 = this->parseKeyword(HX_("override",4c,22,28,49));
				goto _hx_goto_7;
			}
			if (  (_hx_switch_3==HX_("public",a9,80,f3,66)) ){
				modifierExpr1 = this->parseKeyword(HX_("public",a9,80,f3,66));
				goto _hx_goto_7;
			}
			if (  (_hx_switch_3==HX_("var",e7,de,59,00)) ){
				modifierExpr1 = this->parseKeyword(HX_("var",e7,de,59,00));
				goto _hx_goto_7;
			}
			/* default */{
				modifierExpr1 = ( ( ::hscript::Expr)(this->unexpected()) );
			}
			_hx_goto_7:;
		}
		else {
			modifierExpr1 = ( ( ::hscript::Expr)(this->unexpected()) );
		}
		this->staticModifier = false;
		return modifierExpr1;
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("switch",f4,49,79,c5)) ){
		 ::hscript::Expr expr4 = this->parseExpr();
		::Array< ::Dynamic> cases = ::Array_obj< ::Dynamic>::__new(0);
		 ::hscript::Expr defaultExpr = null();
		this->ensure(::hscript::LToken_obj::LTOpenCB_dyn());
		while(true){
			 ::hscript::LToken _g6;
			if ((this->token >= this->tokens->length)) {
				_g6 = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g6 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			 ::hscript::LToken _g7;
			if ((this->token >= this->tokens->length)) {
				_g7 = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g7 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g6->_hx_getIndex())){
				case (int)5: {
					goto _hx_goto_8;
				}
				break;
				case (int)14: {
					::String _hx_switch_4 = _g6->_hx_getString(0);
					if (  (_hx_switch_4==HX_("case",b0,1e,ba,41)) ){
						if ((_g7->_hx_getIndex() == 15)) {
							if ((_g7->_hx_getString(0) == HX_("_",5f,00,00,00))) {
								if (::hx::IsNotNull( defaultExpr )) {
									this->unexpected();
								}
								 ::hscript::LToken _g8;
								if ((this->token >= this->tokens->length)) {
									_g8 = ::hscript::LToken_obj::LTEof_dyn();
								}
								else {
									_g8 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
								}
								bool _hx_tmp5;
								if ((_g8->_hx_getIndex() == 15)) {
									_hx_tmp5 = true;
								}
								else {
									_hx_tmp5 = false;
								}
								if (_hx_tmp5) {
									this->parseIdent();
								}
								this->ensure(::hscript::LToken_obj::LTColon_dyn());
								::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
								while(true){
									 ::hscript::LToken _g9;
									if ((this->token >= this->tokens->length)) {
										_g9 = ::hscript::LToken_obj::LTEof_dyn();
									}
									else {
										_g9 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
									}
									switch((int)(_g9->_hx_getIndex())){
										case (int)5: {
											goto _hx_goto_10;
										}
										break;
										case (int)14: {
											::String _hx_switch_5 = _g9->_hx_getString(0);
											if (  (_hx_switch_5==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_5==HX_("default",c1,d8,c3,9b)) ){
												goto _hx_goto_10;
												goto _hx_goto_11;
											}
											/* default */{
												this->parseBlock(exprs);
											}
											_hx_goto_11:;
										}
										break;
										case (int)19: {
											goto _hx_goto_10;
										}
										break;
										default:{
											this->parseBlock(exprs);
										}
									}
								}
								_hx_goto_10:;
								if ((exprs->length == 1)) {
									defaultExpr = exprs->__get(0).StaticCast<  ::hscript::Expr >();
								}
								else {
									defaultExpr = this->create(::hscript::ExprDef_obj::EBlock(exprs));
								}
							}
							else {
								 ::hscript::SwitchCase switchCase =  ::hscript::SwitchCase_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(0),null());
								cases->push(switchCase);
								while(true){
									 ::hscript::Expr value1 = this->parseExpr();
									switchCase->values->push(value1);
									{
										 ::hscript::LToken _g10;
										if ((this->token >= this->tokens->length)) {
											_g10 = ::hscript::LToken_obj::LTEof_dyn();
										}
										else {
											_g10 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
										}
										switch((int)(_g10->_hx_getIndex())){
											case (int)6: {
											}
											break;
											case (int)8: {
												goto _hx_goto_12;
											}
											break;
											default:{
												this->unexpected();
												goto _hx_goto_12;
											}
										}
									}
								}
								_hx_goto_12:;
								::Array< ::Dynamic> exprs1 = ::Array_obj< ::Dynamic>::__new(0);
								while(true){
									 ::hscript::LToken _g11;
									if ((this->token >= this->tokens->length)) {
										_g11 = ::hscript::LToken_obj::LTEof_dyn();
									}
									else {
										_g11 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
									}
									switch((int)(_g11->_hx_getIndex())){
										case (int)5: {
											goto _hx_goto_13;
										}
										break;
										case (int)14: {
											::String _hx_switch_6 = _g11->_hx_getString(0);
											if (  (_hx_switch_6==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_6==HX_("default",c1,d8,c3,9b)) ){
												goto _hx_goto_13;
												goto _hx_goto_14;
											}
											/* default */{
												this->parseBlock(exprs1);
											}
											_hx_goto_14:;
										}
										break;
										case (int)19: {
											goto _hx_goto_13;
										}
										break;
										default:{
											this->parseBlock(exprs1);
										}
									}
								}
								_hx_goto_13:;
								 ::hscript::Expr _hx_tmp6;
								if ((exprs1->length == 1)) {
									_hx_tmp6 = exprs1->__get(0).StaticCast<  ::hscript::Expr >();
								}
								else {
									_hx_tmp6 = this->create(::hscript::ExprDef_obj::EBlock(exprs1));
								}
								switchCase->expr = _hx_tmp6;
							}
						}
						else {
							 ::hscript::SwitchCase switchCase1 =  ::hscript::SwitchCase_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(0),null());
							cases->push(switchCase1);
							while(true){
								 ::hscript::Expr value2 = this->parseExpr();
								switchCase1->values->push(value2);
								{
									 ::hscript::LToken _g12;
									if ((this->token >= this->tokens->length)) {
										_g12 = ::hscript::LToken_obj::LTEof_dyn();
									}
									else {
										_g12 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
									}
									switch((int)(_g12->_hx_getIndex())){
										case (int)6: {
										}
										break;
										case (int)8: {
											goto _hx_goto_15;
										}
										break;
										default:{
											this->unexpected();
											goto _hx_goto_15;
										}
									}
								}
							}
							_hx_goto_15:;
							::Array< ::Dynamic> exprs2 = ::Array_obj< ::Dynamic>::__new(0);
							while(true){
								 ::hscript::LToken _g13;
								if ((this->token >= this->tokens->length)) {
									_g13 = ::hscript::LToken_obj::LTEof_dyn();
								}
								else {
									_g13 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
								}
								switch((int)(_g13->_hx_getIndex())){
									case (int)5: {
										goto _hx_goto_16;
									}
									break;
									case (int)14: {
										::String _hx_switch_7 = _g13->_hx_getString(0);
										if (  (_hx_switch_7==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_7==HX_("default",c1,d8,c3,9b)) ){
											goto _hx_goto_16;
											goto _hx_goto_17;
										}
										/* default */{
											this->parseBlock(exprs2);
										}
										_hx_goto_17:;
									}
									break;
									case (int)19: {
										goto _hx_goto_16;
									}
									break;
									default:{
										this->parseBlock(exprs2);
									}
								}
							}
							_hx_goto_16:;
							 ::hscript::Expr _hx_tmp7;
							if ((exprs2->length == 1)) {
								_hx_tmp7 = exprs2->__get(0).StaticCast<  ::hscript::Expr >();
							}
							else {
								_hx_tmp7 = this->create(::hscript::ExprDef_obj::EBlock(exprs2));
							}
							switchCase1->expr = _hx_tmp7;
						}
						goto _hx_goto_9;
					}
					if (  (_hx_switch_4==HX_("default",c1,d8,c3,9b)) ){
						if (::hx::IsNotNull( defaultExpr )) {
							this->unexpected();
						}
						 ::hscript::LToken _g14;
						if ((this->token >= this->tokens->length)) {
							_g14 = ::hscript::LToken_obj::LTEof_dyn();
						}
						else {
							_g14 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
						}
						bool _hx_tmp8;
						if ((_g14->_hx_getIndex() == 15)) {
							_hx_tmp8 = true;
						}
						else {
							_hx_tmp8 = false;
						}
						if (_hx_tmp8) {
							this->parseIdent();
						}
						this->ensure(::hscript::LToken_obj::LTColon_dyn());
						::Array< ::Dynamic> exprs3 = ::Array_obj< ::Dynamic>::__new(0);
						while(true){
							 ::hscript::LToken _g15;
							if ((this->token >= this->tokens->length)) {
								_g15 = ::hscript::LToken_obj::LTEof_dyn();
							}
							else {
								_g15 = this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
							}
							switch((int)(_g15->_hx_getIndex())){
								case (int)5: {
									goto _hx_goto_18;
								}
								break;
								case (int)14: {
									::String _hx_switch_8 = _g15->_hx_getString(0);
									if (  (_hx_switch_8==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_8==HX_("default",c1,d8,c3,9b)) ){
										goto _hx_goto_18;
										goto _hx_goto_19;
									}
									/* default */{
										this->parseBlock(exprs3);
									}
									_hx_goto_19:;
								}
								break;
								case (int)19: {
									goto _hx_goto_18;
								}
								break;
								default:{
									this->parseBlock(exprs3);
								}
							}
						}
						_hx_goto_18:;
						if ((exprs3->length == 1)) {
							defaultExpr = exprs3->__get(0).StaticCast<  ::hscript::Expr >();
						}
						else {
							defaultExpr = this->create(::hscript::ExprDef_obj::EBlock(exprs3));
						}
						goto _hx_goto_9;
					}
					/* default */{
						this->unexpected();
					}
					_hx_goto_9:;
				}
				break;
				default:{
					this->unexpected();
				}
			}
		}
		_hx_goto_8:;
		::Array< ::Dynamic> filteredCases = ::Array_obj< ::Dynamic>::__new(0);
		{
			int _g16 = 0;
			while((_g16 < cases->length)){
				 ::hscript::SwitchCase switchCase2 = cases->__get(_g16).StaticCast<  ::hscript::SwitchCase >();
				_g16 = (_g16 + 1);
				if ((switchCase2->values->length <= 0)) {
					continue;
				}
				{
					 ::hscript::ExprDef _g17 = switchCase2->expr->expr;
					if ((_g17->_hx_getIndex() == 4)) {
						if ((_g17->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->length == 0)) {
							continue;
						}
					}
				}
				filteredCases->push(switchCase2);
			}
		}
		return this->create(::hscript::ExprDef_obj::ESwitch(expr4,filteredCases,defaultExpr));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("throw",26,5d,90,0f)) ){
		return this->create(::hscript::ExprDef_obj::EThrow(this->parseExpr()));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("try",3b,69,58,00)) ){
		 ::hscript::Expr expr5 = this->parseExpr();
		::String varName = null();
		 ::hscript::Expr catchExpr = null();
		if (this->maybe(::hscript::LToken_obj::LTKeyWord(HX_("catch",3b,7c,21,41)))) {
			this->ensure(::hscript::LToken_obj::LTOpenP_dyn());
			varName = this->parseIdent();
			if (this->maybe(::hscript::LToken_obj::LTColon_dyn())) {
				this->parseType();
			}
			this->ensure(::hscript::LToken_obj::LTCloseP_dyn());
			catchExpr = this->parseExpr();
		}
		return this->create(::hscript::ExprDef_obj::ETry(expr5,this->variableID(varName),catchExpr));
		goto _hx_goto_3;
	}
	if (  (_hx_switch_0==HX_("while",b1,43,bd,c9)) ){
		 ::hscript::Expr condition1 = this->parseExpr();
		return this->create(::hscript::ExprDef_obj::EWhile(condition1,this->parseExpr()));
		goto _hx_goto_3;
	}
	/* default */{
		return this->create(::hscript::ExprDef_obj::EIdent(this->variableID(keyword)));
	}
	_hx_goto_3:;
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseKeyword,return )

::String Parser_obj::parseIdent(){
	 ::hscript::LToken token;
	if ((this->token >= this->tokens->length)) {
		token = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		token = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	if ((token->_hx_getIndex() == 15)) {
		return token->_hx_getString(0);
	}
	else {
		this->unexpected();
		return null();
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseIdent,return )

::String Parser_obj::parseType(){
	 ::hscript::LToken _g;
	if ((this->token >= this->tokens->length)) {
		_g = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	switch((int)(_g->_hx_getIndex())){
		case (int)4: {
			while(true){
				 ::hscript::LToken _g1;
				if ((this->token >= this->tokens->length)) {
					_g1 = ::hscript::LToken_obj::LTEof_dyn();
				}
				else {
					_g1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
				}
				switch((int)(_g1->_hx_getIndex())){
					case (int)5: {
						goto _hx_goto_21;
					}
					break;
					case (int)6: {
					}
					break;
					case (int)15: {
						this->ensure(::hscript::LToken_obj::LTColon_dyn());
						this->parseType();
					}
					break;
					default:{
						this->unexpected();
						goto _hx_goto_21;
					}
				}
			}
			_hx_goto_21:;
			return null();
		}
		break;
		case (int)15: {
			::String _g2 = _g->_hx_getString(0);
			::String identifier = _g2;
			if (this->maybe(::hscript::LToken_obj::LTOp(HX_("<",3c,00,00,00)))) {
				while(true){
					 ::hscript::LToken token;
					if ((this->token >= this->tokens->length)) {
						token = ::hscript::LToken_obj::LTEof_dyn();
					}
					else {
						token = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
					}
					switch((int)(token->_hx_getIndex())){
						case (int)4: {
							while(true){
								 ::hscript::LToken _g3;
								if ((this->token >= this->tokens->length)) {
									_g3 = ::hscript::LToken_obj::LTEof_dyn();
								}
								else {
									_g3 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
								}
								switch((int)(_g3->_hx_getIndex())){
									case (int)5: {
										goto _hx_goto_23;
									}
									break;
									case (int)6: {
									}
									break;
									case (int)15: {
										this->ensure(::hscript::LToken_obj::LTColon_dyn());
										this->parseType();
									}
									break;
									default:{
										this->unexpected();
										goto _hx_goto_23;
									}
								}
							}
							_hx_goto_23:;
						}
						break;
						case (int)6: {
						}
						break;
						case (int)13: {
							::String _g4 = token->_hx_getString(0);
							::String _hx_switch_0 = _g4;
							if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
								while(true){
									 ::hscript::LToken token1;
									if ((this->token >= this->tokens->length)) {
										token1 = ::hscript::LToken_obj::LTEof_dyn();
									}
									else {
										token1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
									}
									switch((int)(token1->_hx_getIndex())){
										case (int)4: {
											while(true){
												 ::hscript::LToken _g5;
												if ((this->token >= this->tokens->length)) {
													_g5 = ::hscript::LToken_obj::LTEof_dyn();
												}
												else {
													_g5 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
												}
												switch((int)(_g5->_hx_getIndex())){
													case (int)5: {
														goto _hx_goto_27;
													}
													break;
													case (int)6: {
													}
													break;
													case (int)15: {
														this->ensure(::hscript::LToken_obj::LTColon_dyn());
														this->parseType();
													}
													break;
													default:{
														this->unexpected();
														goto _hx_goto_27;
													}
												}
											}
											_hx_goto_27:;
										}
										break;
										case (int)6: {
										}
										break;
										case (int)13: {
											::String _g6 = token1->_hx_getString(0);
											::String _hx_switch_1 = _g6;
											if (  (_hx_switch_1==HX_("<",3c,00,00,00)) ){
												this->parseClassArgs();
												goto _hx_goto_29;
											}
											if (  (_hx_switch_1==HX_(">",3e,00,00,00)) ){
												goto _hx_goto_26;
												goto _hx_goto_29;
											}
											/* default */{
												::String stringOP = _g6;
												bool _hx_tmp;
												if ((stringOP.length > 1)) {
													_hx_tmp = ::hx::IsEq( stringOP.charCodeAt(0),62 );
												}
												else {
													_hx_tmp = false;
												}
												if (_hx_tmp) {
													 ::Dynamic tokenPos;
													bool tokenPos1;
													if (((this->token - 1) >= 0)) {
														tokenPos1 = ((this->token - 1) >= this->tokens->length);
													}
													else {
														tokenPos1 = true;
													}
													if (tokenPos1) {
														tokenPos =  ::Dynamic(::hx::Anon_obj::Create(4)
															->setFixed(0,HX_("max",a4,0a,53,00),0)
															->setFixed(1,HX_("min",92,11,53,00),0)
															->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
															->setFixed(3,HX_("line",f4,17,b3,47),0));
													}
													else {
														tokenPos = this->tokens->__get((this->token - 1));
													}
													if ((this->token > 0)) {
														this->token--;
													}
													else {
														this->token = 0;
													}
													this->tokens->__get(this->token)->__SetField(HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)),::hx::paccDynamic);
													{
														int _g7 = 0;
														int _g8 = (stringOP.length - 1);
														while((_g7 < _g8)){
															_g7 = (_g7 + 1);
															this->tokens->insert(this->token, ::Dynamic(::hx::Anon_obj::Create(4)
																->setFixed(0,HX_("max",a4,0a,53,00), ::Dynamic(tokenPos->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)))
																->setFixed(1,HX_("min",92,11,53,00), ::Dynamic(tokenPos->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)))
																->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)))
																->setFixed(3,HX_("line",f4,17,b3,47), ::Dynamic(tokenPos->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)))));
														}
													}
												}
											}
											_hx_goto_29:;
										}
										break;
										case (int)15: {
										}
										break;
										default:{
											this->expected(::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)));
										}
									}
								}
								_hx_goto_26:;
								goto _hx_goto_25;
							}
							if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
								goto _hx_goto_22;
								goto _hx_goto_25;
							}
							/* default */{
								::String stringOP1 = _g4;
								bool _hx_tmp1;
								if ((stringOP1.length > 1)) {
									_hx_tmp1 = ::hx::IsEq( stringOP1.charCodeAt(0),62 );
								}
								else {
									_hx_tmp1 = false;
								}
								if (_hx_tmp1) {
									 ::Dynamic tokenPos2;
									bool tokenPos3;
									if (((this->token - 1) >= 0)) {
										tokenPos3 = ((this->token - 1) >= this->tokens->length);
									}
									else {
										tokenPos3 = true;
									}
									if (tokenPos3) {
										tokenPos2 =  ::Dynamic(::hx::Anon_obj::Create(4)
											->setFixed(0,HX_("max",a4,0a,53,00),0)
											->setFixed(1,HX_("min",92,11,53,00),0)
											->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
											->setFixed(3,HX_("line",f4,17,b3,47),0));
									}
									else {
										tokenPos2 = this->tokens->__get((this->token - 1));
									}
									if ((this->token > 0)) {
										this->token--;
									}
									else {
										this->token = 0;
									}
									this->tokens->__get(this->token)->__SetField(HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)),::hx::paccDynamic);
									{
										int _g9 = 0;
										int _g10 = (stringOP1.length - 1);
										while((_g9 < _g10)){
											_g9 = (_g9 + 1);
											this->tokens->insert(this->token, ::Dynamic(::hx::Anon_obj::Create(4)
												->setFixed(0,HX_("max",a4,0a,53,00), ::Dynamic(tokenPos2->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)))
												->setFixed(1,HX_("min",92,11,53,00), ::Dynamic(tokenPos2->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)))
												->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)))
												->setFixed(3,HX_("line",f4,17,b3,47), ::Dynamic(tokenPos2->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)))));
										}
									}
								}
							}
							_hx_goto_25:;
						}
						break;
						case (int)15: {
						}
						break;
						default:{
							this->expected(::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)));
						}
					}
				}
				_hx_goto_22:;
			}
			if (this->maybe(::hscript::LToken_obj::LTOp(HX_("->",71,27,00,00)))) {
				identifier = (_g2 + (HX_("->",71,27,00,00) + this->parseType()));
			}
			return identifier;
		}
		break;
		default:{
			this->unexpected();
			if ((this->token > 0)) {
				this->token--;
			}
			else {
				this->token = 0;
			}
			return null();
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseType,return )

::String Parser_obj::parseClassName(){
	::Array< ::String > identifiers = ::Array_obj< ::String >::__new(0);
	identifiers->push(this->parseIdent());
	while(true){
		 ::hscript::LToken _g;
		if ((this->token >= this->tokens->length)) {
			_g = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		switch((int)(_g->_hx_getIndex())){
			case (int)0: {
				goto _hx_goto_30;
			}
			break;
			case (int)7: {
				identifiers->push(this->parseIdent());
			}
			break;
			case (int)13: {
				if ((_g->_hx_getString(0) == HX_("<",3c,00,00,00))) {
					while(true){
						 ::hscript::LToken token;
						if ((this->token >= this->tokens->length)) {
							token = ::hscript::LToken_obj::LTEof_dyn();
						}
						else {
							token = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
						}
						switch((int)(token->_hx_getIndex())){
							case (int)4: {
								while(true){
									 ::hscript::LToken _g1;
									if ((this->token >= this->tokens->length)) {
										_g1 = ::hscript::LToken_obj::LTEof_dyn();
									}
									else {
										_g1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
									}
									switch((int)(_g1->_hx_getIndex())){
										case (int)5: {
											goto _hx_goto_32;
										}
										break;
										case (int)6: {
										}
										break;
										case (int)15: {
											this->ensure(::hscript::LToken_obj::LTColon_dyn());
											this->parseType();
										}
										break;
										default:{
											this->unexpected();
											goto _hx_goto_32;
										}
									}
								}
								_hx_goto_32:;
							}
							break;
							case (int)6: {
							}
							break;
							case (int)13: {
								::String _g2 = token->_hx_getString(0);
								::String _hx_switch_0 = _g2;
								if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
									while(true){
										 ::hscript::LToken token1;
										if ((this->token >= this->tokens->length)) {
											token1 = ::hscript::LToken_obj::LTEof_dyn();
										}
										else {
											token1 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
										}
										switch((int)(token1->_hx_getIndex())){
											case (int)4: {
												while(true){
													 ::hscript::LToken _g3;
													if ((this->token >= this->tokens->length)) {
														_g3 = ::hscript::LToken_obj::LTEof_dyn();
													}
													else {
														_g3 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
													}
													switch((int)(_g3->_hx_getIndex())){
														case (int)5: {
															goto _hx_goto_36;
														}
														break;
														case (int)6: {
														}
														break;
														case (int)15: {
															this->ensure(::hscript::LToken_obj::LTColon_dyn());
															this->parseType();
														}
														break;
														default:{
															this->unexpected();
															goto _hx_goto_36;
														}
													}
												}
												_hx_goto_36:;
											}
											break;
											case (int)6: {
											}
											break;
											case (int)13: {
												::String _g4 = token1->_hx_getString(0);
												::String _hx_switch_1 = _g4;
												if (  (_hx_switch_1==HX_("<",3c,00,00,00)) ){
													this->parseClassArgs();
													goto _hx_goto_38;
												}
												if (  (_hx_switch_1==HX_(">",3e,00,00,00)) ){
													goto _hx_goto_35;
													goto _hx_goto_38;
												}
												/* default */{
													::String stringOP = _g4;
													bool _hx_tmp;
													if ((stringOP.length > 1)) {
														_hx_tmp = ::hx::IsEq( stringOP.charCodeAt(0),62 );
													}
													else {
														_hx_tmp = false;
													}
													if (_hx_tmp) {
														 ::Dynamic tokenPos;
														bool tokenPos1;
														if (((this->token - 1) >= 0)) {
															tokenPos1 = ((this->token - 1) >= this->tokens->length);
														}
														else {
															tokenPos1 = true;
														}
														if (tokenPos1) {
															tokenPos =  ::Dynamic(::hx::Anon_obj::Create(4)
																->setFixed(0,HX_("max",a4,0a,53,00),0)
																->setFixed(1,HX_("min",92,11,53,00),0)
																->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
																->setFixed(3,HX_("line",f4,17,b3,47),0));
														}
														else {
															tokenPos = this->tokens->__get((this->token - 1));
														}
														if ((this->token > 0)) {
															this->token--;
														}
														else {
															this->token = 0;
														}
														this->tokens->__get(this->token)->__SetField(HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)),::hx::paccDynamic);
														{
															int _g5 = 0;
															int _g6 = (stringOP.length - 1);
															while((_g5 < _g6)){
																_g5 = (_g5 + 1);
																this->tokens->insert(this->token, ::Dynamic(::hx::Anon_obj::Create(4)
																	->setFixed(0,HX_("max",a4,0a,53,00), ::Dynamic(tokenPos->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)))
																	->setFixed(1,HX_("min",92,11,53,00), ::Dynamic(tokenPos->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)))
																	->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)))
																	->setFixed(3,HX_("line",f4,17,b3,47), ::Dynamic(tokenPos->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)))));
															}
														}
													}
												}
												_hx_goto_38:;
											}
											break;
											case (int)15: {
											}
											break;
											default:{
												this->expected(::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)));
											}
										}
									}
									_hx_goto_35:;
									goto _hx_goto_34;
								}
								if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
									goto _hx_goto_31;
									goto _hx_goto_34;
								}
								/* default */{
									::String stringOP1 = _g2;
									bool _hx_tmp1;
									if ((stringOP1.length > 1)) {
										_hx_tmp1 = ::hx::IsEq( stringOP1.charCodeAt(0),62 );
									}
									else {
										_hx_tmp1 = false;
									}
									if (_hx_tmp1) {
										 ::Dynamic tokenPos2;
										bool tokenPos3;
										if (((this->token - 1) >= 0)) {
											tokenPos3 = ((this->token - 1) >= this->tokens->length);
										}
										else {
											tokenPos3 = true;
										}
										if (tokenPos3) {
											tokenPos2 =  ::Dynamic(::hx::Anon_obj::Create(4)
												->setFixed(0,HX_("max",a4,0a,53,00),0)
												->setFixed(1,HX_("min",92,11,53,00),0)
												->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
												->setFixed(3,HX_("line",f4,17,b3,47),0));
										}
										else {
											tokenPos2 = this->tokens->__get((this->token - 1));
										}
										if ((this->token > 0)) {
											this->token--;
										}
										else {
											this->token = 0;
										}
										this->tokens->__get(this->token)->__SetField(HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)),::hx::paccDynamic);
										{
											int _g7 = 0;
											int _g8 = (stringOP1.length - 1);
											while((_g7 < _g8)){
												_g7 = (_g7 + 1);
												this->tokens->insert(this->token, ::Dynamic(::hx::Anon_obj::Create(4)
													->setFixed(0,HX_("max",a4,0a,53,00), ::Dynamic(tokenPos2->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)))
													->setFixed(1,HX_("min",92,11,53,00), ::Dynamic(tokenPos2->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)))
													->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)))
													->setFixed(3,HX_("line",f4,17,b3,47), ::Dynamic(tokenPos2->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)))));
											}
										}
									}
								}
								_hx_goto_34:;
							}
							break;
							case (int)15: {
							}
							break;
							default:{
								this->expected(::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)));
							}
						}
					}
					_hx_goto_31:;
				}
				else {
					this->unexpected();
					goto _hx_goto_30;
				}
			}
			break;
			default:{
				this->unexpected();
				goto _hx_goto_30;
			}
		}
	}
	_hx_goto_30:;
	return identifiers->join(HX_(".",2e,00,00,00));
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseClassName,return )

void Parser_obj::parseClassArgs(){
	while(true){
		 ::hscript::LToken token;
		if ((this->token >= this->tokens->length)) {
			token = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			token = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		switch((int)(token->_hx_getIndex())){
			case (int)4: {
				while(true){
					 ::hscript::LToken _g;
					if ((this->token >= this->tokens->length)) {
						_g = ::hscript::LToken_obj::LTEof_dyn();
					}
					else {
						_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
					}
					switch((int)(_g->_hx_getIndex())){
						case (int)5: {
							goto _hx_goto_40;
						}
						break;
						case (int)6: {
						}
						break;
						case (int)15: {
							this->ensure(::hscript::LToken_obj::LTColon_dyn());
							this->parseType();
						}
						break;
						default:{
							this->unexpected();
							goto _hx_goto_40;
						}
					}
				}
				_hx_goto_40:;
			}
			break;
			case (int)6: {
			}
			break;
			case (int)13: {
				::String _g1 = token->_hx_getString(0);
				::String _hx_switch_0 = _g1;
				if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
					this->parseClassArgs();
					goto _hx_goto_42;
				}
				if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
					goto _hx_goto_39;
					goto _hx_goto_42;
				}
				/* default */{
					::String stringOP = _g1;
					bool _hx_tmp;
					if ((stringOP.length > 1)) {
						_hx_tmp = ::hx::IsEq( stringOP.charCodeAt(0),62 );
					}
					else {
						_hx_tmp = false;
					}
					if (_hx_tmp) {
						 ::Dynamic tokenPos;
						bool tokenPos1;
						if (((this->token - 1) >= 0)) {
							tokenPos1 = ((this->token - 1) >= this->tokens->length);
						}
						else {
							tokenPos1 = true;
						}
						if (tokenPos1) {
							tokenPos =  ::Dynamic(::hx::Anon_obj::Create(4)
								->setFixed(0,HX_("max",a4,0a,53,00),0)
								->setFixed(1,HX_("min",92,11,53,00),0)
								->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
								->setFixed(3,HX_("line",f4,17,b3,47),0));
						}
						else {
							tokenPos = this->tokens->__get((this->token - 1));
						}
						if ((this->token > 0)) {
							this->token--;
						}
						else {
							this->token = 0;
						}
						this->tokens->__get(this->token)->__SetField(HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)),::hx::paccDynamic);
						{
							int _g2 = 0;
							int _g3 = (stringOP.length - 1);
							while((_g2 < _g3)){
								_g2 = (_g2 + 1);
								this->tokens->insert(this->token, ::Dynamic(::hx::Anon_obj::Create(4)
									->setFixed(0,HX_("max",a4,0a,53,00), ::Dynamic(tokenPos->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)))
									->setFixed(1,HX_("min",92,11,53,00), ::Dynamic(tokenPos->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)))
									->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)))
									->setFixed(3,HX_("line",f4,17,b3,47), ::Dynamic(tokenPos->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)))));
							}
						}
					}
				}
				_hx_goto_42:;
			}
			break;
			case (int)15: {
			}
			break;
			default:{
				this->expected(::hscript::LToken_obj::LTOp(HX_(">",3e,00,00,00)));
			}
		}
	}
	_hx_goto_39:;
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseClassArgs,(void))

void Parser_obj::parseStructureType(){
	while(true){
		 ::hscript::LToken _g;
		if ((this->token >= this->tokens->length)) {
			_g = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		switch((int)(_g->_hx_getIndex())){
			case (int)5: {
				goto _hx_goto_43;
			}
			break;
			case (int)6: {
			}
			break;
			case (int)15: {
				this->ensure(::hscript::LToken_obj::LTColon_dyn());
				this->parseType();
			}
			break;
			default:{
				this->unexpected();
				goto _hx_goto_43;
			}
		}
	}
	_hx_goto_43:;
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseStructureType,(void))

::Array< ::Dynamic> Parser_obj::parseParentheses(){
	::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(0);
	if (this->maybe(::hscript::LToken_obj::LTCloseP_dyn())) {
		return args;
	}
	while(true){
		args->push(this->parseExpr());
		{
			 ::hscript::LToken _g;
			if ((this->token >= this->tokens->length)) {
				_g = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g->_hx_getIndex())){
				case (int)1: {
					goto _hx_goto_44;
				}
				break;
				case (int)6: {
				}
				break;
				default:{
					this->unexpected();
					goto _hx_goto_44;
				}
			}
		}
	}
	_hx_goto_44:;
	return args;
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseParentheses,return )

 ::hscript::Expr Parser_obj::parsePreprocess(::String id){
	::String _hx_switch_0 = id;
	if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ||  (_hx_switch_0==HX_("elseif",d6,a0,a2,dd)) ||  (_hx_switch_0==HX_("end",db,03,4d,00)) ){
		this->error(::hscript::ErrorDef_obj::EInvalidPreprocessor((HX_("Invalid #",9a,c2,00,23) + id)));
		goto _hx_goto_45;
	}
	if (  (_hx_switch_0==HX_("error",c8,cb,29,73)) ){
		this->error(::hscript::ErrorDef_obj::ECustom(this->getPreprocessError()));
		goto _hx_goto_45;
	}
	if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
		::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
		this->parsePreprocessBlock(exprs,this->parsePreprocessCond(null()));
		return this->create(::hscript::ExprDef_obj::EBlock(exprs));
		goto _hx_goto_45;
	}
	/* default */{
		this->error(::hscript::ErrorDef_obj::EInvalidPreprocessor((HX_("Unknown preprocessor #",88,02,ab,b3) + id)));
	}
	_hx_goto_45:;
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parsePreprocess,return )

void Parser_obj::parsePreprocessBlock(::Array< ::Dynamic> exprs,bool active){
	int oldVariablesListSize = this->variablesList->length;
	while(true){
		 ::hscript::LToken _g;
		if ((this->token >= this->tokens->length)) {
			_g = ::hscript::LToken_obj::LTEof_dyn();
		}
		else {
			_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
		}
		switch((int)(_g->_hx_getIndex())){
			case (int)18: {
				::String _hx_switch_0 = _g->_hx_getString(0);
				if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
					this->parsePreprocessBlock(exprs,!(active));
					goto _hx_goto_46;
					goto _hx_goto_47;
				}
				if (  (_hx_switch_0==HX_("elseif",d6,a0,a2,dd)) ){
					this->parsePreprocessBlock(exprs,this->parsePreprocessCond(active));
					goto _hx_goto_46;
					goto _hx_goto_47;
				}
				if (  (_hx_switch_0==HX_("end",db,03,4d,00)) ){
					goto _hx_goto_46;
					goto _hx_goto_47;
				}
				/* default */{
					if ((this->token > 0)) {
						this->token--;
					}
					else {
						this->token = 0;
					}
					::Array< ::Dynamic> _hx_tmp;
					if (active) {
						_hx_tmp = exprs;
					}
					else {
						_hx_tmp = null();
					}
					this->parseBlock(_hx_tmp);
				}
				_hx_goto_47:;
			}
			break;
			case (int)19: {
				this->error(::hscript::ErrorDef_obj::EInvalidPreprocessor(HX_("Unclosed preprocessor",ea,f0,fc,d7)));
				goto _hx_goto_46;
			}
			break;
			default:{
				if ((this->token > 0)) {
					this->token--;
				}
				else {
					this->token = 0;
				}
				::Array< ::Dynamic> _hx_tmp1;
				if (active) {
					_hx_tmp1 = exprs;
				}
				else {
					_hx_tmp1 = null();
				}
				this->parseBlock(_hx_tmp1);
			}
		}
	}
	_hx_goto_46:;
	if (!(active)) {
		this->variablesList->resize(oldVariablesListSize);
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parsePreprocessBlock,(void))

bool Parser_obj::parsePreprocessCond(::hx::Null< bool >  __o_nullify){
	bool nullify = __o_nullify.Default(false);
	int oldVariablesListSize = this->variablesList->length;
	 ::hscript::Expr condition = this->parseExpr();
	bool evaluation;
	if (!(nullify)) {
		evaluation = ( (bool)(this->evalPreprocessCond(condition)) );
	}
	else {
		evaluation = false;
	}
	this->variablesList->resize(oldVariablesListSize);
	return evaluation;
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parsePreprocessCond,return )

::String Parser_obj::getPreprocessError(){
	int oldVariablesListSize = this->variablesList->length;
	this->variablesList->resize(oldVariablesListSize);
	 ::hscript::LToken _g;
	if ((this->token >= this->tokens->length)) {
		_g = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	if ((_g->_hx_getIndex() == 16)) {
		 ::hscript::LConst _g1 = _g->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
		if ((_g1->_hx_getIndex() == 2)) {
			return _g1->_hx_getString(0);
		}
		else {
			if ((this->token > 0)) {
				this->token--;
			}
			else {
				this->token = 0;
			}
			return HX_("Not implemented for current platform",5c,72,62,72);
		}
	}
	else {
		if ((this->token > 0)) {
			this->token--;
		}
		else {
			this->token = 0;
		}
		return HX_("Not implemented for current platform",5c,72,62,72);
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,getPreprocessError,return )

 ::Dynamic Parser_obj::evalPreprocessCond( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			 ::hscript::LConst _g1 = _g->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
			switch((int)(_g1->_hx_getIndex())){
				case (int)0: {
					return _g1->_hx_getInt(0);
				}
				break;
				case (int)1: {
					return _g1->_hx_getFloat(0);
				}
				break;
				case (int)2: {
					return _g1->_hx_getString(0);
				}
				break;
				case (int)3: {
					return _g1->_hx_getBool(0);
				}
				break;
				case (int)4: {
					return null();
				}
				break;
			}
		}
		break;
		case (int)1: {
			return this->preprocesorValues->get(this->variablesList->__get(_g->_hx_getInt(0)));
		}
		break;
		case (int)3: {
			return this->evalPreprocessCond(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)6: {
			 ::Dynamic val1 = this->evalPreprocessCond(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			 ::Dynamic val2 = this->evalPreprocessCond(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
			unsigned char _hx_switch_0 = ( (unsigned char)(_g->_hx_getInt(0)) );
			if (  (_hx_switch_0==( (unsigned char)(0) )) ){
				return (val1 + val2);
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(1) )) ){
				return (( (Float)(val1) ) - ( (Float)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(2) )) ){
				return (( (Float)(val1) ) * ( (Float)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(3) )) ){
				return (( (Float)(val1) ) / ( (Float)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(4) )) ){
				return ::hx::Mod(val1,val2);
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(5) )) ){
				return (( (int)(val1) ) & ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(6) )) ){
				return (( (int)(val1) ) | ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(7) )) ){
				return (( (int)(val1) ) ^ ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(8) )) ){
				return (( (int)(val1) ) << ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(9) )) ){
				return (( (int)(val1) ) >> ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(10) )) ){
				return ::hx::UShr(( (int)(val1) ),( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(11) )) ){
				return ::hx::IsEq( val1,val2 );
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(12) )) ){
				return ::hx::IsNotEq( val1,val2 );
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(13) )) ){
				return ::hx::IsGreaterEq( val1,val2 );
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(14) )) ){
				return ::hx::IsLessEq( val1,val2 );
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(15) )) ){
				return ::hx::IsGreater( val1,val2 );
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(16) )) ){
				return ::hx::IsLess( val1,val2 );
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(17) )) ){
				if (!(( (bool)(val1) ))) {
					return val2;
				}
				else {
					return true;
				}
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(18) )) ){
				if (( (bool)(val1) )) {
					return val2;
				}
				else {
					return false;
				}
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(19) )) ){
				return ::Std_obj::isOfType(val1,val2);
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(20) )) ){
				 ::Dynamic tmp = val1;
				if (::hx::IsNotNull( tmp )) {
					return tmp;
				}
				else {
					return val2;
				}
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(21) )) ){
				return  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(val1) ),( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(22) )) ||  (_hx_switch_0==( (unsigned char)(23) )) ){
				return null();
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(24) )) ){
				return (val1 + val2);
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(25) )) ){
				return (( (Float)(val1) ) - ( (Float)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(26) )) ){
				return (( (Float)(val1) ) * ( (Float)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(27) )) ){
				return (( (Float)(val1) ) / ( (Float)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(28) )) ){
				return ::hx::Mod(val1,val2);
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(29) )) ){
				return (( (int)(val1) ) << ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(30) )) ){
				return (( (int)(val1) ) >> ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(31) )) ){
				return ::hx::UShr(( (int)(val1) ),( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(32) )) ){
				return (( (int)(val1) ) | ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(33) )) ){
				return (( (int)(val1) ) & ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(34) )) ){
				return (( (int)(val1) ) ^ ( (int)(val2) ));
				goto _hx_goto_48;
			}
			if (  (_hx_switch_0==( (unsigned char)(35) )) ){
				 ::Dynamic tmp1 = val1;
				if (::hx::IsNotNull( tmp1 )) {
					return tmp1;
				}
				else {
					return val2;
				}
				goto _hx_goto_48;
			}
			_hx_goto_48:;
		}
		break;
		default:{
			return false;
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,evalPreprocessCond,return )

 ::hscript::Expr Parser_obj::parseBinop(unsigned char op, ::hscript::Expr left, ::hscript::Expr right){
	if (::hx::IsNull( right )) {
		return this->create(::hscript::ExprDef_obj::EBinop(op,left,right));
	}
	 ::hscript::ExprDef _g = right->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)6: {
			unsigned char _g1 = ( (unsigned char)(_g->_hx_getInt(0)) );
			bool _hx_tmp;
			if ((::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE_LOOKUP->__get(( (int)(op) )) <= ::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE_LOOKUP->__get(( (int)(_g1) )))) {
				_hx_tmp = !(::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE_RIGHT_ASSOCIATION->__get(( (int)(op) )));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				return this->create(::hscript::ExprDef_obj::EBinop(_g1,this->parseBinop(op,left,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >()),_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
			}
			else {
				return this->create(::hscript::ExprDef_obj::EBinop(op,left,right));
			}
		}
		break;
		case (int)24: {
			if (::hscript::_Ast::ExprBinop_Impl__obj::OP_PRECEDENCE_RIGHT_ASSOCIATION->__get(( (int)(op) ))) {
				return this->create(::hscript::ExprDef_obj::EBinop(op,left,right));
			}
			else {
				return this->create(::hscript::ExprDef_obj::ETernary(this->parseBinop(op,left,_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()),_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
			}
		}
		break;
		default:{
			return this->create(::hscript::ExprDef_obj::EBinop(op,left,right));
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,parseBinop,return )

 ::hscript::Expr Parser_obj::parseUnop(unsigned char unop, ::hscript::Expr expr){
	if (::hx::IsNull( expr )) {
		return null();
	}
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)6: {
			return this->create(::hscript::ExprDef_obj::EBinop(_g->_hx_getInt(0),this->parseUnop(unop,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >()),_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)24: {
			return this->create(::hscript::ExprDef_obj::ETernary(this->parseUnop(unop,_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()),_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >()));
		}
		break;
		default:{
			return this->create(::hscript::ExprDef_obj::EUnop(unop,true,expr));
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseUnop,return )

 ::hscript::Expr Parser_obj::parseArrayComprehensions(int temp, ::hscript::Expr expr){
	if (::hx::IsNull( expr )) {
		return null();
	}
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)3: {
			return this->create(::hscript::ExprDef_obj::EParent(this->parseArrayComprehensions(temp,_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g1 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			if ((_g1->length == 1)) {
				return this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,this->parseArrayComprehensions(temp,_g1->__get(0).StaticCast<  ::hscript::Expr >()))));
			}
			else {
				return this->create(::hscript::ExprDef_obj::ECall(this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("push",da,11,61,4a),null())),::Array_obj< ::Dynamic>::__new(1)->init(0,expr)));
			}
		}
		break;
		case (int)9: {
			 ::hscript::Expr _hx_tmp = this->parseArrayComprehensions(temp,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			return this->create(::hscript::ExprDef_obj::EIf(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),_hx_tmp,this->parseArrayComprehensions(temp,_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)10: {
			return this->create(::hscript::ExprDef_obj::EWhile(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),this->parseArrayComprehensions(temp,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)11: {
			return this->create(::hscript::ExprDef_obj::EFor(_g->_hx_getInt(0),_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),this->parseArrayComprehensions(temp,_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)12: {
			return this->create(::hscript::ExprDef_obj::EForKeyValue(_g->_hx_getInt(0),_g->_hx_getInt(1),_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),this->parseArrayComprehensions(temp,_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)26: {
			return this->create(::hscript::ExprDef_obj::EDoWhile(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),this->parseArrayComprehensions(temp,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >())));
		}
		break;
		default:{
			return this->create(::hscript::ExprDef_obj::ECall(this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("push",da,11,61,4a),null())),::Array_obj< ::Dynamic>::__new(1)->init(0,expr)));
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseArrayComprehensions,return )

 ::hscript::Expr Parser_obj::parseMapComprehensions(int temp, ::hscript::Expr expr){
	if (::hx::IsNull( expr )) {
		return null();
	}
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)3: {
			return this->create(::hscript::ExprDef_obj::EParent(this->parseMapComprehensions(temp,_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g1 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			if ((_g1->length == 1)) {
				return this->create(::hscript::ExprDef_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,this->parseMapComprehensions(temp,_g1->__get(0).StaticCast<  ::hscript::Expr >()))));
			}
			else {
				 ::hscript::ExprDef _g2 = expr->expr;
				if ((_g2->_hx_getIndex() == 6)) {
					if ((_g2->_hx_getInt(0) == 22)) {
						return this->create(::hscript::ExprDef_obj::ECall(this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("set",a2,9b,57,00),null())),::Array_obj< ::Dynamic>::__new(2)->init(0,_g2->_hx_getObject(1).StaticCast<  ::hscript::Expr >())->init(1,_g2->_hx_getObject(2).StaticCast<  ::hscript::Expr >())));
					}
					else {
						 ::hscript::Expr _hx_tmp = this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("set",a2,9b,57,00),null()));
						return this->create(::hscript::ExprDef_obj::ECall(_hx_tmp,::Array_obj< ::Dynamic>::__new(2)->init(0,expr)->init(1,this->create(::hscript::ExprDef_obj::EIdent(this->variableID(HX_("null",87,9e,0e,49)))))));
					}
				}
				else {
					 ::hscript::Expr _hx_tmp1 = this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("set",a2,9b,57,00),null()));
					return this->create(::hscript::ExprDef_obj::ECall(_hx_tmp1,::Array_obj< ::Dynamic>::__new(2)->init(0,expr)->init(1,this->create(::hscript::ExprDef_obj::EIdent(this->variableID(HX_("null",87,9e,0e,49)))))));
				}
			}
		}
		break;
		case (int)9: {
			 ::hscript::Expr _hx_tmp2 = this->parseMapComprehensions(temp,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			return this->create(::hscript::ExprDef_obj::EIf(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),_hx_tmp2,this->parseMapComprehensions(temp,_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)10: {
			return this->create(::hscript::ExprDef_obj::EWhile(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),this->parseMapComprehensions(temp,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)11: {
			return this->create(::hscript::ExprDef_obj::EFor(_g->_hx_getInt(0),_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),this->parseMapComprehensions(temp,_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)12: {
			return this->create(::hscript::ExprDef_obj::EForKeyValue(_g->_hx_getInt(0),_g->_hx_getInt(1),_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >(),this->parseMapComprehensions(temp,_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >())));
		}
		break;
		case (int)26: {
			return this->create(::hscript::ExprDef_obj::EDoWhile(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >(),this->parseMapComprehensions(temp,_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >())));
		}
		break;
		default:{
			 ::hscript::ExprDef _g3 = expr->expr;
			if ((_g3->_hx_getIndex() == 6)) {
				if ((_g3->_hx_getInt(0) == 22)) {
					return this->create(::hscript::ExprDef_obj::ECall(this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("set",a2,9b,57,00),null())),::Array_obj< ::Dynamic>::__new(2)->init(0,_g3->_hx_getObject(1).StaticCast<  ::hscript::Expr >())->init(1,_g3->_hx_getObject(2).StaticCast<  ::hscript::Expr >())));
				}
				else {
					 ::hscript::Expr _hx_tmp3 = this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("set",a2,9b,57,00),null()));
					return this->create(::hscript::ExprDef_obj::ECall(_hx_tmp3,::Array_obj< ::Dynamic>::__new(2)->init(0,expr)->init(1,this->create(::hscript::ExprDef_obj::EIdent(this->variableID(HX_("null",87,9e,0e,49)))))));
				}
			}
			else {
				 ::hscript::Expr _hx_tmp4 = this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(temp)),HX_("set",a2,9b,57,00),null()));
				return this->create(::hscript::ExprDef_obj::ECall(_hx_tmp4,::Array_obj< ::Dynamic>::__new(2)->init(0,expr)->init(1,this->create(::hscript::ExprDef_obj::EIdent(this->variableID(HX_("null",87,9e,0e,49)))))));
			}
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseMapComprehensions,return )

bool Parser_obj::isMapComprehension( ::hscript::Expr expr){
	if (::hx::IsNull( expr )) {
		return false;
	}
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)3: {
			return this->isMapComprehension(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g1 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			if ((_g1->length == 1)) {
				return this->isMapComprehension(_g1->__get(0).StaticCast<  ::hscript::Expr >());
			}
			else {
				return false;
			}
		}
		break;
		case (int)6: {
			if ((_g->_hx_getInt(0) == 22)) {
				return true;
			}
			else {
				return false;
			}
		}
		break;
		case (int)9: {
			 ::hscript::Expr _g2 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g3 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			if (::hx::IsNull( _g3 )) {
				return this->isMapComprehension(_g2);
			}
			else {
				if (::hx::IsNotNull( _g3 )) {
					if (this->isMapComprehension(_g2)) {
						return this->isMapComprehension(_g3);
					}
					else {
						return false;
					}
				}
				else {
					return false;
				}
			}
		}
		break;
		case (int)10: {
			return this->isMapComprehension(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)11: {
			return this->isMapComprehension(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)12: {
			return this->isMapComprehension(_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)26: {
			return this->isMapComprehension(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
		}
		break;
		default:{
			return false;
		}
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isMapComprehension,return )

::Array< ::Dynamic> Parser_obj::parseFunctionArgs(::Array< ::Dynamic> args){
            	HX_JUST_GC_STACKFRAME
	if (::hx::IsNull( args )) {
		args = ::Array_obj< ::Dynamic>::__new(0);
	}
	if (this->maybe(::hscript::LToken_obj::LTCloseP_dyn())) {
		return args;
	}
	while(true){
		 ::hscript::Argument argument =  ::hscript::Argument_obj::__alloc( HX_CTX ,-1,null(),null());
		if (this->maybe(::hscript::LToken_obj::LTQuestion_dyn())) {
			argument->opt = true;
		}
		argument->name = this->variableID(this->parseIdent());
		if (this->maybe(::hscript::LToken_obj::LTColon_dyn())) {
			this->parseType();
		}
		if (this->maybe(::hscript::LToken_obj::LTOp(HX_("=",3d,00,00,00)))) {
			argument->value = this->parseExpr();
		}
		args->push(argument);
		{
			 ::hscript::LToken _g;
			if ((this->token >= this->tokens->length)) {
				_g = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g->_hx_getIndex())){
				case (int)1: {
					goto _hx_goto_49;
				}
				break;
				case (int)6: {
				}
				break;
				default:{
					this->unexpected();
					goto _hx_goto_49;
				}
			}
		}
	}
	_hx_goto_49:;
	return args;
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseFunctionArgs,return )

 ::hscript::Expr Parser_obj::parseObject(){
            	HX_JUST_GC_STACKFRAME
	::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new(0);
	while(true){
		::String fieldName = null();
		{
			 ::hscript::LToken _g;
			if ((this->token >= this->tokens->length)) {
				_g = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g->_hx_getIndex())){
				case (int)15: {
					fieldName = _g->_hx_getString(0);
				}
				break;
				case (int)16: {
					 ::hscript::LConst _g1 = _g->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
					if ((_g1->_hx_getIndex() == 2)) {
						fieldName = _g1->_hx_getString(0);
					}
					else {
						this->unexpected();
					}
				}
				break;
				default:{
					this->unexpected();
					goto _hx_goto_50;
				}
			}
		}
		this->ensure(::hscript::LToken_obj::LTColon_dyn());
		fields->push( ::hscript::ObjectField_obj::__alloc( HX_CTX ,fieldName,this->parseExpr()));
		{
			 ::hscript::LToken _g2;
			if ((this->token >= this->tokens->length)) {
				_g2 = ::hscript::LToken_obj::LTEof_dyn();
			}
			else {
				_g2 = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
			}
			switch((int)(_g2->_hx_getIndex())){
				case (int)5: {
					goto _hx_goto_50;
				}
				break;
				case (int)6: {
					 ::hscript::LToken _hx_tmp;
					if ((this->token >= this->tokens->length)) {
						_hx_tmp = ::hscript::LToken_obj::LTEof_dyn();
					}
					else {
						_hx_tmp = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
					}
					if (::hx::IsPointerEq( _hx_tmp,::hscript::LToken_obj::LTCloseCB_dyn() )) {
						goto _hx_goto_50;
					}
					else {
						if ((this->token > 0)) {
							this->token--;
						}
						else {
							this->token = 0;
						}
					}
				}
				break;
				default:{
					this->unexpected();
					goto _hx_goto_50;
				}
			}
		}
	}
	_hx_goto_50:;
	return this->parseNextExpr(this->create(::hscript::ExprDef_obj::EObject(fields)));
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseObject,return )

 ::hscript::Expr Parser_obj::stringifyExpr( ::hscript::Expr expr){
	return this->create(::hscript::ExprDef_obj::ECall(this->create(::hscript::ExprDef_obj::EField(this->create(::hscript::ExprDef_obj::EIdent(this->variableID(HX_("Std",83,60,3f,00)))),HX_("string",d1,28,30,11),false)),::Array_obj< ::Dynamic>::__new(1)->init(0,expr)));
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,stringifyExpr,return )

void Parser_obj::parseBlock(::Array< ::Dynamic> exprs){
	 ::hscript::Expr expr = this->parseExpr();
	bool _hx_tmp;
	if (::hx::IsNotNull( exprs )) {
		_hx_tmp = ::hx::IsNotNull( expr );
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		exprs->push(expr);
	}
	 ::hscript::LToken testToken;
	if ((this->token >= this->tokens->length)) {
		testToken = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		testToken = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	bool _hx_tmp1;
	if (::hx::IsPointerNotEq( testToken,::hscript::LToken_obj::LTSemiColon_dyn() )) {
		_hx_tmp1 = ::hx::IsPointerNotEq( testToken,::hscript::LToken_obj::LTEof_dyn() );
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		if (this->isBlock(expr)) {
			if ((this->token > 0)) {
				this->token--;
			}
			else {
				this->token = 0;
			}
		}
		else {
			this->expected(::hscript::LToken_obj::LTSemiColon_dyn());
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseBlock,(void))

int Parser_obj::variableID(::String string){
	if (::hx::IsNull( string )) {
		return -1;
	}
	int varID = this->variablesList->indexOf(string,null());
	if ((varID == -1)) {
		this->variablesList->push(string);
		return (this->variablesList->length - 1);
	}
	else {
		return varID;
	}
	return 0;
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,variableID,return )

 ::hscript::Expr Parser_obj::create( ::hscript::ExprDef expr){
            	HX_JUST_GC_STACKFRAME
	int _hx_tmp;
	bool _hx_tmp1;
	if (((this->token - 1) >= 0)) {
		_hx_tmp1 = ((this->token - 1) >= this->tokens->length);
	}
	else {
		_hx_tmp1 = true;
	}
	if (_hx_tmp1) {
		_hx_tmp = 0;
	}
	else {
		_hx_tmp = ( (int)(this->tokens->__get((this->token - 1))->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) );
	}
	return  ::hscript::Expr_obj::__alloc( HX_CTX ,expr,_hx_tmp);
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,create,return )

bool Parser_obj::isBlock( ::hscript::Expr expr){
	if (::hx::IsNull( expr )) {
		return false;
	}
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)2: {
			 ::hscript::Expr _g1 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			if (::hx::IsNotNull( _g1 )) {
				return this->isBlock(_g1);
			}
			else {
				return false;
			}
		}
		break;
		case (int)4: {
			return true;
		}
		break;
		case (int)6: {
			return this->isBlock(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)7: {
			if (!(_g->_hx_getBool(1))) {
				return this->isBlock(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
			}
			else {
				return false;
			}
		}
		break;
		case (int)9: {
			 ::hscript::Expr _g2 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			if (::hx::IsNotNull( _g2 )) {
				return this->isBlock(_g2);
			}
			else {
				return this->isBlock(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			}
		}
		break;
		case (int)10: {
			return this->isBlock(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)11: {
			return this->isBlock(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)12: {
			return this->isBlock(_g->_hx_getObject(3).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)15: {
			return this->isBlock(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)16: {
			 ::hscript::Expr _g3 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			if (::hx::IsNotNull( _g3 )) {
				return this->isBlock(_g3);
			}
			else {
				return false;
			}
		}
		break;
		case (int)22: {
			return this->isBlock(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)23: {
			return true;
		}
		break;
		case (int)25: {
			return true;
		}
		break;
		case (int)26: {
			return this->isBlock(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)27: {
			return this->isBlock(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
		}
		break;
		default:{
			return false;
		}
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isBlock,return )

bool Parser_obj::maybe( ::hscript::LToken expected){
	 ::hscript::LToken testToken;
	if ((this->token >= this->tokens->length)) {
		testToken = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		testToken = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	if (!(__hxcpp_enum_eq(expected,testToken))) {
		if ((this->token > 0)) {
			this->token--;
		}
		else {
			this->token = 0;
		}
		return false;
	}
	else {
		return true;
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,maybe,return )

void Parser_obj::deepEnsure( ::hscript::LToken expectedToken){
	 ::hscript::LToken testToken;
	if ((this->token >= this->tokens->length)) {
		testToken = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		testToken = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	if (!(__hxcpp_enum_eq(expectedToken,testToken))) {
		this->expected(expectedToken);
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,deepEnsure,(void))

void Parser_obj::ensure( ::hscript::LToken expectedToken){
	 ::hscript::LToken testToken;
	if ((this->token >= this->tokens->length)) {
		testToken = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		testToken = this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	if (::hx::IsPointerNotEq( expectedToken,testToken )) {
		this->expected(expectedToken);
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensure,(void))

 ::hscript::LToken Parser_obj::readToken(){
	if ((this->token >= this->tokens->length)) {
		return ::hscript::LToken_obj::LTEof_dyn();
	}
	return this->tokens->__get(this->token++)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readToken,return )

 ::hscript::LToken Parser_obj::readTokenInPlace(){
	bool _hx_tmp;
	if (((this->token - 1) >= 0)) {
		_hx_tmp = ((this->token - 1) >= this->tokens->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		return ::hscript::LToken_obj::LTEof_dyn();
	}
	return this->tokens->__get((this->token - 1))->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readTokenInPlace,return )

 ::hscript::LToken Parser_obj::peekToken(){
	if ((this->token >= this->tokens->length)) {
		return ::hscript::LToken_obj::LTEof_dyn();
	}
	return this->tokens->__get(this->token)->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,peekToken,return )

void Parser_obj::reverseToken(){
	if ((this->token > 0)) {
		this->token--;
	}
	else {
		this->token = 0;
	}
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,reverseToken,(void))

 ::Dynamic Parser_obj::readPosition(){
	bool _hx_tmp;
	if (((this->token - 1) >= 0)) {
		_hx_tmp = ((this->token - 1) >= this->tokens->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		return  ::Dynamic(::hx::Anon_obj::Create(4)
			->setFixed(0,HX_("max",a4,0a,53,00),0)
			->setFixed(1,HX_("min",92,11,53,00),0)
			->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
			->setFixed(3,HX_("line",f4,17,b3,47),0));
	}
	return this->tokens->__get((this->token - 1));
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readPosition,return )

int Parser_obj::readLine(){
	bool _hx_tmp;
	if (((this->token - 1) >= 0)) {
		_hx_tmp = ((this->token - 1) >= this->tokens->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		return 0;
	}
	return ( (int)(this->tokens->__get((this->token - 1))->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)) );
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readLine,return )

 ::Dynamic Parser_obj::expected( ::hscript::LToken want){
	 ::hscript::LToken _hx_tmp;
	bool _hx_tmp1;
	if (((this->token - 1) >= 0)) {
		_hx_tmp1 = ((this->token - 1) >= this->tokens->length);
	}
	else {
		_hx_tmp1 = true;
	}
	if (_hx_tmp1) {
		_hx_tmp = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		_hx_tmp = this->tokens->__get((this->token - 1))->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	this->error(::hscript::ErrorDef_obj::EUnexpected(_hx_tmp,want));
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,expected,return )

 ::Dynamic Parser_obj::unexpected(){
	 ::hscript::LToken _hx_tmp;
	bool _hx_tmp1;
	if (((this->token - 1) >= 0)) {
		_hx_tmp1 = ((this->token - 1) >= this->tokens->length);
	}
	else {
		_hx_tmp1 = true;
	}
	if (_hx_tmp1) {
		_hx_tmp = ::hscript::LToken_obj::LTEof_dyn();
	}
	else {
		_hx_tmp = this->tokens->__get((this->token - 1))->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic);
	}
	this->error(::hscript::ErrorDef_obj::EUnexpected(_hx_tmp,null()));
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,unexpected,return )

void Parser_obj::error( ::hscript::ErrorDef err){
            	HX_JUST_GC_STACKFRAME
	 ::Dynamic currentToken;
	bool currentToken1;
	if (((this->token - 1) >= 0)) {
		currentToken1 = ((this->token - 1) >= this->tokens->length);
	}
	else {
		currentToken1 = true;
	}
	if (currentToken1) {
		currentToken =  ::Dynamic(::hx::Anon_obj::Create(4)
			->setFixed(0,HX_("max",a4,0a,53,00),0)
			->setFixed(1,HX_("min",92,11,53,00),0)
			->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
			->setFixed(3,HX_("line",f4,17,b3,47),0));
	}
	else {
		currentToken = this->tokens->__get((this->token - 1));
	}
	HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err,currentToken->__Field(HX_("min",92,11,53,00),::hx::paccDynamic),currentToken->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic),this->fileName,currentToken->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)));
}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,error,(void))


::hx::ObjectPtr< Parser_obj > Parser_obj::__new(::String fileName) {
	::hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
	__this->__construct(fileName);
	return __this;
}

::hx::ObjectPtr< Parser_obj > Parser_obj::__alloc(::hx::Ctx *_hx_ctx,::String fileName) {
	Parser_obj *__this = (Parser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), true, "hscript.Parser"));
	*(void **)__this = Parser_obj::_hx_vtable;
	__this->__construct(fileName);
	return __this;
}

Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_MEMBER_NAME(token,"token");
	HX_MARK_MEMBER_NAME(variablesList,"variablesList");
	HX_MARK_MEMBER_NAME(uniqueID,"uniqueID");
	HX_MARK_MEMBER_NAME(publicModifier,"publicModifier");
	HX_MARK_MEMBER_NAME(staticModifier,"staticModifier");
	HX_MARK_MEMBER_NAME(fileName,"fileName");
	HX_MARK_MEMBER_NAME(preprocesorValues,"preprocesorValues");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
	HX_VISIT_MEMBER_NAME(token,"token");
	HX_VISIT_MEMBER_NAME(variablesList,"variablesList");
	HX_VISIT_MEMBER_NAME(uniqueID,"uniqueID");
	HX_VISIT_MEMBER_NAME(publicModifier,"publicModifier");
	HX_VISIT_MEMBER_NAME(staticModifier,"staticModifier");
	HX_VISIT_MEMBER_NAME(fileName,"fileName");
	HX_VISIT_MEMBER_NAME(preprocesorValues,"preprocesorValues");
}

::hx::Val Parser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"token") ) { return ::hx::Val( token ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		if (HX_FIELD_EQ(inName,"maybe") ) { return ::hx::Val( maybe_dyn() ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tokens") ) { return ::hx::Val( tokens ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"ensure") ) { return ::hx::Val( ensure_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isBlock") ) { return ::hx::Val( isBlock_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniqueID") ) { return ::hx::Val( uniqueID ); }
		if (HX_FIELD_EQ(inName,"fileName") ) { return ::hx::Val( fileName ); }
		if (HX_FIELD_EQ(inName,"readLine") ) { return ::hx::Val( readLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"expected") ) { return ::hx::Val( expected_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return ::hx::Val( parseExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseType") ) { return ::hx::Val( parseType_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseUnop") ) { return ::hx::Val( parseUnop_dyn() ); }
		if (HX_FIELD_EQ(inName,"readToken") ) { return ::hx::Val( readToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"peekToken") ) { return ::hx::Val( peekToken_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parseIdent") ) { return ::hx::Val( parseIdent_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseBinop") ) { return ::hx::Val( parseBinop_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseBlock") ) { return ::hx::Val( parseBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"variableID") ) { return ::hx::Val( variableID_dyn() ); }
		if (HX_FIELD_EQ(inName,"deepEnsure") ) { return ::hx::Val( deepEnsure_dyn() ); }
		if (HX_FIELD_EQ(inName,"unexpected") ) { return ::hx::Val( unexpected_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { return ::hx::Val( parseString_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return ::hx::Val( parseObject_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parseKeyword") ) { return ::hx::Val( parseKeyword_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverseToken") ) { return ::hx::Val( reverseToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"readPosition") ) { return ::hx::Val( readPosition_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"variablesList") ) { return ::hx::Val( variablesList ); }
		if (HX_FIELD_EQ(inName,"parseNextExpr") ) { return ::hx::Val( parseNextExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"stringifyExpr") ) { return ::hx::Val( stringifyExpr_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"publicModifier") ) { return ::hx::Val( publicModifier ); }
		if (HX_FIELD_EQ(inName,"staticModifier") ) { return ::hx::Val( staticModifier ); }
		if (HX_FIELD_EQ(inName,"parseClassName") ) { return ::hx::Val( parseClassName_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseClassArgs") ) { return ::hx::Val( parseClassArgs_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parsePreprocess") ) { return ::hx::Val( parsePreprocess_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"parseParentheses") ) { return ::hx::Val( parseParentheses_dyn() ); }
		if (HX_FIELD_EQ(inName,"readTokenInPlace") ) { return ::hx::Val( readTokenInPlace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preprocesorValues") ) { return ::hx::Val( preprocesorValues ); }
		if (HX_FIELD_EQ(inName,"loadBaseVariables") ) { return ::hx::Val( loadBaseVariables_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseFunctionArgs") ) { return ::hx::Val( parseFunctionArgs_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"parseStructureType") ) { return ::hx::Val( parseStructureType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPreprocessError") ) { return ::hx::Val( getPreprocessError_dyn() ); }
		if (HX_FIELD_EQ(inName,"evalPreprocessCond") ) { return ::hx::Val( evalPreprocessCond_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMapComprehension") ) { return ::hx::Val( isMapComprehension_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"parsePreprocessCond") ) { return ::hx::Val( parsePreprocessCond_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"parsePreprocessBlock") ) { return ::hx::Val( parsePreprocessBlock_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"parseMapComprehensions") ) { return ::hx::Val( parseMapComprehensions_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"parseArrayComprehensions") ) { return ::hx::Val( parseArrayComprehensions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Parser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"token") ) { token=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniqueID") ) { uniqueID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fileName") ) { fileName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"variablesList") ) { variablesList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"publicModifier") ) { publicModifier=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staticModifier") ) { staticModifier=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preprocesorValues") ) { preprocesorValues=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tokens",5a,17,e7,91));
	outFields->push(HX_("token",f9,82,2b,14));
	outFields->push(HX_("variablesList",b5,52,5c,7b));
	outFields->push(HX_("uniqueID",2c,79,aa,5b));
	outFields->push(HX_("publicModifier",20,69,4b,f8));
	outFields->push(HX_("staticModifier",25,d2,c6,bf));
	outFields->push(HX_("fileName",e7,5a,43,62));
	outFields->push(HX_("preprocesorValues",4c,e2,81,ce));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Parser_obj,tokens),HX_("tokens",5a,17,e7,91)},
	{::hx::fsInt,(int)offsetof(Parser_obj,token),HX_("token",f9,82,2b,14)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Parser_obj,variablesList),HX_("variablesList",b5,52,5c,7b)},
	{::hx::fsInt,(int)offsetof(Parser_obj,uniqueID),HX_("uniqueID",2c,79,aa,5b)},
	{::hx::fsBool,(int)offsetof(Parser_obj,publicModifier),HX_("publicModifier",20,69,4b,f8)},
	{::hx::fsBool,(int)offsetof(Parser_obj,staticModifier),HX_("staticModifier",25,d2,c6,bf)},
	{::hx::fsString,(int)offsetof(Parser_obj,fileName),HX_("fileName",e7,5a,43,62)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Parser_obj,preprocesorValues),HX_("preprocesorValues",4c,e2,81,ce)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Parser_obj_sStaticStorageInfo = 0;
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_("tokens",5a,17,e7,91),
	HX_("token",f9,82,2b,14),
	HX_("variablesList",b5,52,5c,7b),
	HX_("uniqueID",2c,79,aa,5b),
	HX_("publicModifier",20,69,4b,f8),
	HX_("staticModifier",25,d2,c6,bf),
	HX_("fileName",e7,5a,43,62),
	HX_("preprocesorValues",4c,e2,81,ce),
	HX_("reset",cf,49,c8,e6),
	HX_("parseString",64,d5,6c,8c),
	HX_("parse",33,90,55,bd),
	HX_("loadBaseVariables",60,a6,74,e6),
	HX_("parseExpr",08,4f,c4,ca),
	HX_("parseNextExpr",1b,db,19,34),
	HX_("parseKeyword",f6,9a,d7,17),
	HX_("parseIdent",bd,89,5a,e1),
	HX_("parseType",8d,44,af,d4),
	HX_("parseClassName",f0,c3,5e,20),
	HX_("parseClassArgs",02,df,d3,17),
	HX_("parseStructureType",5a,64,c3,39),
	HX_("parseParentheses",e7,5d,1d,96),
	HX_("parsePreprocess",bf,ce,30,eb),
	HX_("parsePreprocessBlock",0e,42,78,b1),
	HX_("parsePreprocessCond",41,80,d6,f4),
	HX_("getPreprocessError",86,8f,da,71),
	HX_("evalPreprocessCond",6a,21,fb,25),
	HX_("parseBinop",75,60,e1,dc),
	HX_("parseUnop",8d,21,50,d5),
	HX_("parseArrayComprehensions",b5,9e,99,44),
	HX_("parseMapComprehensions",b8,ed,90,66),
	HX_("isMapComprehension",12,0c,69,13),
	HX_("parseFunctionArgs",68,ad,48,04),
	HX_("parseObject",52,2b,7c,90),
	HX_("stringifyExpr",a0,e0,fb,b8),
	HX_("parseBlock",1a,bc,dd,de),
	HX_("variableID",17,59,23,94),
	HX_("create",fc,66,0f,7c),
	HX_("isBlock",03,19,82,51),
	HX_("maybe",a8,13,27,03),
	HX_("deepEnsure",0a,a5,b0,51),
	HX_("ensure",be,f5,7b,04),
	HX_("readToken",c3,cf,12,e5),
	HX_("readTokenInPlace",1f,f1,7d,4b),
	HX_("peekToken",5e,5f,05,b2),
	HX_("reverseToken",77,5e,90,2a),
	HX_("readPosition",1f,ee,2f,06),
	HX_("readLine",6a,f2,aa,6f),
	HX_("expected",78,2e,30,40),
	HX_("unexpected",d1,15,f4,c5),
	HX_("error",c8,cb,29,73),
	::String(null()) };

::hx::Class Parser_obj::__mClass;

void Parser_obj::__register()
{
	Parser_obj _hx_dummy;
	Parser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Parser",9a,9f,f2,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Parser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
