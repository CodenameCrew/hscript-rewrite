// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_ErrorDef
#include <hscript/ErrorDef.h>
#endif
#ifndef INCLUDED_hscript_LConst
#include <hscript/LConst.h>
#endif
#ifndef INCLUDED_hscript_LToken
#include <hscript/LToken.h>
#endif
#ifndef INCLUDED_hscript_Lexer
#include <hscript/Lexer.h>
#endif
#ifndef INCLUDED_hscript__Lexer_LKeyword_Impl_
#include <hscript/_Lexer/LKeyword_Impl_.h>
#endif
#ifndef INCLUDED_hscript__Lexer_LexerOp_Impl_
#include <hscript/_Lexer/LexerOp_Impl_.h>
#endif

namespace hscript{

void Lexer_obj::__construct(::String fileName){
	this->fileName = null();
	this->tokens = ::Array_obj< ::Dynamic>::__new(0);
	this->input = null();
	this->line = 1;
	this->tokenMax = 0;
	this->tokenMin = 0;
	this->charCode = -1;
	this->character = 0;
	::String _hx_tmp;
	if (::hx::IsNotNull( fileName )) {
		_hx_tmp = fileName;
	}
	else {
		_hx_tmp = HX_("",00,00,00,00);
	}
	this->fileName = _hx_tmp;
}

Dynamic Lexer_obj::__CreateEmpty() { return new Lexer_obj; }

void *Lexer_obj::_hx_vtable = 0;

Dynamic Lexer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Lexer_obj > _hx_result = new Lexer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Lexer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2183aaa1;
}

::Array< ::Dynamic> Lexer_obj::create(::String string){
	::String _hx_tmp;
	if (::hx::IsNotNull( string )) {
		_hx_tmp = string;
	}
	else {
		_hx_tmp = HX_("",00,00,00,00);
	}
	this->input = _hx_tmp;
	this->character = 0;
	while(true){
		 ::hscript::LToken ltoken = this->token();
		this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
			->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
			->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
			->setFixed(2,HX_("token",f9,82,2b,14),ltoken)
			->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
		if (::hx::IsPointerEq( ltoken,::hscript::LToken_obj::LTEof_dyn() )) {
			goto _hx_goto_0;
		}
	}
	_hx_goto_0:;
	return this->tokens;
}


HX_DEFINE_DYNAMIC_FUNC1(Lexer_obj,create,return )

void Lexer_obj::reset(){
	this->character = 0;
	this->charCode = -1;
	this->tokenMin = 0;
	this->tokenMax = 0;
	this->line = 1;
	this->input = null();
	this->tokens->resize(0);
}


HX_DEFINE_DYNAMIC_FUNC0(Lexer_obj,reset,(void))

 ::hscript::LToken Lexer_obj::token(){
	int _hx_tmp;
	if ((this->charCode < 0)) {
		_hx_tmp = this->character;
	}
	else {
		_hx_tmp = (this->character - 1);
	}
	this->tokenMin = _hx_tmp;
	 ::hscript::LToken ltoken = this->nativeToken();
	int _hx_tmp1;
	if ((this->charCode < 0)) {
		_hx_tmp1 = (this->character - 1);
	}
	else {
		_hx_tmp1 = (this->character - 2);
	}
	this->tokenMax = _hx_tmp1;
	return ltoken;
}


HX_DEFINE_DYNAMIC_FUNC0(Lexer_obj,token,return )

 ::hscript::LToken Lexer_obj::nativeToken(){
            	HX_JUST_GC_STACKFRAME
	int charCode;
	if ((this->charCode < 0)) {
		charCode = this->input.cca(this->character++);
	}
	else {
		charCode = this->charCode;
		this->charCode = -1;
	}
	while(true){
		if ((charCode == 0)) {
			this->charCode = charCode;
			return ::hscript::LToken_obj::LTEof_dyn();
		}
		switch((int)(charCode)){
			case (int)0: {
				return ::hscript::LToken_obj::LTEof_dyn();
			}
			break;
			case (int)10: {
				this->line++;
				this->tokenMin++;
			}
			break;
			case (int)9: case (int)13: case (int)32: {
				this->tokenMin++;
			}
			break;
			case (int)34: {
				return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCString(this->readString(charCode,false)));
			}
			break;
			case (int)35: {
				charCode = this->input.cca(this->character++);
				if (::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode)) {
					::String id = ::String::fromCharCode(charCode);
					while(true){
						charCode = this->input.cca(this->character++);
						if (!(::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode))) {
							this->charCode = charCode;
							return ::hscript::LToken_obj::LTPrepro(id);
						}
						id = (id + ::String::fromCharCode(charCode));
					}
				}
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
			}
			break;
			case (int)39: {
				return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCString(this->readString(charCode,true)));
			}
			break;
			case (int)40: {
				return ::hscript::LToken_obj::LTOpenP_dyn();
			}
			break;
			case (int)41: {
				return ::hscript::LToken_obj::LTCloseP_dyn();
			}
			break;
			case (int)44: {
				return ::hscript::LToken_obj::LTComma_dyn();
			}
			break;
			case (int)46: {
				charCode = this->input.cca(this->character++);
				switch((int)(charCode)){
					case (int)46: {
						charCode = this->input.cca(this->character++);
						if ((charCode != 46)) {
							HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
						}
						return ::hscript::LToken_obj::LTOp(HX_("...",ee,0f,23,00));
					}
					break;
					case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
						int n = (charCode - 48);
						Float exp = ( (Float)(1) );
						while(true){
							charCode = this->input.cca(this->character++);
							exp = (exp * ( (Float)(10) ));
							switch((int)(charCode)){
								case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
									n = ((n * 10) + (charCode - 48));
								}
								break;
								default:{
									this->charCode = charCode;
									return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCFloat((( (Float)(n) ) / exp)));
								}
							}
						}
					}
					break;
					default:{
						this->charCode = charCode;
						return ::hscript::LToken_obj::LTDot_dyn();
					}
				}
			}
			break;
			case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
				int n1 = (charCode - 48);
				Float exp1 = ( (Float)(0) );
				while(true){
					charCode = this->input.cca(this->character++);
					exp1 = (exp1 * ( (Float)(10) ));
					switch((int)(charCode)){
						case (int)46: {
							if ((exp1 > 0)) {
								charCode = this->input.cca(this->character++);
								bool _hx_tmp;
								if ((exp1 == 10)) {
									_hx_tmp = (charCode == 46);
								}
								else {
									_hx_tmp = false;
								}
								if (_hx_tmp) {
									this->character = (this->character - 3);
									int i = ::Std_obj::_hx_int(( (Float)(n1) ));
									 ::hscript::LConst _hx_tmp1;
									if ((i == n1)) {
										_hx_tmp1 = ::hscript::LConst_obj::LCInt(i);
									}
									else {
										_hx_tmp1 = ::hscript::LConst_obj::LCFloat(n1);
									}
									return ::hscript::LToken_obj::LTConst(_hx_tmp1);
								}
								else {
									this->character--;
								}
								HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
							}
							exp1 = ( (Float)(1) );
						}
						break;
						case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
							n1 = ((n1 * 10) + (charCode - 48));
						}
						break;
						case (int)69: case (int)101: {
							 ::hscript::LToken token = this->token();
							 ::Dynamic pow = null();
							switch((int)(token->_hx_getIndex())){
								case (int)13: {
									if ((token->_hx_getString(0) == HX_("-",2d,00,00,00))) {
										token = this->token();
										if ((token->_hx_getIndex() == 16)) {
											 ::hscript::LConst _g = token->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
											if ((_g->_hx_getIndex() == 0)) {
												pow = -(_g->_hx_getInt(0));
											}
											else {
												this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
													->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
													->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
													->setFixed(2,HX_("token",f9,82,2b,14),token)
													->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
											}
										}
										else {
											this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
												->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
												->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
												->setFixed(2,HX_("token",f9,82,2b,14),token)
												->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
										}
									}
									else {
										this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
											->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
											->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
											->setFixed(2,HX_("token",f9,82,2b,14),token)
											->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
									}
								}
								break;
								case (int)16: {
									 ::hscript::LConst _g1 = token->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
									if ((_g1->_hx_getIndex() == 0)) {
										pow = _g1->_hx_getInt(0);
									}
									else {
										this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
											->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
											->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
											->setFixed(2,HX_("token",f9,82,2b,14),token)
											->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
									}
								}
								break;
								default:{
									this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
										->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
										->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
										->setFixed(2,HX_("token",f9,82,2b,14),token)
										->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
								}
							}
							if (::hx::IsNull( pow )) {
								HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
							}
							if ((exp1 == 0)) {
								exp1 = ( (Float)(10) );
							}
							return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCFloat((((::Math_obj::pow(( (Float)(10) ),( (Float)(pow) )) / exp1) * ( (Float)(n1) )) * ( (Float)(10) ))));
						}
						break;
						case (int)120: {
							bool _hx_tmp2;
							if ((n1 <= 0)) {
								_hx_tmp2 = (exp1 > 0);
							}
							else {
								_hx_tmp2 = true;
							}
							if (_hx_tmp2) {
								HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
							}
							int hexa = 0;
							while(true){
								charCode = this->input.cca(this->character++);
								switch((int)(charCode)){
									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
										hexa = (((hexa << 4) + charCode) - 48);
									}
									break;
									case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
										hexa = ((hexa << 4) + (charCode - 55));
									}
									break;
									case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
										hexa = ((hexa << 4) + (charCode - 87));
									}
									break;
									default:{
										this->charCode = charCode;
										return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCInt(hexa));
									}
								}
							}
						}
						break;
						default:{
							this->charCode = charCode;
							int i1 = ::Std_obj::_hx_int(( (Float)(n1) ));
							 ::hscript::LConst _hx_tmp3;
							if ((exp1 > 0)) {
								_hx_tmp3 = ::hscript::LConst_obj::LCFloat((( (Float)((n1 * 10)) ) / exp1));
							}
							else {
								if ((i1 == n1)) {
									_hx_tmp3 = ::hscript::LConst_obj::LCInt(i1);
								}
								else {
									_hx_tmp3 = ::hscript::LConst_obj::LCFloat(n1);
								}
							}
							return ::hscript::LToken_obj::LTConst(_hx_tmp3);
						}
					}
				}
			}
			break;
			case (int)58: {
				return ::hscript::LToken_obj::LTColon_dyn();
			}
			break;
			case (int)59: {
				return ::hscript::LToken_obj::LTSemiColon_dyn();
			}
			break;
			case (int)61: {
				charCode = this->input.cca(this->character++);
				if ((charCode == 61)) {
					return ::hscript::LToken_obj::LTOp(HX_("==",60,35,00,00));
				}
				else {
					if ((charCode == 62)) {
						return ::hscript::LToken_obj::LTOp(HX_("=>",61,35,00,00));
					}
				}
				this->charCode = charCode;
				return ::hscript::LToken_obj::LTOp(HX_("=",3d,00,00,00));
			}
			break;
			case (int)63: {
				charCode = this->input.cca(this->character++);
				switch((int)(charCode)){
					case (int)46: {
						return ::hscript::LToken_obj::LTQuestionDot_dyn();
					}
					break;
					case (int)63: {
						if ((this->input.cca(this->character++) == 61)) {
							return ::hscript::LToken_obj::LTOp(HX_("??=",1d,05,30,00));
						}
						return ::hscript::LToken_obj::LTOp(HX_("??",20,37,00,00));
					}
					break;
					default:{
						this->character--;
					}
				}
				return ::hscript::LToken_obj::LTQuestion_dyn();
			}
			break;
			case (int)64: {
				charCode = this->input.cca(this->character++);
				bool _hx_tmp4;
				if (!(::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode))) {
					_hx_tmp4 = (charCode == 58);
				}
				else {
					_hx_tmp4 = true;
				}
				if (_hx_tmp4) {
					::String id1 = ::String::fromCharCode(charCode);
					while(true){
						charCode = this->input.cca(this->character++);
						if (!(::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode))) {
							this->charCode = charCode;
							return ::hscript::LToken_obj::LTMeta(id1);
						}
						id1 = (id1 + ::String::fromCharCode(charCode));
					}
				}
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
			}
			break;
			case (int)91: {
				return ::hscript::LToken_obj::LTOpenBr_dyn();
			}
			break;
			case (int)93: {
				return ::hscript::LToken_obj::LTCloseBr_dyn();
			}
			break;
			case (int)123: {
				return ::hscript::LToken_obj::LTOpenCB_dyn();
			}
			break;
			case (int)125: {
				return ::hscript::LToken_obj::LTCloseCB_dyn();
			}
			break;
			default:{
				if (::hscript::Lexer_obj::OPERATOR_CHARS_LOOKUP->__get(charCode)) {
					::String op = ::String::fromCharCode(charCode);
					while(true){
						charCode = this->input.cca(this->character++);
						if ((charCode == 0)) {
							charCode = 0;
						}
						if (!(::hscript::Lexer_obj::OPERATOR_CHARS_LOOKUP->__get(charCode))) {
							this->charCode = charCode;
							return ::hscript::LToken_obj::LTOp(op);
						}
						::String preop = op;
						op = (op + ::String::fromCharCode(charCode));
						bool _hx_tmp5;
						if ((op != HX_("//",20,29,00,00))) {
							_hx_tmp5 = (op == HX_("/*",1b,29,00,00));
						}
						else {
							_hx_tmp5 = true;
						}
						if (_hx_tmp5) {
							int charCode1 = charCode;
							int secondCharCode = ( (int)(op.charCodeAt(1)) );
							if ((secondCharCode == 47)) {
								do {
									bool _hx_tmp6;
									if ((charCode1 != 13)) {
										_hx_tmp6 = (charCode1 != 10);
									}
									else {
										_hx_tmp6 = false;
									}
									if (!(_hx_tmp6)) {
										goto _hx_goto_3;
									}
									charCode1 = this->input.cca(this->character++);
								} while((charCode1 != 0));
								_hx_goto_3:;
								this->charCode = charCode1;
								return this->token();
							}
							else {
								if ((secondCharCode == 42)) {
									int oldLine = this->line;
									if ((op == HX_("/**/",a0,0a,31,1f))) {
										this->charCode = charCode1;
										return this->token();
									}
									else {
										do {
											while((charCode1 != 42)){
												if ((charCode1 == 10)) {
													this->line++;
												}
												charCode1 = this->input.cca(this->character++);
												if ((charCode1 == 0)) {
													this->line = oldLine;
													HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnterminatedComment_dyn(),this->tokenMin,this->tokenMin,this->fileName,this->line));
												}
											}
											charCode1 = this->input.cca(this->character++);
											if ((charCode1 == 0)) {
												this->line = oldLine;
												HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnterminatedComment_dyn(),this->tokenMin,this->tokenMin,this->fileName,this->line));
											}
										} while((charCode1 != 47));
;
										return this->token();
									}
								}
								else {
									this->charCode = charCode1;
									return ::hscript::LToken_obj::LTOp(op);
								}
							}
						}
						if (!(::hscript::_Lexer::LexerOp_Impl__obj::ALL_LOPS_LOOKUP->exists(op))) {
							this->charCode = charCode;
							return ::hscript::LToken_obj::LTOp(preop);
						}
					}
				}
				if (::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode)) {
					::String id2 = ::String::fromCharCode(charCode);
					while(true){
						charCode = this->input.cca(this->character++);
						if ((charCode == 0)) {
							charCode = 0;
						}
						if (!(::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode))) {
							this->charCode = charCode;
							if (::hscript::_Lexer::LKeyword_Impl__obj::ALL_KEYWORDS_LOOKUP->exists(id2)) {
								if ((id2 == HX_("null",87,9e,0e,49))) {
									return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCNull_dyn());
								}
								if ((id2 == HX_("true",4e,a7,03,4d))) {
									return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCBool(true));
								}
								if ((id2 == HX_("false",a3,35,4f,fb))) {
									return ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCBool(false));
								}
								return ::hscript::LToken_obj::LTKeyWord(id2);
							}
							else {
								return ::hscript::LToken_obj::LTIdentifier(id2);
							}
						}
						id2 = (id2 + ::String::fromCharCode(charCode));
					}
				}
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
			}
		}
		charCode = this->input.cca(this->character++);
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Lexer_obj,nativeToken,return )

void Lexer_obj::push( ::hscript::LToken ltoken){
	this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
		->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
		->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
		->setFixed(2,HX_("token",f9,82,2b,14),ltoken)
		->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
}


HX_DEFINE_DYNAMIC_FUNC1(Lexer_obj,push,(void))

::String Lexer_obj::readString(int untilCharCode,bool allowStringInterpolation){
            	HX_JUST_GC_STACKFRAME
	 ::StringBuf buffer =  ::StringBuf_obj::__alloc( HX_CTX );
	bool esc = false;
	int start = (this->character - 1);
	while(true){
		int charCode = -1;
		if ((this->charCode < 0)) {
			charCode = this->input.cca(this->character++);
		}
		else {
			charCode = this->charCode;
			this->charCode = -1;
		}
		if ((charCode == 0)) {
			HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnterminatedString_dyn(),start,start,this->fileName,this->line));
		}
		if (esc) {
			esc = false;
			switch((int)(charCode)){
				case (int)47: {
					if ((charCode >= 127)) {
						::String x = ::String::fromCharCode(charCode);
						if (::hx::IsNotNull( buffer->charBuf )) {
							buffer->flush();
						}
						if (::hx::IsNull( buffer->b )) {
							buffer->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
						}
						else {
							::Array< ::String > buffer1 = buffer->b;
							buffer1->push(::Std_obj::string(x));
						}
					}
					else {
						if (::hx::IsNull( buffer->charBuf )) {
							buffer->charBuf = ::Array_obj< char >::__new();
						}
						buffer->charBuf->push(charCode);
					}
				}
				break;
				case (int)34: case (int)39: case (int)92: {
					if ((charCode >= 127)) {
						::String x1 = ::String::fromCharCode(charCode);
						if (::hx::IsNotNull( buffer->charBuf )) {
							buffer->flush();
						}
						if (::hx::IsNull( buffer->b )) {
							buffer->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
						}
						else {
							::Array< ::String > buffer2 = buffer->b;
							buffer2->push(::Std_obj::string(x1));
						}
					}
					else {
						if (::hx::IsNull( buffer->charBuf )) {
							buffer->charBuf = ::Array_obj< char >::__new();
						}
						buffer->charBuf->push(charCode);
					}
				}
				break;
				case (int)110: {
					if (::hx::IsNull( buffer->charBuf )) {
						buffer->charBuf = ::Array_obj< char >::__new();
					}
					buffer->charBuf->push(10);
				}
				break;
				case (int)114: {
					if (::hx::IsNull( buffer->charBuf )) {
						buffer->charBuf = ::Array_obj< char >::__new();
					}
					buffer->charBuf->push(13);
				}
				break;
				case (int)116: {
					if (::hx::IsNull( buffer->charBuf )) {
						buffer->charBuf = ::Array_obj< char >::__new();
					}
					buffer->charBuf->push(9);
				}
				break;
				case (int)117: {
					int k = 0;
					{
						int _g = 0;
						while((_g < 4)){
							_g = (_g + 1);
							k = (k << 4);
							int _hx_char = this->input.cca(this->character++);
							switch((int)(_hx_char)){
								case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
									k = (k + (_hx_char - 48));
								}
								break;
								case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
									k = (k + (_hx_char - 55));
								}
								break;
								case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
									k = (k + (_hx_char - 87));
								}
								break;
								default:{
									if ((_hx_char == 0)) {
										HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnterminatedString_dyn(),start,start,this->fileName,this->line));
									}
									HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(_hx_char),(this->character - 1),(this->character - 1),this->fileName,this->line));
								}
							}
						}
					}
					if ((k >= 127)) {
						::String x2 = ::String::fromCharCode(k);
						if (::hx::IsNotNull( buffer->charBuf )) {
							buffer->flush();
						}
						if (::hx::IsNull( buffer->b )) {
							buffer->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
						}
						else {
							::Array< ::String > buffer3 = buffer->b;
							buffer3->push(::Std_obj::string(x2));
						}
					}
					else {
						if (::hx::IsNull( buffer->charBuf )) {
							buffer->charBuf = ::Array_obj< char >::__new();
						}
						buffer->charBuf->push(k);
					}
				}
				break;
				default:{
					HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(charCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
				}
			}
		}
		else {
			if ((charCode == 92)) {
				esc = true;
			}
			else {
				bool _hx_tmp;
				if (allowStringInterpolation) {
					_hx_tmp = (charCode == 36);
				}
				else {
					_hx_tmp = false;
				}
				if (_hx_tmp) {
					charCode = this->input.cca(this->character++);
					if ((charCode == 36)) {
						if ((charCode >= 127)) {
							::String x3 = ::String::fromCharCode(charCode);
							if (::hx::IsNotNull( buffer->charBuf )) {
								buffer->flush();
							}
							if (::hx::IsNull( buffer->b )) {
								buffer->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
							}
							else {
								::Array< ::String > buffer4 = buffer->b;
								buffer4->push(::Std_obj::string(x3));
							}
						}
						else {
							if (::hx::IsNull( buffer->charBuf )) {
								buffer->charBuf = ::Array_obj< char >::__new();
							}
							buffer->charBuf->push(charCode);
						}
						continue;
					}
					bool _hx_tmp1;
					if ((charCode != 123)) {
						_hx_tmp1 = !(::hscript::Lexer_obj::IDENTIFIER_CHARS_LOOKUP->__get(charCode));
					}
					else {
						_hx_tmp1 = false;
					}
					if (_hx_tmp1) {
						{
							if (::hx::IsNull( buffer->charBuf )) {
								buffer->charBuf = ::Array_obj< char >::__new();
							}
							buffer->charBuf->push(36);
						}
						if ((charCode == untilCharCode)) {
							goto _hx_goto_12;
						}
						if ((charCode >= 127)) {
							::String x4 = ::String::fromCharCode(charCode);
							if (::hx::IsNotNull( buffer->charBuf )) {
								buffer->flush();
							}
							if (::hx::IsNull( buffer->b )) {
								buffer->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
							}
							else {
								::Array< ::String > buffer5 = buffer->b;
								buffer5->push(::Std_obj::string(x4));
							}
						}
						else {
							if (::hx::IsNull( buffer->charBuf )) {
								buffer->charBuf = ::Array_obj< char >::__new();
							}
							buffer->charBuf->push(charCode);
						}
						continue;
					}
					{
						 ::hscript::LToken ltoken = ::hscript::LToken_obj::LTConst(::hscript::LConst_obj::LCString(buffer->toString()));
						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
							->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
							->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
							->setFixed(2,HX_("token",f9,82,2b,14),ltoken)
							->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
					}
					this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
						->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
						->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
						->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTDollar_dyn())
						->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
					if ((charCode == 123)) {
						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
							->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
							->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
							->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTOpenCB_dyn())
							->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
						 ::hscript::LToken ltoken1 = this->token();
						this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
							->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
							->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
							->setFixed(2,HX_("token",f9,82,2b,14),ltoken1)
							->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
						while(::hx::IsPointerNotEq( ltoken1,::hscript::LToken_obj::LTCloseCB_dyn() )){
							ltoken1 = this->token();
							this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
								->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
								->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
								->setFixed(2,HX_("token",f9,82,2b,14),ltoken1)
								->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
						}
					}
					else {
						this->charCode = charCode;
						{
							 ::hscript::LToken ltoken2 = this->token();
							this->tokens->push( ::Dynamic(::hx::Anon_obj::Create(4)
								->setFixed(0,HX_("max",a4,0a,53,00),this->tokenMax)
								->setFixed(1,HX_("min",92,11,53,00),this->tokenMin)
								->setFixed(2,HX_("token",f9,82,2b,14),ltoken2)
								->setFixed(3,HX_("line",f4,17,b3,47),this->line)));
						}
					}
					buffer =  ::StringBuf_obj::__alloc( HX_CTX );
					continue;
				}
				else {
					if ((charCode == untilCharCode)) {
						goto _hx_goto_12;
					}
					else {
						if ((charCode == 10)) {
							this->line++;
						}
						if ((charCode >= 127)) {
							::String x5 = ::String::fromCharCode(charCode);
							if (::hx::IsNotNull( buffer->charBuf )) {
								buffer->flush();
							}
							if (::hx::IsNull( buffer->b )) {
								buffer->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
							}
							else {
								::Array< ::String > buffer6 = buffer->b;
								buffer6->push(::Std_obj::string(x5));
							}
						}
						else {
							if (::hx::IsNull( buffer->charBuf )) {
								buffer->charBuf = ::Array_obj< char >::__new();
							}
							buffer->charBuf->push(charCode);
						}
					}
				}
			}
		}
	}
	_hx_goto_12:;
	return buffer->toString();
}


HX_DEFINE_DYNAMIC_FUNC2(Lexer_obj,readString,return )

 ::hscript::LToken Lexer_obj::comment(::String op,int charCode){
            	HX_JUST_GC_STACKFRAME
	int secondCharCode = ( (int)(op.charCodeAt(1)) );
	if ((secondCharCode == 47)) {
		do {
			bool _hx_tmp;
			if ((charCode != 13)) {
				_hx_tmp = (charCode != 10);
			}
			else {
				_hx_tmp = false;
			}
			if (!(_hx_tmp)) {
				goto _hx_goto_15;
			}
			charCode = this->input.cca(this->character++);
		} while((charCode != 0));
		_hx_goto_15:;
		this->charCode = charCode;
		return this->token();
	}
	if ((secondCharCode == 42)) {
		int oldLine = this->line;
		if ((op == HX_("/**/",a0,0a,31,1f))) {
			this->charCode = charCode;
			return this->token();
		}
		do {
			while((charCode != 42)){
				if ((charCode == 10)) {
					this->line++;
				}
				charCode = this->input.cca(this->character++);
				if ((charCode == 0)) {
					this->line = oldLine;
					HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnterminatedComment_dyn(),this->tokenMin,this->tokenMin,this->fileName,this->line));
				}
			}
			charCode = this->input.cca(this->character++);
			if ((charCode == 0)) {
				this->line = oldLine;
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnterminatedComment_dyn(),this->tokenMin,this->tokenMin,this->fileName,this->line));
			}
		} while((charCode != 47));
;
		return this->token();
	}
	this->charCode = charCode;
	return ::hscript::LToken_obj::LTOp(op);
}


HX_DEFINE_DYNAMIC_FUNC2(Lexer_obj,comment,return )

int Lexer_obj::readCharacter(){
	return this->input.cca(this->character++);
}


HX_DEFINE_DYNAMIC_FUNC0(Lexer_obj,readCharacter,return )

void Lexer_obj::invalidChar(int characterCode){
            	HX_JUST_GC_STACKFRAME
	HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidChar(characterCode),(this->character - 1),(this->character - 1),this->fileName,this->line));
}


HX_DEFINE_DYNAMIC_FUNC1(Lexer_obj,invalidChar,(void))

void Lexer_obj::error( ::hscript::ErrorDef err,int pmin,int pmax){
            	HX_JUST_GC_STACKFRAME
	HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err,pmin,pmax,this->fileName,this->line));
}


HX_DEFINE_DYNAMIC_FUNC3(Lexer_obj,error,(void))

::String Lexer_obj::IDENTIFIER_CHARS;

::String Lexer_obj::OPERATOR_CHARS;

::Array< bool > Lexer_obj::IDENTIFIER_CHARS_LOOKUP;

::Array< bool > Lexer_obj::OPERATOR_CHARS_LOOKUP;

::Array< ::Dynamic> Lexer_obj::tokenize(::String input){
            	HX_JUST_GC_STACKFRAME
	::Array< ::Dynamic> output =  ::hscript::Lexer_obj::__alloc( HX_CTX ,null())->create(input);
	if (::hx::IsPointerNotEq( output->__get((output->length - 1))->__Field(HX_("token",f9,82,2b,14),::hx::paccDynamic),::hscript::LToken_obj::LTEof_dyn() )) {
		output->push( ::Dynamic(::hx::Anon_obj::Create(4)
			->setFixed(0,HX_("max",a4,0a,53,00), ::Dynamic(output->__get((output->length - 1))->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)))
			->setFixed(1,HX_("min",92,11,53,00), ::Dynamic(output->__get((output->length - 1))->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)))
			->setFixed(2,HX_("token",f9,82,2b,14),::hscript::LToken_obj::LTEof_dyn())
			->setFixed(3,HX_("line",f4,17,b3,47), ::Dynamic(output->__get((output->length - 1))->__Field(HX_("line",f4,17,b3,47),::hx::paccDynamic)))));
	}
	return output;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lexer_obj,tokenize,return )

::String Lexer_obj::tokenToString( ::hscript::LToken ltoken){
	switch((int)(ltoken->_hx_getIndex())){
		case (int)0: {
			return HX_("(",28,00,00,00);
		}
		break;
		case (int)1: {
			return HX_(")",29,00,00,00);
		}
		break;
		case (int)2: {
			return HX_("[",5b,00,00,00);
		}
		break;
		case (int)3: {
			return HX_("]",5d,00,00,00);
		}
		break;
		case (int)4: {
			return HX_("{",7b,00,00,00);
		}
		break;
		case (int)5: {
			return HX_("}",7d,00,00,00);
		}
		break;
		case (int)6: {
			return HX_(",",2c,00,00,00);
		}
		break;
		case (int)7: {
			return HX_(".",2e,00,00,00);
		}
		break;
		case (int)8: {
			return HX_(":",3a,00,00,00);
		}
		break;
		case (int)9: {
			return HX_(";",3b,00,00,00);
		}
		break;
		case (int)10: {
			return HX_("?",3f,00,00,00);
		}
		break;
		case (int)11: {
			return HX_("?.",0f,37,00,00);
		}
		break;
		case (int)12: {
			return HX_("$",24,00,00,00);
		}
		break;
		case (int)13: {
			return ltoken->_hx_getString(0);
		}
		break;
		case (int)14: {
			return ::Std_obj::string(ltoken->_hx_getString(0));
		}
		break;
		case (int)15: {
			return ltoken->_hx_getString(0);
		}
		break;
		case (int)16: {
			 ::hscript::LConst _g = ltoken->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
			 ::Dynamic _hx_tmp;
			switch((int)(_g->_hx_getIndex())){
				case (int)0: {
					_hx_tmp = _g->_hx_getInt(0);
				}
				break;
				case (int)1: {
					_hx_tmp = _g->_hx_getFloat(0);
				}
				break;
				case (int)2: {
					_hx_tmp = _g->_hx_getString(0);
				}
				break;
				case (int)3: {
					_hx_tmp = _g->_hx_getBool(0);
				}
				break;
				case (int)4: {
					_hx_tmp = null();
				}
				break;
			}
			return ::Std_obj::string(_hx_tmp);
		}
		break;
		case (int)17: {
			return (HX_("@:",fa,37,00,00) + ltoken->_hx_getString(0));
		}
		break;
		case (int)18: {
			return (HX_("#if ",60,7d,72,17) + ltoken->_hx_getString(0));
		}
		break;
		case (int)19: {
			return HX_("EOF",9c,a0,34,00);
		}
		break;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lexer_obj,tokenToString,return )


::hx::ObjectPtr< Lexer_obj > Lexer_obj::__new(::String fileName) {
	::hx::ObjectPtr< Lexer_obj > __this = new Lexer_obj();
	__this->__construct(fileName);
	return __this;
}

::hx::ObjectPtr< Lexer_obj > Lexer_obj::__alloc(::hx::Ctx *_hx_ctx,::String fileName) {
	Lexer_obj *__this = (Lexer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Lexer_obj), true, "hscript.Lexer"));
	*(void **)__this = Lexer_obj::_hx_vtable;
	__this->__construct(fileName);
	return __this;
}

Lexer_obj::Lexer_obj()
{
}

void Lexer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Lexer);
	HX_MARK_MEMBER_NAME(character,"character");
	HX_MARK_MEMBER_NAME(charCode,"charCode");
	HX_MARK_MEMBER_NAME(tokenMin,"tokenMin");
	HX_MARK_MEMBER_NAME(tokenMax,"tokenMax");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_MEMBER_NAME(fileName,"fileName");
	HX_MARK_END_CLASS();
}

void Lexer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(character,"character");
	HX_VISIT_MEMBER_NAME(charCode,"charCode");
	HX_VISIT_MEMBER_NAME(tokenMin,"tokenMin");
	HX_VISIT_MEMBER_NAME(tokenMax,"tokenMax");
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
	HX_VISIT_MEMBER_NAME(fileName,"fileName");
}

::hx::Val Lexer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return ::hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"token") ) { return ::hx::Val( token_dyn() ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tokens") ) { return ::hx::Val( tokens ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"comment") ) { return ::hx::Val( comment_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { return ::hx::Val( charCode ); }
		if (HX_FIELD_EQ(inName,"tokenMin") ) { return ::hx::Val( tokenMin ); }
		if (HX_FIELD_EQ(inName,"tokenMax") ) { return ::hx::Val( tokenMax ); }
		if (HX_FIELD_EQ(inName,"fileName") ) { return ::hx::Val( fileName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { return ::hx::Val( character ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readString") ) { return ::hx::Val( readString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nativeToken") ) { return ::hx::Val( nativeToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidChar") ) { return ::hx::Val( invalidChar_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readCharacter") ) { return ::hx::Val( readCharacter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Lexer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"tokenize") ) { outValue = tokenize_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tokenToString") ) { outValue = tokenToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"OPERATOR_CHARS") ) { outValue = ( OPERATOR_CHARS ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"IDENTIFIER_CHARS") ) { outValue = ( IDENTIFIER_CHARS ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"OPERATOR_CHARS_LOOKUP") ) { outValue = ( OPERATOR_CHARS_LOOKUP ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"IDENTIFIER_CHARS_LOOKUP") ) { outValue = ( IDENTIFIER_CHARS_LOOKUP ); return true; }
	}
	return false;
}

::hx::Val Lexer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { charCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokenMin") ) { tokenMin=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokenMax") ) { tokenMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fileName") ) { fileName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { character=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Lexer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"OPERATOR_CHARS") ) { OPERATOR_CHARS=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"IDENTIFIER_CHARS") ) { IDENTIFIER_CHARS=ioValue.Cast< ::String >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"OPERATOR_CHARS_LOOKUP") ) { OPERATOR_CHARS_LOOKUP=ioValue.Cast< ::Array< bool > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"IDENTIFIER_CHARS_LOOKUP") ) { IDENTIFIER_CHARS_LOOKUP=ioValue.Cast< ::Array< bool > >(); return true; }
	}
	return false;
}

void Lexer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("character",a9,db,d1,41));
	outFields->push(HX_("charCode",23,5f,24,9c));
	outFields->push(HX_("tokenMin",19,a8,42,2b));
	outFields->push(HX_("tokenMax",2b,a1,42,2b));
	outFields->push(HX_("line",f4,17,b3,47));
	outFields->push(HX_("input",0a,c4,1d,be));
	outFields->push(HX_("tokens",5a,17,e7,91));
	outFields->push(HX_("fileName",e7,5a,43,62));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Lexer_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Lexer_obj,character),HX_("character",a9,db,d1,41)},
	{::hx::fsInt,(int)offsetof(Lexer_obj,charCode),HX_("charCode",23,5f,24,9c)},
	{::hx::fsInt,(int)offsetof(Lexer_obj,tokenMin),HX_("tokenMin",19,a8,42,2b)},
	{::hx::fsInt,(int)offsetof(Lexer_obj,tokenMax),HX_("tokenMax",2b,a1,42,2b)},
	{::hx::fsInt,(int)offsetof(Lexer_obj,line),HX_("line",f4,17,b3,47)},
	{::hx::fsString,(int)offsetof(Lexer_obj,input),HX_("input",0a,c4,1d,be)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Lexer_obj,tokens),HX_("tokens",5a,17,e7,91)},
	{::hx::fsString,(int)offsetof(Lexer_obj,fileName),HX_("fileName",e7,5a,43,62)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Lexer_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Lexer_obj::IDENTIFIER_CHARS,HX_("IDENTIFIER_CHARS",27,0d,62,a2)},
	{::hx::fsString,(void *) &Lexer_obj::OPERATOR_CHARS,HX_("OPERATOR_CHARS",a2,1a,94,a1)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &Lexer_obj::IDENTIFIER_CHARS_LOOKUP,HX_("IDENTIFIER_CHARS_LOOKUP",d2,55,08,17)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &Lexer_obj::OPERATOR_CHARS_LOOKUP,HX_("OPERATOR_CHARS_LOOKUP",b7,bd,1e,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Lexer_obj_sMemberFields[] = {
	HX_("character",a9,db,d1,41),
	HX_("charCode",23,5f,24,9c),
	HX_("tokenMin",19,a8,42,2b),
	HX_("tokenMax",2b,a1,42,2b),
	HX_("line",f4,17,b3,47),
	HX_("input",0a,c4,1d,be),
	HX_("tokens",5a,17,e7,91),
	HX_("fileName",e7,5a,43,62),
	HX_("create",fc,66,0f,7c),
	HX_("reset",cf,49,c8,e6),
	HX_("token",f9,82,2b,14),
	HX_("nativeToken",e2,05,27,7b),
	HX_("push",da,11,61,4a),
	HX_("readString",c7,0c,ac,0a),
	HX_("comment",5f,7a,70,81),
	HX_("readCharacter",73,55,40,d5),
	HX_("invalidChar",6d,ad,ce,a9),
	HX_("error",c8,cb,29,73),
	::String(null()) };

static void Lexer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lexer_obj::IDENTIFIER_CHARS,"IDENTIFIER_CHARS");
	HX_MARK_MEMBER_NAME(Lexer_obj::OPERATOR_CHARS,"OPERATOR_CHARS");
	HX_MARK_MEMBER_NAME(Lexer_obj::IDENTIFIER_CHARS_LOOKUP,"IDENTIFIER_CHARS_LOOKUP");
	HX_MARK_MEMBER_NAME(Lexer_obj::OPERATOR_CHARS_LOOKUP,"OPERATOR_CHARS_LOOKUP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lexer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lexer_obj::IDENTIFIER_CHARS,"IDENTIFIER_CHARS");
	HX_VISIT_MEMBER_NAME(Lexer_obj::OPERATOR_CHARS,"OPERATOR_CHARS");
	HX_VISIT_MEMBER_NAME(Lexer_obj::IDENTIFIER_CHARS_LOOKUP,"IDENTIFIER_CHARS_LOOKUP");
	HX_VISIT_MEMBER_NAME(Lexer_obj::OPERATOR_CHARS_LOOKUP,"OPERATOR_CHARS_LOOKUP");
};

#endif

::hx::Class Lexer_obj::__mClass;

static ::String Lexer_obj_sStaticFields[] = {
	HX_("IDENTIFIER_CHARS",27,0d,62,a2),
	HX_("OPERATOR_CHARS",a2,1a,94,a1),
	HX_("IDENTIFIER_CHARS_LOOKUP",d2,55,08,17),
	HX_("OPERATOR_CHARS_LOOKUP",b7,bd,1e,4d),
	HX_("tokenize",fb,f5,57,2b),
	HX_("tokenToString",c5,30,6d,8d),
	::String(null())
};

void Lexer_obj::__register()
{
	Lexer_obj _hx_dummy;
	Lexer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Lexer",b1,87,2a,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lexer_obj::__GetStatic;
	__mClass->mSetStaticField = &Lexer_obj::__SetStatic;
	__mClass->mMarkFunc = Lexer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Lexer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Lexer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Lexer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lexer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lexer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lexer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Lexer_obj::__boot()
{
{
	IDENTIFIER_CHARS = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_",e0,b5,3b,15);
}
{
	OPERATOR_CHARS = HX_("+*/-=!><&|^%~",e2,ec,c4,dc);
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	::Array< bool > _hx_run(){
		::Array< bool > LOOKUP_ARRAY = ::Array_obj< bool >::__new(0);
		{
			int _g = 0;
			int _g1 = ::hscript::Lexer_obj::IDENTIFIER_CHARS.length;
			while((_g < _g1)){
				_g = (_g + 1);
				LOOKUP_ARRAY[( (int)(::hscript::Lexer_obj::IDENTIFIER_CHARS.charCodeAt((_g - 1))) )] = true;
			}
		}
		return LOOKUP_ARRAY;
	}
	HX_END_LOCAL_FUNC0(return)

	IDENTIFIER_CHARS_LOOKUP = ( (::Array< bool >)( ::Dynamic(new _hx_Closure_0())()) );
}
{
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
	::Array< bool > _hx_run(){
		::Array< bool > LOOKUP_ARRAY = ::Array_obj< bool >::__new(0);
		{
			int _g = 0;
			int _g1 = ::hscript::Lexer_obj::OPERATOR_CHARS.length;
			while((_g < _g1)){
				_g = (_g + 1);
				LOOKUP_ARRAY[( (int)(::hscript::Lexer_obj::OPERATOR_CHARS.charCodeAt((_g - 1))) )] = true;
			}
		}
		return LOOKUP_ARRAY;
	}
	HX_END_LOCAL_FUNC0(return)

	OPERATOR_CHARS_LOOKUP = ( (::Array< bool >)( ::Dynamic(new _hx_Closure_0())()) );
}
}

} // end namespace hscript
