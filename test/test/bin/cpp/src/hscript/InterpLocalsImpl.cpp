// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_InterpLocalsImpl
#include <hscript/InterpLocalsImpl.h>
#endif
#ifndef INCLUDED_hscript_ScriptRuntime
#include <hscript/ScriptRuntime.h>
#endif

namespace hscript{

void InterpLocalsImpl_obj::__construct( ::hscript::ScriptRuntime parent){
            	HX_JUST_GC_STACKFRAME
	this->useDefaults = true;
	this->defaultsValues =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
	this->parent = parent;
}

Dynamic InterpLocalsImpl_obj::__CreateEmpty() { return new InterpLocalsImpl_obj; }

void *InterpLocalsImpl_obj::_hx_vtable = 0;

Dynamic InterpLocalsImpl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InterpLocalsImpl_obj > _hx_result = new InterpLocalsImpl_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InterpLocalsImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71224bef;
}

void InterpLocalsImpl_obj::loadDefaults(){
	this->useDefaults = false;
	{
		::Dynamic this1 = this->defaultsValues;
		 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(this1);
		while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
			::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
			 ::Dynamic _g_value = ::haxe::IMap_obj::get(this1,key);
			if (this->useDefaults) {
				this->defaultsValues->set(key,_g_value);
			}
			else {
				bool _hx_tmp;
				if (::hx::IsNotNull( this->parent->variablesLookup )) {
					_hx_tmp = this->parent->variablesLookup->exists(key);
				}
				else {
					_hx_tmp = false;
				}
				if (_hx_tmp) {
					 ::hscript::ScriptRuntime _this = this->parent;
					int name = this->parent->variablesLookup->get_int(key);
					_this->variablesDeclared->__unsafe_set(name,true);
					_hx_array_unsafe_get(_this->variablesValues,name)->__SetField(HX_("r",72,00,00,00),_g_value,::hx::paccDynamic);
				}
			}
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC0(InterpLocalsImpl_obj,loadDefaults,(void))

void InterpLocalsImpl_obj::set(::String key, ::Dynamic value){
	if (this->useDefaults) {
		this->defaultsValues->set(key,value);
	}
	else {
		bool _hx_tmp;
		if (::hx::IsNotNull( this->parent->variablesLookup )) {
			_hx_tmp = this->parent->variablesLookup->exists(key);
		}
		else {
			_hx_tmp = false;
		}
		if (_hx_tmp) {
			 ::hscript::ScriptRuntime _this = this->parent;
			int name = this->parent->variablesLookup->get_int(key);
			_this->variablesDeclared->__unsafe_set(name,true);
			_hx_array_unsafe_get(_this->variablesValues,name)->__SetField(HX_("r",72,00,00,00),value,::hx::paccDynamic);
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC2(InterpLocalsImpl_obj,set,(void))

 ::Dynamic InterpLocalsImpl_obj::get(::String key){
	if (this->useDefaults) {
		return this->defaultsValues->get(key);
	}
	else {
		bool _hx_tmp;
		if (::hx::IsNotNull( this->parent->variablesLookup )) {
			_hx_tmp = this->parent->variablesLookup->exists(key);
		}
		else {
			_hx_tmp = false;
		}
		if (_hx_tmp) {
			int varID = this->parent->variablesLookup->get_int(key);
			if (( (bool)(_hx_array_unsafe_get(this->parent->variablesDeclared,varID)) )) {
				return _hx_array_unsafe_get(this->parent->variablesValues,varID);
			}
			else {
				return null();
			}
		}
		else {
			return null();
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(InterpLocalsImpl_obj,get,return )

bool InterpLocalsImpl_obj::exists(::String key){
	bool _hx_tmp;
	if (::hx::IsNotNull( this->parent->variablesLookup )) {
		_hx_tmp = this->parent->variablesLookup->exists(key);
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		::Array< bool > this1 = this->parent->variablesDeclared;
		return ( (bool)(_hx_array_unsafe_get(this1,this->parent->variablesLookup->get_int(key))) );
	}
	else {
		return false;
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(InterpLocalsImpl_obj,exists,return )


::hx::ObjectPtr< InterpLocalsImpl_obj > InterpLocalsImpl_obj::__new( ::hscript::ScriptRuntime parent) {
	::hx::ObjectPtr< InterpLocalsImpl_obj > __this = new InterpLocalsImpl_obj();
	__this->__construct(parent);
	return __this;
}

::hx::ObjectPtr< InterpLocalsImpl_obj > InterpLocalsImpl_obj::__alloc(::hx::Ctx *_hx_ctx, ::hscript::ScriptRuntime parent) {
	InterpLocalsImpl_obj *__this = (InterpLocalsImpl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InterpLocalsImpl_obj), true, "hscript.InterpLocalsImpl"));
	*(void **)__this = InterpLocalsImpl_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

InterpLocalsImpl_obj::InterpLocalsImpl_obj()
{
}

void InterpLocalsImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InterpLocalsImpl);
	HX_MARK_MEMBER_NAME(defaultsValues,"defaultsValues");
	HX_MARK_MEMBER_NAME(useDefaults,"useDefaults");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_END_CLASS();
}

void InterpLocalsImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(defaultsValues,"defaultsValues");
	HX_VISIT_MEMBER_NAME(useDefaults,"useDefaults");
	HX_VISIT_MEMBER_NAME(parent,"parent");
}

::hx::Val InterpLocalsImpl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"useDefaults") ) { return ::hx::Val( useDefaults ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadDefaults") ) { return ::hx::Val( loadDefaults_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultsValues") ) { return ::hx::Val( defaultsValues ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InterpLocalsImpl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::hscript::ScriptRuntime >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"useDefaults") ) { useDefaults=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultsValues") ) { defaultsValues=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InterpLocalsImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("defaultsValues",14,02,5f,94));
	outFields->push(HX_("useDefaults",f9,d7,a4,09));
	outFields->push(HX_("parent",2a,05,7e,ed));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InterpLocalsImpl_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(InterpLocalsImpl_obj,defaultsValues),HX_("defaultsValues",14,02,5f,94)},
	{::hx::fsBool,(int)offsetof(InterpLocalsImpl_obj,useDefaults),HX_("useDefaults",f9,d7,a4,09)},
	{::hx::fsObject /*  ::hscript::ScriptRuntime */ ,(int)offsetof(InterpLocalsImpl_obj,parent),HX_("parent",2a,05,7e,ed)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InterpLocalsImpl_obj_sStaticStorageInfo = 0;
#endif

static ::String InterpLocalsImpl_obj_sMemberFields[] = {
	HX_("defaultsValues",14,02,5f,94),
	HX_("useDefaults",f9,d7,a4,09),
	HX_("loadDefaults",d8,bc,02,69),
	HX_("parent",2a,05,7e,ed),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("exists",dc,1d,e0,bf),
	::String(null()) };

::hx::Class InterpLocalsImpl_obj::__mClass;

void InterpLocalsImpl_obj::__register()
{
	InterpLocalsImpl_obj _hx_dummy;
	InterpLocalsImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.InterpLocalsImpl",17,fd,40,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InterpLocalsImpl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InterpLocalsImpl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InterpLocalsImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InterpLocalsImpl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
