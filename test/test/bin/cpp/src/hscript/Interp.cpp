// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_Either
#include <haxe/ds/Either.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Argument
#include <hscript/Argument.h>
#endif
#ifndef INCLUDED_hscript_EImportMode
#include <hscript/EImportMode.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_ErrorDef
#include <hscript/ErrorDef.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ExprDef
#include <hscript/ExprDef.h>
#endif
#ifndef INCLUDED_hscript_IHScriptCustomBehaviour
#include <hscript/IHScriptCustomBehaviour.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_LConst
#include <hscript/LConst.h>
#endif
#ifndef INCLUDED_hscript_ObjectField
#include <hscript/ObjectField.h>
#endif
#ifndef INCLUDED_hscript_ScriptRuntime
#include <hscript/ScriptRuntime.h>
#endif
#ifndef INCLUDED_hscript_StaticInterp
#include <hscript/StaticInterp.h>
#endif
#ifndef INCLUDED_hscript_SwitchCase
#include <hscript/SwitchCase.h>
#endif
#ifndef INCLUDED_hscript__Interp_IDeclaredVariable
#include <hscript/_Interp/IDeclaredVariable.h>
#endif
#ifndef INCLUDED_hscript__Interp_IScriptParentType
#include <hscript/_Interp/IScriptParentType.h>
#endif
#ifndef INCLUDED_hscript__Interp_IStop
#include <hscript/_Interp/IStop.h>
#endif

static const int _hx_array_data_9af07c8f_31[] = {
	(int)0,
};
namespace hscript{

void Interp_obj::__construct(::String fileName){
	super::__construct(fileName);
}

Dynamic Interp_obj::__CreateEmpty() { return new Interp_obj; }

void *Interp_obj::_hx_vtable = 0;

Dynamic Interp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interp_obj > _hx_result = new Interp_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Interp_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2a95eb9f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2a95eb9f;
	} else {
		return inClassId==(int)0x2acd4ada;
	}
}

 ::Dynamic Interp_obj::execute( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	 ::hscript::ExprDef _g = expr->expr;
	if ((_g->_hx_getIndex() == 29)) {
		this->loadTables(_g->_hx_getObject(0).StaticCast< ::Array< ::String > >());
		this->loadBaseVariables();
		return this->safeInterpReturnExpr(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
	}
	else {
		 ::Dynamic line = expr->line;
		int _hx_tmp;
		if (::hx::IsNotNull( line )) {
			_hx_tmp = ( (int)(line) );
		}
		else {
			_hx_tmp = this->lineNumber;
		}
		HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::ECustom(HX_("Missing EInfo()",3a,2a,10,07)),null(),null(),this->fileName,_hx_tmp));
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,execute,return )

 ::Dynamic Interp_obj::interpExpr( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	if (::hx::IsNull( expr )) {
		return null();
	}
	this->lineNumber = expr->line;
	 ::hscript::ExprDef _g = expr->expr;
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			 ::hscript::LConst _g1 = _g->_hx_getObject(0).StaticCast<  ::hscript::LConst >();
			switch((int)(_g1->_hx_getIndex())){
				case (int)0: {
					return _g1->_hx_getInt(0);
				}
				break;
				case (int)1: {
					return _g1->_hx_getFloat(0);
				}
				break;
				case (int)2: {
					return _g1->_hx_getString(0);
				}
				break;
				case (int)3: {
					return _g1->_hx_getBool(0);
				}
				break;
				case (int)4: {
					return null();
				}
				break;
			}
		}
		break;
		case (int)1: {
			int _g2 = _g->_hx_getInt(0);
			if (( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g2)) )) {
				return  ::Dynamic(_hx_array_unsafe_get(this->variablesValues,_g2)->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
			}
			else {
				return this->resolveGlobal(_g2);
			}
		}
		break;
		case (int)2: {
			int _g3 = _g->_hx_getInt(0);
			 ::hscript::Expr _g4 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			if ((this->depth == 0)) {
				::String varName = ( (::String)(_hx_array_unsafe_get(this->variableNames,_g3)) );
				bool _hx_tmp;
				if (( (bool)(_g->_hx_getObject(3)) )) {
					_hx_tmp = !(::hscript::StaticInterp_obj::staticVariables->exists(varName));
				}
				else {
					_hx_tmp = false;
				}
				if (_hx_tmp) {
					 ::haxe::ds::StringMap _hx_tmp1 = ::hscript::StaticInterp_obj::staticVariables;
					_hx_tmp1->set(varName,this->interpExpr(_g4));
					return null();
				}
				bool _hx_tmp2;
				if (( (bool)(_g->_hx_getObject(2)) )) {
					_hx_tmp2 = ::hx::IsNotNull( this->publicVariables );
				}
				else {
					_hx_tmp2 = false;
				}
				if (_hx_tmp2) {
					 ::haxe::ds::StringMap _hx_tmp3 = this->publicVariables;
					_hx_tmp3->set(varName,this->interpExpr(_g4));
					return null();
				}
			}
			{
				 ::Dynamic value;
				if (::hx::IsNull( _g4 )) {
					value = null();
				}
				else {
					value = this->interpExpr(_g4);
				}
				::Array< ::Dynamic> _hx_tmp4 = this->changes;
				bool _g5 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g3)) );
				_hx_tmp4->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g3,_g5,_hx_array_unsafe_get(this->variablesValues,_g3)));
				this->variablesDeclared->__unsafe_set(_g3,true);
				this->variablesValues->__unsafe_set(_g3, ::Dynamic(::hx::Anon_obj::Create(1)
					->setFixed(0,HX_("r",72,00,00,00),value)));
			}
			return null();
		}
		break;
		case (int)3: {
			return this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)4: {
			::Array< ::Dynamic> _g6 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			int old = this->changes->length;
			 ::Dynamic value1 = null();
			{
				int _g7 = 0;
				while((_g7 < _g6->length)){
					 ::hscript::Expr expr1 = _g6->__get(_g7).StaticCast<  ::hscript::Expr >();
					_g7 = (_g7 + 1);
					value1 = this->interpExpr(expr1);
				}
			}
			while((this->changes->length > old)){
				 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
				int name = change->name;
				if (change->oldDeclared) {
					this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
					this->variablesValues->__unsafe_set(name,change->oldValue);
				}
				else {
					this->variablesDeclared->__unsafe_set(name,false);
					this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),null())));
				}
			}
			return value1;
		}
		break;
		case (int)5: {
			::String _g8 = _g->_hx_getString(1);
			 ::Dynamic obj = this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			bool _hx_tmp5;
			if (( (bool)(_g->_hx_getObject(2)) )) {
				_hx_tmp5 = ::hx::IsNull( obj );
			}
			else {
				_hx_tmp5 = false;
			}
			if (_hx_tmp5) {
				return null();
			}
			 ::Dynamic _hx_tmp6;
			if (::Std_obj::isOfType(obj,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
				_hx_tmp6 = ::hscript::IHScriptCustomBehaviour_obj::hget(obj,_g8);
			}
			else {
				_hx_tmp6 = ::Reflect_obj::getProperty(obj,_g8);
			}
			return _hx_tmp6;
		}
		break;
		case (int)6: {
			unsigned char _g9 = ( (unsigned char)(_g->_hx_getInt(0)) );
			 ::hscript::Expr _g10 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g11 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			unsigned char _hx_switch_0 = _g9;
			if (  (_hx_switch_0==( (unsigned char)(0) )) ){
				 ::Dynamic _hx_tmp7 = this->interpExpr(_g10);
				return (_hx_tmp7 + this->interpExpr(_g11));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(1) )) ){
				 ::Dynamic _hx_tmp8 = this->interpExpr(_g10);
				return (( (Float)(_hx_tmp8) ) - ( (Float)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(2) )) ){
				 ::Dynamic _hx_tmp9 = this->interpExpr(_g10);
				return (( (Float)(_hx_tmp9) ) * ( (Float)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(3) )) ){
				 ::Dynamic _hx_tmp10 = this->interpExpr(_g10);
				return (( (Float)(_hx_tmp10) ) / ( (Float)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(4) )) ){
				 ::Dynamic _hx_tmp11 = this->interpExpr(_g10);
				return ::hx::Mod(_hx_tmp11,this->interpExpr(_g11));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(5) )) ){
				 ::Dynamic _hx_tmp12 = this->interpExpr(_g10);
				return (( (int)(_hx_tmp12) ) & ( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(6) )) ){
				 ::Dynamic _hx_tmp13 = this->interpExpr(_g10);
				return (( (int)(_hx_tmp13) ) | ( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(7) )) ){
				 ::Dynamic _hx_tmp14 = this->interpExpr(_g10);
				return (( (int)(_hx_tmp14) ) ^ ( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(8) )) ){
				 ::Dynamic _hx_tmp15 = this->interpExpr(_g10);
				return (( (int)(_hx_tmp15) ) << ( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(9) )) ){
				 ::Dynamic _hx_tmp16 = this->interpExpr(_g10);
				return (( (int)(_hx_tmp16) ) >> ( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(10) )) ){
				 ::Dynamic _hx_tmp17 = this->interpExpr(_g10);
				return ::hx::UShr(( (int)(_hx_tmp17) ),( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(11) )) ){
				 ::Dynamic _hx_tmp18 = this->interpExpr(_g10);
				return ::hx::IsEq( _hx_tmp18,this->interpExpr(_g11) );
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(12) )) ){
				 ::Dynamic _hx_tmp19 = this->interpExpr(_g10);
				return ::hx::IsNotEq( _hx_tmp19,this->interpExpr(_g11) );
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(13) )) ){
				 ::Dynamic _hx_tmp20 = this->interpExpr(_g10);
				return ::hx::IsGreaterEq( _hx_tmp20,this->interpExpr(_g11) );
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(14) )) ){
				 ::Dynamic _hx_tmp21 = this->interpExpr(_g10);
				return ::hx::IsLessEq( _hx_tmp21,this->interpExpr(_g11) );
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(15) )) ){
				 ::Dynamic _hx_tmp22 = this->interpExpr(_g10);
				return ::hx::IsGreater( _hx_tmp22,this->interpExpr(_g11) );
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(16) )) ){
				 ::Dynamic _hx_tmp23 = this->interpExpr(_g10);
				return ::hx::IsLess( _hx_tmp23,this->interpExpr(_g11) );
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(17) )) ){
				if (!(( (bool)(this->interpExpr(_g10)) ))) {
					return this->interpExpr(_g11);
				}
				else {
					return true;
				}
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(18) )) ){
				if (( (bool)(this->interpExpr(_g10)) )) {
					return this->interpExpr(_g11);
				}
				else {
					return false;
				}
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(19) )) ){
				 ::Dynamic _hx_tmp24 = this->interpExpr(_g10);
				return ::Std_obj::isOfType(_hx_tmp24,this->interpExpr(_g11));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(20) )) ){
				 ::Dynamic tmp = this->interpExpr(_g10);
				if (::hx::IsNotNull( tmp )) {
					return tmp;
				}
				else {
					return this->interpExpr(_g11);
				}
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(21) )) ){
				 ::Dynamic _hx_tmp25 = this->interpExpr(_g10);
				return  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(_hx_tmp25) ),( (int)(this->interpExpr(_g11)) ));
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(22) )) ){
				return null();
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(23) )) ){
				return this->assignExpr(_g10,_g11);
				goto _hx_goto_2;
			}
			if (  (_hx_switch_0==( (unsigned char)(24) )) ||  (_hx_switch_0==( (unsigned char)(25) )) ||  (_hx_switch_0==( (unsigned char)(26) )) ||  (_hx_switch_0==( (unsigned char)(27) )) ||  (_hx_switch_0==( (unsigned char)(28) )) ||  (_hx_switch_0==( (unsigned char)(29) )) ||  (_hx_switch_0==( (unsigned char)(30) )) ||  (_hx_switch_0==( (unsigned char)(31) )) ||  (_hx_switch_0==( (unsigned char)(32) )) ||  (_hx_switch_0==( (unsigned char)(33) )) ||  (_hx_switch_0==( (unsigned char)(34) )) ||  (_hx_switch_0==( (unsigned char)(35) )) ){
				return this->assignExprOp(_g9,_g10,_g11);
				goto _hx_goto_2;
			}
			_hx_goto_2:;
		}
		break;
		case (int)7: {
			 ::hscript::Expr _g12 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			unsigned char _hx_switch_1 = ( (unsigned char)(_g->_hx_getInt(0)) );
			if (  (_hx_switch_1==( (unsigned char)(0) )) ){
				return ~(( (int)(this->interpExpr(_g12)) ));
				goto _hx_goto_3;
			}
			if (  (_hx_switch_1==( (unsigned char)(1) )) ){
				return !(( (bool)(this->interpExpr(_g12)) ));
				goto _hx_goto_3;
			}
			if (  (_hx_switch_1==( (unsigned char)(2) )) ){
				return -(this->interpExpr(_g12));
				goto _hx_goto_3;
			}
			if (  (_hx_switch_1==( (unsigned char)(3) )) ){
				return this->assignExprOp(( (unsigned char)(24) ),_g12, ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(1)),_g12->line));
				goto _hx_goto_3;
			}
			if (  (_hx_switch_1==( (unsigned char)(4) )) ){
				return this->assignExprOp(( (unsigned char)(24) ),_g12, ::hscript::Expr_obj::__alloc( HX_CTX ,::hscript::ExprDef_obj::EConst(::hscript::LConst_obj::LCInt(-1)),_g12->line));
				goto _hx_goto_3;
			}
			_hx_goto_3:;
		}
		break;
		case (int)8: {
			 ::hscript::Expr _g13 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			::Array< ::Dynamic> _g14 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::cpp::VirtualArray _g15 = ::cpp::VirtualArray_obj::__new(0);
			{
				int _g16 = 0;
				while((_g16 < _g14->length)){
					 ::hscript::Expr arg = _g14->__get(_g16).StaticCast<  ::hscript::Expr >();
					_g16 = (_g16 + 1);
					_g15->push(this->interpExpr(arg));
				}
			}
			 ::hscript::ExprDef _g17 = _g13->expr;
			if ((_g17->_hx_getIndex() == 5)) {
				 ::hscript::Expr _g18 = _g17->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
				::String _g19 = _g17->_hx_getString(1);
				 ::Dynamic object = this->interpExpr(_g18);
				if (::hx::IsNull( object )) {
					if (( (bool)(_g17->_hx_getObject(2)) )) {
						return null();
					}
					 ::Dynamic line = _g18->line;
					int _hx_tmp26;
					if (::hx::IsNotNull( line )) {
						_hx_tmp26 = ( (int)(line) );
					}
					else {
						_hx_tmp26 = this->lineNumber;
					}
					HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidAccess(_g19),null(),null(),this->fileName,_hx_tmp26));
				}
				 ::Dynamic field;
				if (::Std_obj::isOfType(object,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
					field = ::hscript::IHScriptCustomBehaviour_obj::hget(object,_g19);
				}
				else {
					field = ::Reflect_obj::getProperty(object,_g19);
				}
				return ::Reflect_obj::callMethod(object,field,_g15);
			}
			else {
				 ::Dynamic object1 = null();
				return ::Reflect_obj::callMethod(object1,this->interpExpr(_g13),_g15);
			}
		}
		break;
		case (int)9: {
			 ::hscript::Expr _g20 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			if (::hx::IsEq( this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()),true )) {
				return this->interpExpr(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			}
			else {
				if (::hx::IsNotNull( _g20 )) {
					return this->interpExpr(_g20);
				}
				else {
					return null();
				}
			}
		}
		break;
		case (int)10: {
			 ::hscript::Expr _g21 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g22 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			{
				int old1 = this->changes->length;
				while(::hx::IsEq( this->interpExpr(_g21),true )){
					bool continueLoop = true;
					try {
						HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
						this->interpExpr(_g22);
					} catch( ::Dynamic _hx_e) {
						if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
							HX_STACK_BEGIN_CATCH
							 ::hscript::_Interp::IStop stop1 = _hx_e;
							switch((int)(stop1->_hx_getIndex())){
								case (int)0: {
									continueLoop = false;
								}
								break;
								case (int)1: {
								}
								break;
								case (int)2: {
									HX_STACK_DO_THROW(stop1);
								}
								break;
							}
						}
						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
							HX_STACK_BEGIN_CATCH
							 ::haxe::ValueException _g23 = _hx_e;
							{
								null();
							}
							if (::Std_obj::isOfType(_g23->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
								 ::hscript::_Interp::IStop stop1 = _g23->value;
								switch((int)(stop1->_hx_getIndex())){
									case (int)0: {
										continueLoop = false;
									}
									break;
									case (int)1: {
									}
									break;
									case (int)2: {
										HX_STACK_DO_THROW(stop1);
									}
									break;
								}
							}
							else {
								HX_STACK_DO_THROW(_g23);
							}
						}
						else {
							HX_STACK_DO_THROW(_hx_e);
						}
					}
					if (!(continueLoop)) {
						goto _hx_goto_5;
					}
				}
				_hx_goto_5:;
				while((this->changes->length > old1)){
					 ::hscript::_Interp::IDeclaredVariable change1 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
					int name1 = change1->name;
					if (change1->oldDeclared) {
						this->variablesDeclared->__unsafe_set(name1,change1->oldDeclared);
						this->variablesValues->__unsafe_set(name1,change1->oldValue);
					}
					else {
						this->variablesDeclared->__unsafe_set(name1,false);
						this->variablesValues->__unsafe_set(name1, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),null())));
					}
				}
			}
			return null();
		}
		break;
		case (int)11: {
			int _g24 = _g->_hx_getInt(0);
			 ::hscript::Expr _g25 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g26 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			{
				int old2 = this->changes->length;
				{
					 ::Dynamic value2 = null();
					::Array< ::Dynamic> _hx_tmp27 = this->changes;
					bool _g27 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g24)) );
					_hx_tmp27->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g24,_g27,_hx_array_unsafe_get(this->variablesValues,_g24)));
					this->variablesDeclared->__unsafe_set(_g24,true);
					this->variablesValues->__unsafe_set(_g24, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),value2)));
				}
				 ::Dynamic untypedIterator = this->interpExpr(_g25);
				 ::Dynamic value3 = untypedIterator;
				if (::hx::IsNotNull( untypedIterator->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic) )) {
					try {
						HX_STACK_CATCHABLE( ::Dynamic, 0);
						value3 = untypedIterator->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
					} catch( ::Dynamic _hx_e) {
						if (_hx_e.IsClass<  ::Dynamic >() ){
							HX_STACK_BEGIN_CATCH
							 ::Dynamic _g28 = _hx_e;
							{
								null();
							}
						}
						else {
							HX_STACK_DO_THROW(_hx_e);
						}
					}
				}
				 ::Dynamic iterator;
				bool iterator1;
				if (::hx::IsNotNull( value3->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
					iterator1 = ::hx::IsNull( value3->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
				}
				else {
					iterator1 = true;
				}
				if (iterator1) {
					iterator = null();
				}
				else {
					iterator = value3;
				}
				 ::Dynamic iterator2;
				if (::hx::IsNull( iterator )) {
					 ::Dynamic line1 = _g25->line;
					int iterator3;
					if (::hx::IsNotNull( line1 )) {
						iterator3 = ( (int)(line1) );
					}
					else {
						iterator3 = this->lineNumber;
					}
					HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidIterator(untypedIterator),null(),null(),this->fileName,iterator3));
				}
				else {
					iterator2 = iterator;
				}
				while(( (bool)(iterator2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
					{
						 ::Dynamic value4 = iterator2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
						::Array< ::Dynamic> _hx_tmp28 = this->changes;
						bool _g29 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g24)) );
						_hx_tmp28->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g24,_g29,_hx_array_unsafe_get(this->variablesValues,_g24)));
						this->variablesDeclared->__unsafe_set(_g24,true);
						this->variablesValues->__unsafe_set(_g24, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),value4)));
					}
					bool continueLoop1 = true;
					try {
						HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
						this->interpExpr(_g26);
					} catch( ::Dynamic _hx_e) {
						if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
							HX_STACK_BEGIN_CATCH
							 ::hscript::_Interp::IStop stop21 = _hx_e;
							switch((int)(stop21->_hx_getIndex())){
								case (int)0: {
									continueLoop1 = false;
								}
								break;
								case (int)1: {
								}
								break;
								case (int)2: {
									HX_STACK_DO_THROW(stop21);
								}
								break;
							}
						}
						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
							HX_STACK_BEGIN_CATCH
							 ::haxe::ValueException _g30 = _hx_e;
							{
								null();
							}
							if (::Std_obj::isOfType(_g30->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
								 ::hscript::_Interp::IStop stop21 = _g30->value;
								switch((int)(stop21->_hx_getIndex())){
									case (int)0: {
										continueLoop1 = false;
									}
									break;
									case (int)1: {
									}
									break;
									case (int)2: {
										HX_STACK_DO_THROW(stop21);
									}
									break;
								}
							}
							else {
								HX_STACK_DO_THROW(_g30);
							}
						}
						else {
							HX_STACK_DO_THROW(_hx_e);
						}
					}
					if (!(continueLoop1)) {
						goto _hx_goto_7;
					}
				}
				_hx_goto_7:;
				while((this->changes->length > old2)){
					 ::hscript::_Interp::IDeclaredVariable change2 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
					int name2 = change2->name;
					if (change2->oldDeclared) {
						this->variablesDeclared->__unsafe_set(name2,change2->oldDeclared);
						this->variablesValues->__unsafe_set(name2,change2->oldValue);
					}
					else {
						this->variablesDeclared->__unsafe_set(name2,false);
						this->variablesValues->__unsafe_set(name2, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),null())));
					}
				}
			}
			return null();
		}
		break;
		case (int)12: {
			int _g31 = _g->_hx_getInt(0);
			int _g32 = _g->_hx_getInt(1);
			 ::hscript::Expr _g33 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g34 = _g->_hx_getObject(3).StaticCast<  ::hscript::Expr >();
			{
				int old3 = this->changes->length;
				{
					 ::Dynamic value5 = null();
					::Array< ::Dynamic> _hx_tmp29 = this->changes;
					bool _g35 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g31)) );
					_hx_tmp29->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g31,_g35,_hx_array_unsafe_get(this->variablesValues,_g31)));
					this->variablesDeclared->__unsafe_set(_g31,true);
					this->variablesValues->__unsafe_set(_g31, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),value5)));
				}
				{
					 ::Dynamic value6 = null();
					::Array< ::Dynamic> _hx_tmp30 = this->changes;
					bool _g36 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g32)) );
					_hx_tmp30->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g32,_g36,_hx_array_unsafe_get(this->variablesValues,_g32)));
					this->variablesDeclared->__unsafe_set(_g32,true);
					this->variablesValues->__unsafe_set(_g32, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),value6)));
				}
				 ::Dynamic untypedIterator1 = this->interpExpr(_g33);
				 ::Dynamic value7 = untypedIterator1;
				try {
					HX_STACK_CATCHABLE( ::Dynamic, 0);
					value7 = untypedIterator1->__Field(HX_("keyValueIterator",60,cd,ee,4a),::hx::paccDynamic)();
				} catch( ::Dynamic _hx_e) {
					if (_hx_e.IsClass<  ::Dynamic >() ){
						HX_STACK_BEGIN_CATCH
						 ::Dynamic _g37 = _hx_e;
						{
							null();
						}
					}
					else {
						HX_STACK_DO_THROW(_hx_e);
					}
				}
				 ::Dynamic iterator4;
				bool iterator5;
				if (::hx::IsNotNull( value7->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
					iterator5 = ::hx::IsNull( value7->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
				}
				else {
					iterator5 = true;
				}
				if (iterator5) {
					iterator4 = null();
				}
				else {
					iterator4 = value7;
				}
				 ::Dynamic iterator6;
				if (::hx::IsNull( iterator4 )) {
					 ::Dynamic line2 = _g33->line;
					int iterator7;
					if (::hx::IsNotNull( line2 )) {
						iterator7 = ( (int)(line2) );
					}
					else {
						iterator7 = this->lineNumber;
					}
					HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidIterator(untypedIterator1),null(),null(),this->fileName,iterator7));
				}
				else {
					iterator6 = iterator4;
				}
				while(( (bool)(iterator6->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
					 ::Dynamic iteratorValue = iterator6->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
					{
						 ::Dynamic value8 =  ::Dynamic(iteratorValue->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic));
						::Array< ::Dynamic> _hx_tmp31 = this->changes;
						bool _g38 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g31)) );
						_hx_tmp31->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g31,_g38,_hx_array_unsafe_get(this->variablesValues,_g31)));
						this->variablesDeclared->__unsafe_set(_g31,true);
						this->variablesValues->__unsafe_set(_g31, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),value8)));
					}
					{
						 ::Dynamic value9 =  ::Dynamic(iteratorValue->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
						::Array< ::Dynamic> _hx_tmp32 = this->changes;
						bool _g39 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g32)) );
						_hx_tmp32->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g32,_g39,_hx_array_unsafe_get(this->variablesValues,_g32)));
						this->variablesDeclared->__unsafe_set(_g32,true);
						this->variablesValues->__unsafe_set(_g32, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),value9)));
					}
					bool continueLoop2 = true;
					try {
						HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
						this->interpExpr(_g34);
					} catch( ::Dynamic _hx_e) {
						if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
							HX_STACK_BEGIN_CATCH
							 ::hscript::_Interp::IStop stop31 = _hx_e;
							switch((int)(stop31->_hx_getIndex())){
								case (int)0: {
									continueLoop2 = false;
								}
								break;
								case (int)1: {
								}
								break;
								case (int)2: {
									HX_STACK_DO_THROW(stop31);
								}
								break;
							}
						}
						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
							HX_STACK_BEGIN_CATCH
							 ::haxe::ValueException _g40 = _hx_e;
							{
								null();
							}
							if (::Std_obj::isOfType(_g40->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
								 ::hscript::_Interp::IStop stop31 = _g40->value;
								switch((int)(stop31->_hx_getIndex())){
									case (int)0: {
										continueLoop2 = false;
									}
									break;
									case (int)1: {
									}
									break;
									case (int)2: {
										HX_STACK_DO_THROW(stop31);
									}
									break;
								}
							}
							else {
								HX_STACK_DO_THROW(_g40);
							}
						}
						else {
							HX_STACK_DO_THROW(_hx_e);
						}
					}
					if (!(continueLoop2)) {
						goto _hx_goto_9;
					}
				}
				_hx_goto_9:;
				while((this->changes->length > old3)){
					 ::hscript::_Interp::IDeclaredVariable change3 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
					int name3 = change3->name;
					if (change3->oldDeclared) {
						this->variablesDeclared->__unsafe_set(name3,change3->oldDeclared);
						this->variablesValues->__unsafe_set(name3,change3->oldValue);
					}
					else {
						this->variablesDeclared->__unsafe_set(name3,false);
						this->variablesValues->__unsafe_set(name3, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),null())));
					}
				}
			}
			return null();
		}
		break;
		case (int)13: {
			HX_STACK_DO_THROW(::hscript::_Interp::IStop_obj::ISBreak_dyn());
		}
		break;
		case (int)14: {
			HX_STACK_DO_THROW(::hscript::_Interp::IStop_obj::ISContinue_dyn());
		}
		break;
		case (int)15: {
			return this->interpFunction(_g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >(),_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >(),_g->_hx_getInt(2),_g->_hx_getBool(3),_g->_hx_getBool(4));
		}
		break;
		case (int)16: {
			 ::hscript::Expr _g41 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			 ::Dynamic _hx_tmp33;
			if (::hx::IsNull( _g41 )) {
				_hx_tmp33 = null();
			}
			else {
				_hx_tmp33 = this->interpExpr(_g41);
			}
			this->returnValue = _hx_tmp33;
			HX_STACK_DO_THROW(::hscript::_Interp::IStop_obj::ISReturn_dyn());
		}
		break;
		case (int)17: {
			 ::Dynamic array = this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			 ::Dynamic index = this->interpExpr(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			if (::Std_obj::isOfType(array,::hx::ClassOf< ::haxe::IMap >())) {
				return ::haxe::IMap_obj::get( ::hx::interface_check(array,0x09c2bd39),index);
			}
			else {
				return array->__GetItem(( (int)(index) ));
			}
		}
		break;
		case (int)18: {
			::Array< ::Dynamic> _g42 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::Array< ::Dynamic> _g43 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			::cpp::VirtualArray _g44 = ::cpp::VirtualArray_obj::__new(0);
			{
				int _g45 = 0;
				while((_g45 < _g42->length)){
					 ::hscript::Expr key = _g42->__get(_g45).StaticCast<  ::hscript::Expr >();
					_g45 = (_g45 + 1);
					_g44->push(this->interpExpr(key));
				}
			}
			::cpp::VirtualArray _g46 = ::cpp::VirtualArray_obj::__new(0);
			{
				int _g47 = 0;
				while((_g47 < _g43->length)){
					 ::hscript::Expr val = _g43->__get(_g47).StaticCast<  ::hscript::Expr >();
					_g47 = (_g47 + 1);
					_g46->push(this->interpExpr(val));
				}
			}
			bool _hx_tmp34;
			if ((_g44->get_length() == 0)) {
				_hx_tmp34 = (_g46->get_length() == 0);
			}
			else {
				_hx_tmp34 = false;
			}
			if (_hx_tmp34) {
				return  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
			}
			else {
				bool isAllString = true;
				bool isAllInt = true;
				bool isAllObject = true;
				bool isAllEnum = true;
				{
					int _g48 = 0;
					while((_g48 < _g44->get_length())){
						 ::Dynamic key1 = _g44->__get(_g48);
						_g48 = (_g48 + 1);
						if (isAllString) {
							isAllString = ::Std_obj::isOfType(key1,::hx::ClassOf< ::String >());
						}
						else {
							isAllString = false;
						}
						if (isAllInt) {
							isAllInt = ::Std_obj::isOfType(key1,::hx::ClassOf< int >());
						}
						else {
							isAllInt = false;
						}
						if (isAllObject) {
							isAllObject = ::Reflect_obj::isObject(key1);
						}
						else {
							isAllObject = false;
						}
						if (isAllEnum) {
							isAllEnum = ::Reflect_obj::isEnumValue(key1);
						}
						else {
							isAllEnum = false;
						}
					}
				}
				::Dynamic map;
				if (isAllInt) {
					map =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
				}
				else {
					if (isAllString) {
						map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
					}
					else {
						if (isAllEnum) {
							map =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
						}
						else {
							if (isAllObject) {
								map =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
							}
							else {
								map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
							}
						}
					}
				}
				{
					int _g49 = 0;
					int _g50 = _g44->get_length();
					while((_g49 < _g50)){
						_g49 = (_g49 + 1);
						int i = (_g49 - 1);
						::haxe::IMap_obj::set(map,_g44->__get(i),_g46->__get(i));
					}
				}
				return map;
			}
		}
		break;
		case (int)19: {
			::Array< ::Dynamic> _g51 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			::cpp::VirtualArray _g52 = ::cpp::VirtualArray_obj::__new(0);
			{
				int _g53 = 0;
				while((_g53 < _g51->length)){
					 ::hscript::Expr item = _g51->__get(_g53).StaticCast<  ::hscript::Expr >();
					_g53 = (_g53 + 1);
					_g52->push(this->interpExpr(item));
				}
			}
			return _g52;
		}
		break;
		case (int)20: {
			int _g54 = _g->_hx_getInt(0);
			::Array< ::Dynamic> _g55 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::Dynamic classType;
			if (( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g54)) )) {
				classType =  ::Dynamic(_hx_array_unsafe_get(this->variablesValues,_g54)->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
			}
			else {
				classType = ::Type_obj::resolveClass(( (::String)(_hx_array_unsafe_get(this->variableNames,_g54)) ));
			}
			if (::hx::IsNull( classType )) {
				classType = this->resolveGlobal(_g54);
			}
			::cpp::VirtualArray _g56 = ::cpp::VirtualArray_obj::__new(0);
			{
				int _g57 = 0;
				while((_g57 < _g55->length)){
					 ::Dynamic arg1 = _g55->__get(_g57).StaticCast<  ::hscript::Expr >();
					_g57 = (_g57 + 1);
					_g56->push(this->interpExpr(( ( ::hscript::Expr)(arg1) )));
				}
			}
			return ::Type_obj::createInstance(classType,_g56);
		}
		break;
		case (int)21: {
			HX_STACK_DO_THROW(this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()));
		}
		break;
		case (int)22: {
			 ::hscript::Expr _g58 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			int _g59 = _g->_hx_getInt(1);
			 ::hscript::Expr _g60 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			bool oldTryState = this->inTry;
			int old4 = this->changes->length;
			try {
				HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
				HX_STACK_CATCHABLE( ::Dynamic, 2);
				this->inTry = true;
				 ::Dynamic value10 = this->interpExpr(_g58);
				while((this->changes->length > old4)){
					 ::hscript::_Interp::IDeclaredVariable change4 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
					int name4 = change4->name;
					if (change4->oldDeclared) {
						this->variablesDeclared->__unsafe_set(name4,change4->oldDeclared);
						this->variablesValues->__unsafe_set(name4,change4->oldValue);
					}
					else {
						this->variablesDeclared->__unsafe_set(name4,false);
						this->variablesValues->__unsafe_set(name4, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),null())));
					}
				}
				this->inTry = oldTryState;
				return value10;
			} catch( ::Dynamic _hx_e) {
				if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
					HX_STACK_BEGIN_CATCH
					 ::hscript::_Interp::IStop stop41 = _hx_e;
					this->inTry = oldTryState;
					HX_STACK_DO_THROW(stop41);
				}
				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
					HX_STACK_BEGIN_CATCH
					 ::haxe::ValueException _g61 = _hx_e;
					{
						null();
					}
					if (::Std_obj::isOfType(_g61->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
						 ::hscript::_Interp::IStop stop41 = _g61->value;
						this->inTry = oldTryState;
						HX_STACK_DO_THROW(stop41);
					}
					else {
						HX_STACK_DO_THROW(_g61);
					}
				}
				else if (_hx_e.IsClass<  ::Dynamic >() ){
					HX_STACK_BEGIN_CATCH
					 ::Dynamic _g62 = _hx_e;
					{
						null();
					}
					this->inTry = oldTryState;
					while((this->changes->length > old4)){
						 ::hscript::_Interp::IDeclaredVariable change5 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
						int name5 = change5->name;
						if (change5->oldDeclared) {
							this->variablesDeclared->__unsafe_set(name5,change5->oldDeclared);
							this->variablesValues->__unsafe_set(name5,change5->oldValue);
						}
						else {
							this->variablesDeclared->__unsafe_set(name5,false);
							this->variablesValues->__unsafe_set(name5, ::Dynamic(::hx::Anon_obj::Create(1)
								->setFixed(0,HX_("r",72,00,00,00),null())));
						}
					}
					{
						::Array< ::Dynamic> _hx_tmp35 = this->changes;
						bool _g63 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g59)) );
						_hx_tmp35->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g59,_g63,_hx_array_unsafe_get(this->variablesValues,_g59)));
						this->variablesDeclared->__unsafe_set(_g59,true);
						this->variablesValues->__unsafe_set(_g59, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),_g62)));
					}
					 ::Dynamic value11 = this->interpExpr(_g60);
					while((this->changes->length > old4)){
						 ::hscript::_Interp::IDeclaredVariable change6 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
						int name6 = change6->name;
						if (change6->oldDeclared) {
							this->variablesDeclared->__unsafe_set(name6,change6->oldDeclared);
							this->variablesValues->__unsafe_set(name6,change6->oldValue);
						}
						else {
							this->variablesDeclared->__unsafe_set(name6,false);
							this->variablesValues->__unsafe_set(name6, ::Dynamic(::hx::Anon_obj::Create(1)
								->setFixed(0,HX_("r",72,00,00,00),null())));
						}
					}
					return value11;
				}
				else {
					HX_STACK_DO_THROW(_hx_e);
				}
			}
		}
		break;
		case (int)23: {
			::Array< ::Dynamic> _g64 = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
			bool _hx_tmp36;
			if (::hx::IsNotNull( _g64 )) {
				_hx_tmp36 = (_g64->length <= 0);
			}
			else {
				_hx_tmp36 = true;
			}
			if (_hx_tmp36) {
				return  ::Dynamic(::hx::Anon_obj::Create(0));
			}
			 ::Dynamic object2 =  ::Dynamic(::hx::Anon_obj::Create(0));
			{
				int _g65 = 0;
				while((_g65 < _g64->length)){
					 ::hscript::ObjectField field1 = _g64->__get(_g65).StaticCast<  ::hscript::ObjectField >();
					_g65 = (_g65 + 1);
					::String field2 = field1->name;
					::Reflect_obj::setField(object2,field2,this->interpExpr(field1->expr));
				}
			}
			return object2;
		}
		break;
		case (int)24: {
			if (::hx::IsEq( this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >()),true )) {
				return this->interpExpr(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
			}
			else {
				return this->interpExpr(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
			}
		}
		break;
		case (int)25: {
			::Array< ::Dynamic> _g66 = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
			 ::hscript::Expr _g67 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
			 ::Dynamic switchValue = this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
			bool foundMatch = false;
			{
				int _g68 = 0;
				while((_g68 < _g66->length)){
					 ::hscript::SwitchCase switchCase = _g66->__get(_g68).StaticCast<  ::hscript::SwitchCase >();
					_g68 = (_g68 + 1);
					{
						int _g69 = 0;
						::Array< ::Dynamic> _g70 = switchCase->values;
						while((_g69 < _g70->length)){
							 ::hscript::Expr value12 = _g70->__get(_g69).StaticCast<  ::hscript::Expr >();
							_g69 = (_g69 + 1);
							if (::hx::IsEq( this->interpExpr(value12),switchValue )) {
								foundMatch = true;
								goto _hx_goto_22;
							}
						}
						_hx_goto_22:;
					}
					if (foundMatch) {
						switchValue = this->interpExpr(switchCase->expr);
						goto _hx_goto_21;
					}
				}
				_hx_goto_21:;
			}
			if (!(foundMatch)) {
				if (::hx::IsNotNull( _g67 )) {
					switchValue = this->interpExpr(_g67);
				}
				else {
					switchValue = null();
				}
			}
			return switchValue;
		}
		break;
		case (int)26: {
			 ::hscript::Expr _g71 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
			 ::hscript::Expr _g72 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
			{
				int old5 = this->changes->length;
				do {
					bool continueLoop3 = true;
					try {
						HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
						HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
						this->interpExpr(_g72);
					} catch( ::Dynamic _hx_e) {
						if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
							HX_STACK_BEGIN_CATCH
							 ::hscript::_Interp::IStop stop51 = _hx_e;
							switch((int)(stop51->_hx_getIndex())){
								case (int)0: {
									continueLoop3 = false;
								}
								break;
								case (int)1: {
								}
								break;
								case (int)2: {
									HX_STACK_DO_THROW(stop51);
								}
								break;
							}
						}
						else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
							HX_STACK_BEGIN_CATCH
							 ::haxe::ValueException _g73 = _hx_e;
							{
								null();
							}
							if (::Std_obj::isOfType(_g73->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
								 ::hscript::_Interp::IStop stop51 = _g73->value;
								switch((int)(stop51->_hx_getIndex())){
									case (int)0: {
										continueLoop3 = false;
									}
									break;
									case (int)1: {
									}
									break;
									case (int)2: {
										HX_STACK_DO_THROW(stop51);
									}
									break;
								}
							}
							else {
								HX_STACK_DO_THROW(_g73);
							}
						}
						else {
							HX_STACK_DO_THROW(_hx_e);
						}
					}
					if (!(continueLoop3)) {
						goto _hx_goto_23;
					}
				} while(::hx::IsEq( this->interpExpr(_g71),true ));
				_hx_goto_23:;
				while((this->changes->length > old5)){
					 ::hscript::_Interp::IDeclaredVariable change7 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
					int name7 = change7->name;
					if (change7->oldDeclared) {
						this->variablesDeclared->__unsafe_set(name7,change7->oldDeclared);
						this->variablesValues->__unsafe_set(name7,change7->oldValue);
					}
					else {
						this->variablesDeclared->__unsafe_set(name7,false);
						this->variablesValues->__unsafe_set(name7, ::Dynamic(::hx::Anon_obj::Create(1)
							->setFixed(0,HX_("r",72,00,00,00),null())));
					}
				}
			}
			return null();
		}
		break;
		case (int)27: {
			return this->interpExpr(_g->_hx_getObject(2).StaticCast<  ::hscript::Expr >());
		}
		break;
		case (int)28: {
			::String _g74 = _g->_hx_getString(0);
			 ::Dynamic importValue = this->interpImport(_g74,_g->_hx_getObject(1).StaticCast<  ::hscript::EImportMode >());
			if (::hx::IsNull( importValue )) {
				 ::Dynamic line3 = expr->line;
				int _hx_tmp37;
				if (::hx::IsNotNull( line3 )) {
					_hx_tmp37 = ( (int)(line3) );
				}
				else {
					_hx_tmp37 = this->lineNumber;
				}
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidClass(_g74),null(),null(),this->fileName,_hx_tmp37));
			}
			return importValue;
		}
		break;
		case (int)29: {
			 ::Dynamic line4 = expr->line;
			int _hx_tmp38;
			if (::hx::IsNotNull( line4 )) {
				_hx_tmp38 = ( (int)(line4) );
			}
			else {
				_hx_tmp38 = this->lineNumber;
			}
			HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::ECustom(HX_("Invalid EInfo()",cb,be,a2,fa)),null(),null(),this->fileName,_hx_tmp38));
		}
		break;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,interpExpr,return )

 ::Dynamic Interp_obj::interpReturnExpr( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	try {
		HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		HX_STACK_CATCHABLE( ::Dynamic, 2);
		return this->interpExpr(expr);
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
			HX_STACK_BEGIN_CATCH
			 ::hscript::_Interp::IStop stop1 = _hx_e;
			switch((int)(stop1->_hx_getIndex())){
				case (int)0: {
					HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
				}
				break;
				case (int)1: {
					HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
				}
				break;
				case (int)2: {
					 ::Dynamic value1 = this->returnValue;
					this->returnValue = null();
					return value1;
				}
				break;
			}
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
				 ::hscript::_Interp::IStop stop1 = _g->value;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
					}
					break;
					case (int)1: {
						HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
					}
					break;
					case (int)2: {
						 ::Dynamic value1 = this->returnValue;
						this->returnValue = null();
						return value1;
					}
					break;
				}
			}
			else {
				HX_STACK_DO_THROW(_g);
			}
		}
		else if (_hx_e.IsClass<  ::Dynamic >() ){
			HX_STACK_BEGIN_CATCH
			 ::Dynamic _g1 = _hx_e;
			 ::hscript::ErrorDef err = ::hscript::ErrorDef_obj::ECustom(::haxe::Exception_obj::caught(_g1)->toString());
			HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err,null(),null(),this->fileName,this->lineNumber));
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,interpReturnExpr,return )

 ::Dynamic Interp_obj::safeInterpReturnExpr( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	try {
		HX_STACK_CATCHABLE( ::hscript::Error, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		HX_STACK_CATCHABLE( ::Dynamic, 2);
		try {
			HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
			HX_STACK_CATCHABLE( ::Dynamic, 2);
			return this->interpExpr(expr);
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
				HX_STACK_BEGIN_CATCH
				 ::hscript::_Interp::IStop stop1 = _hx_e;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
					}
					break;
					case (int)1: {
						HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
					}
					break;
					case (int)2: {
						 ::Dynamic value1 = this->returnValue;
						this->returnValue = null();
						return value1;
					}
					break;
				}
			}
			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
				HX_STACK_BEGIN_CATCH
				 ::haxe::ValueException _g = _hx_e;
				{
					null();
				}
				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
					 ::hscript::_Interp::IStop stop1 = _g->value;
					switch((int)(stop1->_hx_getIndex())){
						case (int)0: {
							HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
						}
						break;
						case (int)1: {
							HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
						}
						break;
						case (int)2: {
							 ::Dynamic value1 = this->returnValue;
							this->returnValue = null();
							return value1;
						}
						break;
					}
				}
				else {
					HX_STACK_DO_THROW(_g);
				}
			}
			else if (_hx_e.IsClass<  ::Dynamic >() ){
				HX_STACK_BEGIN_CATCH
				 ::Dynamic _g1 = _hx_e;
				 ::hscript::ErrorDef err = ::hscript::ErrorDef_obj::ECustom(::haxe::Exception_obj::caught(_g1)->toString());
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err,null(),null(),this->fileName,this->lineNumber));
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::hscript::Error >() ){
			HX_STACK_BEGIN_CATCH
			 ::hscript::Error e1 = _hx_e;
			if (::hx::IsNotNull( this->errorHandler )) {
				this->errorHandler(e1);
			}
			else {
				HX_STACK_DO_THROW(e1);
			}
			return null();
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g2 = _hx_e;
			{
				null();
			}
			if (::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::hscript::Error >())) {
				 ::hscript::Error e1 = ( ( ::hscript::Error)(_g2->value) );
				if (::hx::IsNotNull( this->errorHandler )) {
					this->errorHandler(e1);
				}
				else {
					HX_STACK_DO_THROW(e1);
				}
				return null();
			}
			else {
				HX_STACK_DO_THROW(_g2);
			}
		}
		else if (_hx_e.IsClass<  ::Dynamic >() ){
			HX_STACK_BEGIN_CATCH
			 ::Dynamic _g3 = _hx_e;
			 ::haxe::Exception _g4 = ::haxe::Exception_obj::caught(_g3);
			::haxe::Log_obj::trace(_g4,::hx::SourceInfo(HX_("../hscript/Interp.hx",9f,54,40,9f),473,HX_("hscript.Interp",8f,7c,f0,9a),HX_("safeInterpReturnExpr",66,f8,0e,f2)));
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,safeInterpReturnExpr,return )

 ::Dynamic Interp_obj::interpImport(::String path, ::hscript::EImportMode mode){
            	HX_JUST_GC_STACKFRAME
	if (::hx::IsPointerEq( mode,::hscript::EImportMode_obj::All_dyn() )) {
		return null();
	}
	::Array< ::String > splitPathName = path.split(HX_(".",2e,00,00,00));
	if ((splitPathName->length <= 0)) {
		return null();
	}
	::String lastPathName = splitPathName->__get((splitPathName->length - 1));
	::String variableName;
	if ((mode->_hx_getIndex() == 1)) {
		variableName = mode->_hx_getString(0);
	}
	else {
		variableName = lastPathName;
	}
	if (this->variablesLookup->exists(variableName)) {
		int variableID = this->variablesLookup->get_int(variableName);
		if (( (bool)(_hx_array_unsafe_get(this->variablesDeclared,variableID)) )) {
			return  ::Dynamic(_hx_array_unsafe_get(this->variablesValues,variableID)->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
		}
	}
	 ::haxe::ds::Either testClass = ::hscript::StaticInterp_obj::resolvePath(path);
	if (::hx::IsNull( testClass )) {
		::Array< ::String > splitPathCopy = splitPathName->copy();
		splitPathCopy->removeRange(-2,1);
		testClass = ::hscript::StaticInterp_obj::resolvePath(splitPathCopy->join(HX_(".",2e,00,00,00)));
		bool _hx_tmp;
		if (::hx::IsNotNull( testClass )) {
			bool _hx_tmp1;
			if ((mode->_hx_getIndex() == 1)) {
				_hx_tmp1 = true;
			}
			else {
				_hx_tmp1 = false;
			}
			_hx_tmp = !(_hx_tmp1);
		}
		else {
			_hx_tmp = false;
		}
		if (_hx_tmp) {
			variableName = splitPathCopy->__get((splitPathCopy->length - 1));
		}
	}
	if (::hx::IsNotNull( testClass )) {
		 ::Dynamic value;
		switch((int)(testClass->_hx_getIndex())){
			case (int)0: {
				value = testClass->_hx_getObject(0);
			}
			break;
			case (int)1: {
				value = ::hscript::StaticInterp_obj::resolveEnum(testClass->_hx_getObject(0));
			}
			break;
		}
		if (this->variablesLookup->exists(variableName)) {
			int name = this->variablesLookup->get_int(variableName);
			::Array< ::Dynamic> _hx_tmp2 = this->changes;
			bool _g = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,name)) );
			_hx_tmp2->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,name,_g,_hx_array_unsafe_get(this->variablesValues,name)));
			this->variablesDeclared->__unsafe_set(name,true);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),value)));
		}
		return value;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,interpImport,return )

 ::Dynamic Interp_obj::interpFunction(::Array< ::Dynamic> args, ::hscript::Expr body,int name, ::Dynamic isPublic, ::Dynamic isStatic){
	HX_BEGIN_LOCAL_FUNC_S9(::hx::LocalFunc,_hx_Closure_0,int,name,::Array< int >,argsNeeded, ::hscript::Interp,_gthis, ::hscript::Interp,interpInstance, ::hscript::Expr,body, ::Dynamic,functionRef,::Array< ::Dynamic>,capturedVariablesValues,::Array< bool >,capturedVariablesDeclared,::Array< ::Dynamic>,args) HXARGC(1)
	 ::Dynamic _hx_run(::cpp::VirtualArray inputArgs){
		HX_JUST_GC_STACKFRAME
		int interpFunction;
		if (::hx::IsNull( inputArgs )) {
			interpFunction = 0;
		}
		else {
			interpFunction = inputArgs->get_length();
		}
		if ((interpFunction < argsNeeded->__get(0))) {
			::cpp::VirtualArray fixedArgs = ::cpp::VirtualArray_obj::__new(0);
			int extraArgs = (inputArgs->get_length() - argsNeeded->__get(0));
			int position = 0;
			{
				int _g = 0;
				while((_g < args->length)){
					 ::hscript::Argument arg = args->__get(_g).StaticCast<  ::hscript::Argument >();
					_g = (_g + 1);
					if (arg->opt) {
						if ((extraArgs > 0)) {
							position = (position + 1);
							fixedArgs->push(inputArgs->__get((position - 1)));
							extraArgs = (extraArgs - 1);
						}
						else {
							fixedArgs->push(null());
						}
					}
					else {
						position = (position + 1);
						fixedArgs->push(inputArgs->__get((position - 1)));
					}
				}
			}
			inputArgs = fixedArgs;
		}
		{
			int _g_current = 0;
			::cpp::VirtualArray _g_array = inputArgs;
			while((_g_current < _g_array->get_length())){
				 ::Dynamic _g_value = _g_array->__get(_g_current);
				_g_current = (_g_current + 1);
				int _g_key = (_g_current - 1);
				bool interpFunction1;
				if (::hx::IsNull( _g_value )) {
					interpFunction1 = ::hx::IsNotNull( args->__get(_g_key).StaticCast<  ::hscript::Argument >()->value );
				}
				else {
					interpFunction1 = false;
				}
				if (interpFunction1) {
					inputArgs->set(_g_key,_gthis->interpExpr(args->__get(_g_key).StaticCast<  ::hscript::Argument >()->value));
				}
			}
		}
		::Array< bool > oldVariablesDeclared = interpInstance->variablesDeclared;
		::Array< ::Dynamic> oldVariablesValues = interpInstance->variablesValues;
		int oldDepth = interpInstance->depth;
		interpInstance->depth++;
		interpInstance->variablesDeclared = _gthis->duplicate(capturedVariablesDeclared);
		interpInstance->variablesValues = _gthis->duplicate(capturedVariablesValues);
		{
			int _g1 = 0;
			int _g2 = args->length;
			while((_g1 < _g2)){
				_g1 = (_g1 + 1);
				int arg1 = (_g1 - 1);
				{
					int name1 = args->__get(arg1).StaticCast<  ::hscript::Argument >()->name;
					 ::Dynamic value = inputArgs->__get(arg1);
					::Array< ::Dynamic> _gthis1 = _gthis->changes;
					bool _g3 = ( (bool)(_hx_array_unsafe_get(_gthis->variablesDeclared,name1)) );
					_gthis1->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,name1,_g3,_hx_array_unsafe_get(_gthis->variablesValues,name1)));
					_gthis->variablesDeclared->__unsafe_set(name1,true);
					_gthis->variablesValues->__unsafe_set(name1, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),value)));
				}
			}
		}
		 ::Dynamic ret = null();
		{
			::Array< ::Dynamic> _gthis2 = _gthis->changes;
			int _g4 = name;
			bool _g5 = ( (bool)(_hx_array_unsafe_get(_gthis->variablesDeclared,name)) );
			_gthis2->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g4,_g5,_hx_array_unsafe_get(_gthis->variablesValues,name)));
			_gthis->variablesDeclared->__unsafe_set(name,true);
			_gthis->variablesValues->__unsafe_set(name,functionRef);
		}
		int old = _gthis->changes->length;
		if (_gthis->inTry) {
			try {
				HX_STACK_CATCHABLE( ::Dynamic, 0);
				try {
					HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
					HX_STACK_CATCHABLE( ::Dynamic, 2);
					ret = _gthis->interpExpr(body);
				} catch( ::Dynamic _hx_e) {
					if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
						HX_STACK_BEGIN_CATCH
						 ::hscript::_Interp::IStop stop111 = _hx_e;
						switch((int)(stop111->_hx_getIndex())){
							case (int)0: {
								HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
							}
							break;
							case (int)1: {
								HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
							}
							break;
							case (int)2: {
								 ::Dynamic value1111 = _gthis->returnValue;
								_gthis->returnValue = null();
								ret = value1111;
							}
							break;
						}
					}
					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
						HX_STACK_BEGIN_CATCH
						 ::haxe::ValueException _g61 = _hx_e;
						{
							null();
						}
						if (::Std_obj::isOfType(_g61->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
							 ::hscript::_Interp::IStop stop111 = _g61->value;
							switch((int)(stop111->_hx_getIndex())){
								case (int)0: {
									HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
								}
								break;
								case (int)1: {
									HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
								}
								break;
								case (int)2: {
									 ::Dynamic value1111 = _gthis->returnValue;
									_gthis->returnValue = null();
									ret = value1111;
								}
								break;
							}
						}
						else {
							if (::Std_obj::isOfType(_g61->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
								 ::hscript::_Interp::IStop stop111 = _g61->value;
								switch((int)(stop111->_hx_getIndex())){
									case (int)0: {
										HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
									}
									break;
									case (int)1: {
										HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
									}
									break;
									case (int)2: {
										 ::Dynamic value1111 = _gthis->returnValue;
										_gthis->returnValue = null();
										ret = value1111;
									}
									break;
								}
							}
							else {
								HX_STACK_DO_THROW(_g61);
							}
						}
					}
					else if (_hx_e.IsClass<  ::Dynamic >() ){
						HX_STACK_BEGIN_CATCH
						 ::Dynamic _g7 = _hx_e;
						{
							null();
						}
						 ::haxe::Exception _g8 = ::haxe::Exception_obj::caught(_g7);
						if (::Std_obj::isOfType(_g8,::hx::ClassOf< ::haxe::ValueException >())) {
							 ::haxe::ValueException _g61 = ( ( ::haxe::ValueException)(_g8) );
							if (::Std_obj::isOfType(_g61->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
								 ::hscript::_Interp::IStop stop111 = _g61->value;
								switch((int)(stop111->_hx_getIndex())){
									case (int)0: {
										HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
									}
									break;
									case (int)1: {
										HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
									}
									break;
									case (int)2: {
										 ::Dynamic value1111 = _gthis->returnValue;
										_gthis->returnValue = null();
										ret = value1111;
									}
									break;
								}
							}
							else {
								HX_STACK_DO_THROW(_g61);
							}
						}
						else {
							 ::hscript::ErrorDef err = ::hscript::ErrorDef_obj::ECustom(::haxe::Exception_obj::caught(_g7)->toString());
							HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err,null(),null(),_gthis->fileName,_gthis->lineNumber));
						}
					}
					else {
						HX_STACK_DO_THROW(_hx_e);
					}
				}
			} catch( ::Dynamic _hx_e) {
				if (_hx_e.IsClass<  ::Dynamic >() ){
					HX_STACK_BEGIN_CATCH
					 ::Dynamic _g9 = _hx_e;
					{
						null();
					}
					while((_gthis->changes->length > old)){
						 ::hscript::_Interp::IDeclaredVariable change = _gthis->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
						int name2 = change->name;
						if (change->oldDeclared) {
							_gthis->variablesDeclared->__unsafe_set(name2,change->oldDeclared);
							_gthis->variablesValues->__unsafe_set(name2,change->oldValue);
						}
						else {
							_gthis->variablesDeclared->__unsafe_set(name2,false);
							_gthis->variablesValues->__unsafe_set(name2, ::Dynamic(::hx::Anon_obj::Create(1)
								->setFixed(0,HX_("r",72,00,00,00),null())));
						}
					}
					interpInstance->variablesDeclared = oldVariablesDeclared;
					interpInstance->variablesValues = oldVariablesValues;
					interpInstance->depth = oldDepth;
					HX_STACK_DO_THROW(_g9);
				}
				else {
					HX_STACK_DO_THROW(_hx_e);
				}
			}
		}
		else {
			try {
				HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
				HX_STACK_CATCHABLE( ::Dynamic, 2);
				ret = _gthis->interpExpr(body);
			} catch( ::Dynamic _hx_e) {
				if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
					HX_STACK_BEGIN_CATCH
					 ::hscript::_Interp::IStop stop2111 = _hx_e;
					switch((int)(stop2111->_hx_getIndex())){
						case (int)0: {
							HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
						}
						break;
						case (int)1: {
							HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
						}
						break;
						case (int)2: {
							 ::Dynamic value2111 = _gthis->returnValue;
							_gthis->returnValue = null();
							ret = value2111;
						}
						break;
					}
				}
				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
					HX_STACK_BEGIN_CATCH
					 ::haxe::ValueException _g101 = _hx_e;
					{
						null();
					}
					if (::Std_obj::isOfType(_g101->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
						 ::hscript::_Interp::IStop stop2111 = _g101->value;
						switch((int)(stop2111->_hx_getIndex())){
							case (int)0: {
								HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
							}
							break;
							case (int)1: {
								HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
							}
							break;
							case (int)2: {
								 ::Dynamic value2111 = _gthis->returnValue;
								_gthis->returnValue = null();
								ret = value2111;
							}
							break;
						}
					}
					else {
						if (::Std_obj::isOfType(_g101->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
							 ::hscript::_Interp::IStop stop2111 = _g101->value;
							switch((int)(stop2111->_hx_getIndex())){
								case (int)0: {
									HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
								}
								break;
								case (int)1: {
									HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
								}
								break;
								case (int)2: {
									 ::Dynamic value2111 = _gthis->returnValue;
									_gthis->returnValue = null();
									ret = value2111;
								}
								break;
							}
						}
						else {
							HX_STACK_DO_THROW(_g101);
						}
					}
				}
				else if (_hx_e.IsClass<  ::Dynamic >() ){
					HX_STACK_BEGIN_CATCH
					 ::Dynamic _g11 = _hx_e;
					{
						null();
					}
					 ::haxe::Exception _g12 = ::haxe::Exception_obj::caught(_g11);
					if (::Std_obj::isOfType(_g12,::hx::ClassOf< ::haxe::ValueException >())) {
						 ::haxe::ValueException _g101 = ( ( ::haxe::ValueException)(_g12) );
						if (::Std_obj::isOfType(_g101->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
							 ::hscript::_Interp::IStop stop2111 = _g101->value;
							switch((int)(stop2111->_hx_getIndex())){
								case (int)0: {
									HX_STACK_DO_THROW(HX_("Invalid break",b6,ee,24,9d));
								}
								break;
								case (int)1: {
									HX_STACK_DO_THROW(HX_("Invalid continue",d0,6a,b7,3f));
								}
								break;
								case (int)2: {
									 ::Dynamic value2111 = _gthis->returnValue;
									_gthis->returnValue = null();
									ret = value2111;
								}
								break;
							}
						}
						else {
							HX_STACK_DO_THROW(_g101);
						}
					}
					else {
						 ::hscript::ErrorDef err1 = ::hscript::ErrorDef_obj::ECustom(::haxe::Exception_obj::caught(_g11)->toString());
						HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,err1,null(),null(),_gthis->fileName,_gthis->lineNumber));
					}
				}
				else {
					HX_STACK_DO_THROW(_hx_e);
				}
			}
		}
		while((_gthis->changes->length > old)){
			 ::hscript::_Interp::IDeclaredVariable change1 = _gthis->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
			int name3 = change1->name;
			if (change1->oldDeclared) {
				_gthis->variablesDeclared->__unsafe_set(name3,change1->oldDeclared);
				_gthis->variablesValues->__unsafe_set(name3,change1->oldValue);
			}
			else {
				_gthis->variablesDeclared->__unsafe_set(name3,false);
				_gthis->variablesValues->__unsafe_set(name3, ::Dynamic(::hx::Anon_obj::Create(1)
					->setFixed(0,HX_("r",72,00,00,00),null())));
			}
		}
		interpInstance->variablesDeclared = oldVariablesDeclared;
		interpInstance->variablesValues = oldVariablesValues;
		interpInstance->depth = oldDepth;
		return ret;
	}
	HX_END_LOCAL_FUNC1(return)

            	HX_JUST_GC_STACKFRAME
	 ::hscript::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
	::Array< bool > capturedVariablesDeclared = this->duplicate(this->variablesDeclared);
	::Array< ::Dynamic> capturedVariablesValues = this->duplicate(this->variablesValues);
	 ::hscript::Interp interpInstance = ::hx::ObjectPtr<OBJ_>(this);
	::Array< int > argsNeeded = ::Array_obj< int >::fromData( _hx_array_data_9af07c8f_31,1);
	{
		int _g = 0;
		while((_g < args->length)){
			 ::hscript::Argument arg = args->__get(_g).StaticCast<  ::hscript::Argument >();
			_g = (_g + 1);
			if (!(arg->opt)) {
				argsNeeded[0]++;
			}
		}
	}
	 ::Dynamic reflectiveFunction = null();
	 ::Dynamic functionRef =  ::Dynamic(::hx::Anon_obj::Create(1)
		->setFixed(0,HX_("r",72,00,00,00),null()));
	 ::Dynamic interpFunction =  ::Dynamic(new _hx_Closure_0(name,argsNeeded,_gthis,interpInstance,body,functionRef,capturedVariablesValues,capturedVariablesDeclared,args));
	reflectiveFunction = ::Reflect_obj::makeVarArgs(interpFunction);
	functionRef->__SetField(HX_("r",72,00,00,00),reflectiveFunction,::hx::paccDynamic);
	if ((name != -1)) {
		if ((this->depth == 0)) {
			::String varName = ( (::String)(_hx_array_unsafe_get(this->variableNames,name)) );
			bool _hx_tmp;
			if (( (bool)(isStatic) )) {
				_hx_tmp = !(::hscript::StaticInterp_obj::staticVariables->exists(varName));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				::hscript::StaticInterp_obj::staticVariables->set(varName,reflectiveFunction);
				return reflectiveFunction;
			}
			bool _hx_tmp1;
			if (( (bool)(isPublic) )) {
				_hx_tmp1 = ::hx::IsNotNull( this->publicVariables );
			}
			else {
				_hx_tmp1 = false;
			}
			if (_hx_tmp1) {
				 ::haxe::ds::StringMap _hx_tmp2 = this->publicVariables;
				_hx_tmp2->set(( (::String)(_hx_array_unsafe_get(this->variableNames,name)) ),reflectiveFunction);
				return reflectiveFunction;
			}
		}
		{
			::Array< ::Dynamic> _hx_tmp3 = this->changes;
			int _g1 = name;
			bool _g2 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,name)) );
			_hx_tmp3->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,_g1,_g2,_hx_array_unsafe_get(this->variablesValues,name)));
			this->variablesDeclared->__unsafe_set(name,true);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),reflectiveFunction)));
		}
	}
	return reflectiveFunction;
}


HX_DEFINE_DYNAMIC_FUNC5(Interp_obj,interpFunction,return )

 ::Dynamic Interp_obj::interpTry( ::hscript::Expr expr,int catchVar, ::hscript::Expr catchExpr){
            	HX_JUST_GC_STACKFRAME
	bool oldTryState = this->inTry;
	int old = this->changes->length;
	try {
		HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		HX_STACK_CATCHABLE( ::Dynamic, 2);
		this->inTry = true;
		 ::Dynamic value = this->interpExpr(expr);
		while((this->changes->length > old)){
			 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
			int name = change->name;
			if (change->oldDeclared) {
				this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
				this->variablesValues->__unsafe_set(name,change->oldValue);
			}
			else {
				this->variablesDeclared->__unsafe_set(name,false);
				this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
					->setFixed(0,HX_("r",72,00,00,00),null())));
			}
		}
		this->inTry = oldTryState;
		return value;
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
			HX_STACK_BEGIN_CATCH
			 ::hscript::_Interp::IStop stop1 = _hx_e;
			this->inTry = oldTryState;
			HX_STACK_DO_THROW(stop1);
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
				 ::hscript::_Interp::IStop stop1 = _g->value;
				this->inTry = oldTryState;
				HX_STACK_DO_THROW(stop1);
			}
			else {
				HX_STACK_DO_THROW(_g);
			}
		}
		else if (_hx_e.IsClass<  ::Dynamic >() ){
			HX_STACK_BEGIN_CATCH
			 ::Dynamic _g1 = _hx_e;
			{
				null();
			}
			this->inTry = oldTryState;
			while((this->changes->length > old)){
				 ::hscript::_Interp::IDeclaredVariable change1 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
				int name1 = change1->name;
				if (change1->oldDeclared) {
					this->variablesDeclared->__unsafe_set(name1,change1->oldDeclared);
					this->variablesValues->__unsafe_set(name1,change1->oldValue);
				}
				else {
					this->variablesDeclared->__unsafe_set(name1,false);
					this->variablesValues->__unsafe_set(name1, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),null())));
				}
			}
			{
				::Array< ::Dynamic> _hx_tmp = this->changes;
				bool _g2 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,catchVar)) );
				_hx_tmp->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,catchVar,_g2,_hx_array_unsafe_get(this->variablesValues,catchVar)));
				this->variablesDeclared->__unsafe_set(catchVar,true);
				this->variablesValues->__unsafe_set(catchVar, ::Dynamic(::hx::Anon_obj::Create(1)
					->setFixed(0,HX_("r",72,00,00,00),_g1)));
			}
			 ::Dynamic value1 = this->interpExpr(catchExpr);
			while((this->changes->length > old)){
				 ::hscript::_Interp::IDeclaredVariable change2 = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
				int name2 = change2->name;
				if (change2->oldDeclared) {
					this->variablesDeclared->__unsafe_set(name2,change2->oldDeclared);
					this->variablesValues->__unsafe_set(name2,change2->oldValue);
				}
				else {
					this->variablesDeclared->__unsafe_set(name2,false);
					this->variablesValues->__unsafe_set(name2, ::Dynamic(::hx::Anon_obj::Create(1)
						->setFixed(0,HX_("r",72,00,00,00),null())));
				}
			}
			return value1;
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,interpTry,return )

void Interp_obj::forKeyValueLoop(int key,int value, ::hscript::Expr iterator, ::hscript::Expr body){
            	HX_JUST_GC_STACKFRAME
	int old = this->changes->length;
	{
		 ::Dynamic value1 = null();
		::Array< ::Dynamic> _hx_tmp = this->changes;
		bool _g = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,key)) );
		_hx_tmp->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,key,_g,_hx_array_unsafe_get(this->variablesValues,key)));
		this->variablesDeclared->__unsafe_set(key,true);
		this->variablesValues->__unsafe_set(key, ::Dynamic(::hx::Anon_obj::Create(1)
			->setFixed(0,HX_("r",72,00,00,00),value1)));
	}
	{
		 ::Dynamic value2 = null();
		::Array< ::Dynamic> _hx_tmp1 = this->changes;
		bool _g1 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,value)) );
		_hx_tmp1->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,value,_g1,_hx_array_unsafe_get(this->variablesValues,value)));
		this->variablesDeclared->__unsafe_set(value,true);
		this->variablesValues->__unsafe_set(value, ::Dynamic(::hx::Anon_obj::Create(1)
			->setFixed(0,HX_("r",72,00,00,00),value2)));
	}
	 ::Dynamic untypedIterator = this->interpExpr(iterator);
	 ::Dynamic value3 = untypedIterator;
	try {
		HX_STACK_CATCHABLE( ::Dynamic, 0);
		value3 = untypedIterator->__Field(HX_("keyValueIterator",60,cd,ee,4a),::hx::paccDynamic)();
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::Dynamic >() ){
			HX_STACK_BEGIN_CATCH
			 ::Dynamic _g2 = _hx_e;
			{
				null();
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	 ::Dynamic iterator1;
	bool iterator2;
	if (::hx::IsNotNull( value3->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
		iterator2 = ::hx::IsNull( value3->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
	}
	else {
		iterator2 = true;
	}
	if (iterator2) {
		iterator1 = null();
	}
	else {
		iterator1 = value3;
	}
	 ::Dynamic iterator3;
	if (::hx::IsNull( iterator1 )) {
		 ::Dynamic line = iterator->line;
		int iterator4;
		if (::hx::IsNotNull( line )) {
			iterator4 = ( (int)(line) );
		}
		else {
			iterator4 = this->lineNumber;
		}
		HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidIterator(untypedIterator),null(),null(),this->fileName,iterator4));
	}
	else {
		iterator3 = iterator1;
	}
	while(( (bool)(iterator3->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
		 ::Dynamic iteratorValue = iterator3->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
		{
			 ::Dynamic value4 =  ::Dynamic(iteratorValue->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic));
			::Array< ::Dynamic> _hx_tmp2 = this->changes;
			bool _g3 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,key)) );
			_hx_tmp2->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,key,_g3,_hx_array_unsafe_get(this->variablesValues,key)));
			this->variablesDeclared->__unsafe_set(key,true);
			this->variablesValues->__unsafe_set(key, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),value4)));
		}
		{
			 ::Dynamic value5 =  ::Dynamic(iteratorValue->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
			::Array< ::Dynamic> _hx_tmp3 = this->changes;
			bool _g4 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,value)) );
			_hx_tmp3->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,value,_g4,_hx_array_unsafe_get(this->variablesValues,value)));
			this->variablesDeclared->__unsafe_set(value,true);
			this->variablesValues->__unsafe_set(value, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),value5)));
		}
		bool continueLoop = true;
		try {
			HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
			this->interpExpr(body);
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
				HX_STACK_BEGIN_CATCH
				 ::hscript::_Interp::IStop stop1 = _hx_e;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						continueLoop = false;
					}
					break;
					case (int)1: {
					}
					break;
					case (int)2: {
						HX_STACK_DO_THROW(stop1);
					}
					break;
				}
			}
			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
				HX_STACK_BEGIN_CATCH
				 ::haxe::ValueException _g5 = _hx_e;
				{
					null();
				}
				if (::Std_obj::isOfType(_g5->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
					 ::hscript::_Interp::IStop stop1 = _g5->value;
					switch((int)(stop1->_hx_getIndex())){
						case (int)0: {
							continueLoop = false;
						}
						break;
						case (int)1: {
						}
						break;
						case (int)2: {
							HX_STACK_DO_THROW(stop1);
						}
						break;
					}
				}
				else {
					HX_STACK_DO_THROW(_g5);
				}
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
		if (!(continueLoop)) {
			goto _hx_goto_35;
		}
	}
	_hx_goto_35:;
	while((this->changes->length > old)){
		 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
		int name = change->name;
		if (change->oldDeclared) {
			this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
			this->variablesValues->__unsafe_set(name,change->oldValue);
		}
		else {
			this->variablesDeclared->__unsafe_set(name,false);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),null())));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC4(Interp_obj,forKeyValueLoop,(void))

void Interp_obj::forLoop(int varName, ::hscript::Expr iterator, ::hscript::Expr body){
            	HX_JUST_GC_STACKFRAME
	int old = this->changes->length;
	{
		 ::Dynamic value = null();
		::Array< ::Dynamic> _hx_tmp = this->changes;
		bool _g = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,varName)) );
		_hx_tmp->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,varName,_g,_hx_array_unsafe_get(this->variablesValues,varName)));
		this->variablesDeclared->__unsafe_set(varName,true);
		this->variablesValues->__unsafe_set(varName, ::Dynamic(::hx::Anon_obj::Create(1)
			->setFixed(0,HX_("r",72,00,00,00),value)));
	}
	 ::Dynamic untypedIterator = this->interpExpr(iterator);
	 ::Dynamic value1 = untypedIterator;
	if (::hx::IsNotNull( untypedIterator->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic) )) {
		try {
			HX_STACK_CATCHABLE( ::Dynamic, 0);
			value1 = untypedIterator->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::Dynamic >() ){
				HX_STACK_BEGIN_CATCH
				 ::Dynamic _g1 = _hx_e;
				{
					null();
				}
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
	}
	 ::Dynamic iterator1;
	bool iterator2;
	if (::hx::IsNotNull( value1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
		iterator2 = ::hx::IsNull( value1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
	}
	else {
		iterator2 = true;
	}
	if (iterator2) {
		iterator1 = null();
	}
	else {
		iterator1 = value1;
	}
	 ::Dynamic iterator3;
	if (::hx::IsNull( iterator1 )) {
		 ::Dynamic line = iterator->line;
		int iterator4;
		if (::hx::IsNotNull( line )) {
			iterator4 = ( (int)(line) );
		}
		else {
			iterator4 = this->lineNumber;
		}
		HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidIterator(untypedIterator),null(),null(),this->fileName,iterator4));
	}
	else {
		iterator3 = iterator1;
	}
	while(( (bool)(iterator3->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
		{
			 ::Dynamic value2 = iterator3->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
			::Array< ::Dynamic> _hx_tmp1 = this->changes;
			bool _g2 = ( (bool)(_hx_array_unsafe_get(this->variablesDeclared,varName)) );
			_hx_tmp1->push( ::hscript::_Interp::IDeclaredVariable_obj::__alloc( HX_CTX ,varName,_g2,_hx_array_unsafe_get(this->variablesValues,varName)));
			this->variablesDeclared->__unsafe_set(varName,true);
			this->variablesValues->__unsafe_set(varName, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),value2)));
		}
		bool continueLoop = true;
		try {
			HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
			this->interpExpr(body);
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
				HX_STACK_BEGIN_CATCH
				 ::hscript::_Interp::IStop stop1 = _hx_e;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						continueLoop = false;
					}
					break;
					case (int)1: {
					}
					break;
					case (int)2: {
						HX_STACK_DO_THROW(stop1);
					}
					break;
				}
			}
			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
				HX_STACK_BEGIN_CATCH
				 ::haxe::ValueException _g3 = _hx_e;
				{
					null();
				}
				if (::Std_obj::isOfType(_g3->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
					 ::hscript::_Interp::IStop stop1 = _g3->value;
					switch((int)(stop1->_hx_getIndex())){
						case (int)0: {
							continueLoop = false;
						}
						break;
						case (int)1: {
						}
						break;
						case (int)2: {
							HX_STACK_DO_THROW(stop1);
						}
						break;
					}
				}
				else {
					HX_STACK_DO_THROW(_g3);
				}
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
		if (!(continueLoop)) {
			goto _hx_goto_37;
		}
	}
	_hx_goto_37:;
	while((this->changes->length > old)){
		 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
		int name = change->name;
		if (change->oldDeclared) {
			this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
			this->variablesValues->__unsafe_set(name,change->oldValue);
		}
		else {
			this->variablesDeclared->__unsafe_set(name,false);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),null())));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,forLoop,(void))

 ::Dynamic Interp_obj::makeIteratorExpr( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	 ::Dynamic untypedIterator = this->interpExpr(expr);
	 ::Dynamic value = untypedIterator;
	if (::hx::IsNotNull( untypedIterator->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic) )) {
		try {
			HX_STACK_CATCHABLE( ::Dynamic, 0);
			value = untypedIterator->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::Dynamic >() ){
				HX_STACK_BEGIN_CATCH
				 ::Dynamic _g = _hx_e;
				{
					null();
				}
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
	}
	 ::Dynamic iterator;
	bool iterator1;
	if (::hx::IsNotNull( value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
		iterator1 = ::hx::IsNull( value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
	}
	else {
		iterator1 = true;
	}
	if (iterator1) {
		iterator = null();
	}
	else {
		iterator = value;
	}
	if (::hx::IsNull( iterator )) {
		 ::Dynamic line = expr->line;
		int _hx_tmp;
		if (::hx::IsNotNull( line )) {
			_hx_tmp = ( (int)(line) );
		}
		else {
			_hx_tmp = this->lineNumber;
		}
		HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidIterator(untypedIterator),null(),null(),this->fileName,_hx_tmp));
	}
	else {
		return iterator;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,makeIteratorExpr,return )

 ::Dynamic Interp_obj::makeKeyValueIteratorExpr( ::hscript::Expr expr){
            	HX_JUST_GC_STACKFRAME
	 ::Dynamic untypedIterator = this->interpExpr(expr);
	 ::Dynamic value = untypedIterator;
	try {
		HX_STACK_CATCHABLE( ::Dynamic, 0);
		value = untypedIterator->__Field(HX_("keyValueIterator",60,cd,ee,4a),::hx::paccDynamic)();
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::Dynamic >() ){
			HX_STACK_BEGIN_CATCH
			 ::Dynamic _g = _hx_e;
			{
				null();
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	 ::Dynamic iterator;
	bool iterator1;
	if (::hx::IsNotNull( value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
		iterator1 = ::hx::IsNull( value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
	}
	else {
		iterator1 = true;
	}
	if (iterator1) {
		iterator = null();
	}
	else {
		iterator = value;
	}
	if (::hx::IsNull( iterator )) {
		 ::Dynamic line = expr->line;
		int _hx_tmp;
		if (::hx::IsNotNull( line )) {
			_hx_tmp = ( (int)(line) );
		}
		else {
			_hx_tmp = this->lineNumber;
		}
		HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidIterator(untypedIterator),null(),null(),this->fileName,_hx_tmp));
	}
	else {
		return iterator;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,makeKeyValueIteratorExpr,return )

void Interp_obj::whileLoop( ::hscript::Expr cond, ::hscript::Expr body){
	int old = this->changes->length;
	while(::hx::IsEq( this->interpExpr(cond),true )){
		bool continueLoop = true;
		try {
			HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
			this->interpExpr(body);
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
				HX_STACK_BEGIN_CATCH
				 ::hscript::_Interp::IStop stop1 = _hx_e;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						continueLoop = false;
					}
					break;
					case (int)1: {
					}
					break;
					case (int)2: {
						HX_STACK_DO_THROW(stop1);
					}
					break;
				}
			}
			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
				HX_STACK_BEGIN_CATCH
				 ::haxe::ValueException _g = _hx_e;
				{
					null();
				}
				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
					 ::hscript::_Interp::IStop stop1 = _g->value;
					switch((int)(stop1->_hx_getIndex())){
						case (int)0: {
							continueLoop = false;
						}
						break;
						case (int)1: {
						}
						break;
						case (int)2: {
							HX_STACK_DO_THROW(stop1);
						}
						break;
					}
				}
				else {
					HX_STACK_DO_THROW(_g);
				}
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
		if (!(continueLoop)) {
			goto _hx_goto_39;
		}
	}
	_hx_goto_39:;
	while((this->changes->length > old)){
		 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
		int name = change->name;
		if (change->oldDeclared) {
			this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
			this->variablesValues->__unsafe_set(name,change->oldValue);
		}
		else {
			this->variablesDeclared->__unsafe_set(name,false);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),null())));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,whileLoop,(void))

void Interp_obj::doWhileLoop( ::hscript::Expr cond, ::hscript::Expr body){
	int old = this->changes->length;
	do {
		bool continueLoop = true;
		try {
			HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
			this->interpExpr(body);
		} catch( ::Dynamic _hx_e) {
			if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
				HX_STACK_BEGIN_CATCH
				 ::hscript::_Interp::IStop stop1 = _hx_e;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						continueLoop = false;
					}
					break;
					case (int)1: {
					}
					break;
					case (int)2: {
						HX_STACK_DO_THROW(stop1);
					}
					break;
				}
			}
			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
				HX_STACK_BEGIN_CATCH
				 ::haxe::ValueException _g = _hx_e;
				{
					null();
				}
				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
					 ::hscript::_Interp::IStop stop1 = _g->value;
					switch((int)(stop1->_hx_getIndex())){
						case (int)0: {
							continueLoop = false;
						}
						break;
						case (int)1: {
						}
						break;
						case (int)2: {
							HX_STACK_DO_THROW(stop1);
						}
						break;
					}
				}
				else {
					HX_STACK_DO_THROW(_g);
				}
			}
			else {
				HX_STACK_DO_THROW(_hx_e);
			}
		}
		if (!(continueLoop)) {
			goto _hx_goto_41;
		}
	} while(::hx::IsEq( this->interpExpr(cond),true ));
	_hx_goto_41:;
	while((this->changes->length > old)){
		 ::hscript::_Interp::IDeclaredVariable change = this->changes->pop().StaticCast<  ::hscript::_Interp::IDeclaredVariable >();
		int name = change->name;
		if (change->oldDeclared) {
			this->variablesDeclared->__unsafe_set(name,change->oldDeclared);
			this->variablesValues->__unsafe_set(name,change->oldValue);
		}
		else {
			this->variablesDeclared->__unsafe_set(name,false);
			this->variablesValues->__unsafe_set(name, ::Dynamic(::hx::Anon_obj::Create(1)
				->setFixed(0,HX_("r",72,00,00,00),null())));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,doWhileLoop,(void))

bool Interp_obj::interpLoop( ::hscript::Expr expr){
	bool continueLoop = true;
	try {
		HX_STACK_CATCHABLE( ::hscript::_Interp::IStop, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		this->interpExpr(expr);
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::hscript::_Interp::IStop >() ){
			HX_STACK_BEGIN_CATCH
			 ::hscript::_Interp::IStop stop1 = _hx_e;
			switch((int)(stop1->_hx_getIndex())){
				case (int)0: {
					continueLoop = false;
				}
				break;
				case (int)1: {
				}
				break;
				case (int)2: {
					HX_STACK_DO_THROW(stop1);
				}
				break;
			}
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::hscript::_Interp::IStop >())) {
				 ::hscript::_Interp::IStop stop1 = _g->value;
				switch((int)(stop1->_hx_getIndex())){
					case (int)0: {
						continueLoop = false;
					}
					break;
					case (int)1: {
					}
					break;
					case (int)2: {
						HX_STACK_DO_THROW(stop1);
					}
					break;
				}
			}
			else {
				HX_STACK_DO_THROW(_g);
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return continueLoop;
}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,interpLoop,return )

 ::Dynamic Interp_obj::interpSwitch( ::hscript::Expr expr,::Array< ::Dynamic> cases, ::hscript::Expr defaultExpr){
	 ::Dynamic switchValue = this->interpExpr(expr);
	bool foundMatch = false;
	{
		int _g = 0;
		while((_g < cases->length)){
			 ::hscript::SwitchCase switchCase = cases->__get(_g).StaticCast<  ::hscript::SwitchCase >();
			_g = (_g + 1);
			{
				int _g1 = 0;
				::Array< ::Dynamic> _g2 = switchCase->values;
				while((_g1 < _g2->length)){
					 ::hscript::Expr value = _g2->__get(_g1).StaticCast<  ::hscript::Expr >();
					_g1 = (_g1 + 1);
					if (::hx::IsEq( this->interpExpr(value),switchValue )) {
						foundMatch = true;
						goto _hx_goto_44;
					}
				}
				_hx_goto_44:;
			}
			if (foundMatch) {
				switchValue = this->interpExpr(switchCase->expr);
				goto _hx_goto_43;
			}
		}
		_hx_goto_43:;
	}
	if (!(foundMatch)) {
		if (::hx::IsNotNull( defaultExpr )) {
			switchValue = this->interpExpr(defaultExpr);
		}
		else {
			switchValue = null();
		}
	}
	return switchValue;
}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,interpSwitch,return )

 ::Dynamic Interp_obj::interpNew(int className,::cpp::VirtualArray args){
	 ::Dynamic classType;
	if (( (bool)(_hx_array_unsafe_get(this->variablesDeclared,className)) )) {
		classType =  ::Dynamic(_hx_array_unsafe_get(this->variablesValues,className)->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
	}
	else {
		classType = ::Type_obj::resolveClass(( (::String)(_hx_array_unsafe_get(this->variableNames,className)) ));
	}
	if (::hx::IsNull( classType )) {
		classType = this->resolveGlobal(className);
	}
	::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
	{
		int _g1 = 0;
		while((_g1 < args->get_length())){
			 ::Dynamic arg = args->__get(_g1);
			_g1 = (_g1 + 1);
			_g->push(this->interpExpr(( ( ::hscript::Expr)(arg) )));
		}
	}
	return ::Type_obj::createInstance(classType,_g);
}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,interpNew,return )

 ::Dynamic Interp_obj::assignExpr( ::hscript::Expr left, ::hscript::Expr right){
            	HX_JUST_GC_STACKFRAME
	 ::Dynamic assignValue = this->interpExpr(right);
	{
		 ::hscript::ExprDef _g = left->expr;
		switch((int)(_g->_hx_getIndex())){
			case (int)1: {
				int _g1 = _g->_hx_getInt(0);
				{
					::String varName = ( (::String)(_hx_array_unsafe_get(this->variableNames,_g1)) );
					bool _hx_tmp;
					if (this->hasScriptParent) {
						_hx_tmp = this->scriptParentFields->exists(varName);
					}
					else {
						_hx_tmp = false;
					}
					if (_hx_tmp) {
						switch((int)(this->scriptParentType->_hx_getIndex())){
							case (int)0: {
								 ::Dynamic object = this->scriptParent;
								if (::Std_obj::isOfType(object,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
									return ::hscript::IHScriptCustomBehaviour_obj::hset(object,varName,assignValue);
								}
								else {
									::Reflect_obj::setProperty(object,varName,assignValue);
									return assignValue;
								}
							}
							break;
							case (int)1: {
								return null();
							}
							break;
						}
					}
					{
						this->variablesDeclared->__unsafe_set(_g1,true);
						_hx_array_unsafe_get(this->variablesValues,_g1)->__SetField(HX_("r",72,00,00,00),assignValue,::hx::paccDynamic);
					}
				}
			}
			break;
			case (int)5: {
				::String _g2 = _g->_hx_getString(1);
				{
					 ::Dynamic object1 = this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
					bool _hx_tmp1;
					if (( (bool)(_g->_hx_getObject(2)) )) {
						_hx_tmp1 = ::hx::IsNull( object1 );
					}
					else {
						_hx_tmp1 = false;
					}
					if (_hx_tmp1) {
						return null();
					}
					if (::Std_obj::isOfType(object1,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
						::hscript::IHScriptCustomBehaviour_obj::hset(object1,_g2,assignValue);
					}
					else {
						::Reflect_obj::setProperty(object1,_g2,assignValue);
					}
				}
			}
			break;
			case (int)17: {
				 ::Dynamic array = this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
				 ::Dynamic index = this->interpExpr(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
				if (::Std_obj::isOfType(array,::hx::ClassOf< ::haxe::IMap >())) {
					::haxe::IMap_obj::set( ::hx::interface_check(array,0x09c2bd39),index,assignValue);
				}
				else {
					array->__SetItem(( (int)(index) ),assignValue);
				}
			}
			break;
			default:{
				 ::Dynamic line = left->line;
				int _hx_tmp2;
				if (::hx::IsNotNull( line )) {
					_hx_tmp2 = ( (int)(line) );
				}
				else {
					_hx_tmp2 = this->lineNumber;
				}
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidOp(::haxe::ds::Either_obj::Left(( (unsigned char)(23) ))),null(),null(),this->fileName,_hx_tmp2));
			}
		}
	}
	return assignValue;
}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assignExpr,return )

 ::Dynamic Interp_obj::assignExprOp(unsigned char op, ::hscript::Expr left, ::hscript::Expr right){
            	HX_JUST_GC_STACKFRAME
	 ::Dynamic assignValue = this->interpExpr(right);
	{
		 ::hscript::ExprDef _g = left->expr;
		switch((int)(_g->_hx_getIndex())){
			case (int)1: {
				int _g1 = _g->_hx_getInt(0);
				if (( (bool)(_hx_array_unsafe_get(this->variablesDeclared,_g1)) )) {
					 ::Dynamic val1 = this->interpExpr(left);
					unsigned char _hx_switch_0 = op;
					if (  (_hx_switch_0==( (unsigned char)(0) )) ){
						assignValue = (val1 + assignValue);
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(1) )) ){
						assignValue = (( (Float)(val1) ) - ( (Float)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(2) )) ){
						assignValue = (( (Float)(val1) ) * ( (Float)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(3) )) ){
						assignValue = (( (Float)(val1) ) / ( (Float)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(4) )) ){
						assignValue = ::hx::Mod(val1,assignValue);
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(5) )) ){
						assignValue = (( (int)(val1) ) & ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(6) )) ){
						assignValue = (( (int)(val1) ) | ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(7) )) ){
						assignValue = (( (int)(val1) ) ^ ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(8) )) ){
						assignValue = (( (int)(val1) ) << ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(9) )) ){
						assignValue = (( (int)(val1) ) >> ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(10) )) ){
						assignValue = ::hx::UShr(( (int)(val1) ),( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(11) )) ){
						assignValue = ::hx::IsEq( val1,assignValue );
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(12) )) ){
						assignValue = ::hx::IsNotEq( val1,assignValue );
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(13) )) ){
						assignValue = ::hx::IsGreaterEq( val1,assignValue );
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(14) )) ){
						assignValue = ::hx::IsLessEq( val1,assignValue );
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(15) )) ){
						assignValue = ::hx::IsGreater( val1,assignValue );
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(16) )) ){
						assignValue = ::hx::IsLess( val1,assignValue );
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(17) )) ){
						if (!(!(( (bool)(val1) )))) {
							assignValue = true;
						}
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(18) )) ){
						if (( (bool)(!(( (bool)(val1) ))) )) {
							assignValue = false;
						}
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(19) )) ){
						assignValue = ::Std_obj::isOfType(val1,assignValue);
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(20) )) ){
						 ::Dynamic tmp = val1;
						if (::hx::IsNotNull( tmp )) {
							assignValue = tmp;
						}
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(21) )) ){
						assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(val1) ),( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(22) )) ||  (_hx_switch_0==( (unsigned char)(23) )) ){
						assignValue = null();
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(24) )) ){
						assignValue = (val1 + assignValue);
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(25) )) ){
						assignValue = (( (Float)(val1) ) - ( (Float)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(26) )) ){
						assignValue = (( (Float)(val1) ) * ( (Float)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(27) )) ){
						assignValue = (( (Float)(val1) ) / ( (Float)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(28) )) ){
						assignValue = ::hx::Mod(val1,assignValue);
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(29) )) ){
						assignValue = (( (int)(val1) ) << ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(30) )) ){
						assignValue = (( (int)(val1) ) >> ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(31) )) ){
						assignValue = ::hx::UShr(( (int)(val1) ),( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(32) )) ){
						assignValue = (( (int)(val1) ) | ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(33) )) ){
						assignValue = (( (int)(val1) ) & ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(34) )) ){
						assignValue = (( (int)(val1) ) ^ ( (int)(assignValue) ));
						goto _hx_goto_46;
					}
					if (  (_hx_switch_0==( (unsigned char)(35) )) ){
						 ::Dynamic tmp1 = val1;
						if (::hx::IsNotNull( tmp1 )) {
							assignValue = tmp1;
						}
						goto _hx_goto_46;
					}
					_hx_goto_46:;
					this->variablesDeclared->__unsafe_set(_g1,true);
					_hx_array_unsafe_get(this->variablesValues,_g1)->__SetField(HX_("r",72,00,00,00),assignValue,::hx::paccDynamic);
				}
				else {
					::String varName = ( (::String)(_hx_array_unsafe_get(this->variableNames,_g1)) );
					bool _hx_tmp;
					if (this->hasScriptParent) {
						_hx_tmp = this->scriptParentFields->exists(varName);
					}
					else {
						_hx_tmp = false;
					}
					if (_hx_tmp) {
						 ::Dynamic value;
						switch((int)(this->scriptParentType->_hx_getIndex())){
							case (int)0: {
								 ::Dynamic object = this->scriptParent;
								if (::Std_obj::isOfType(object,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
									value = ::hscript::IHScriptCustomBehaviour_obj::hget(object,varName);
								}
								else {
									value = ::Reflect_obj::getProperty(object,varName);
								}
							}
							break;
							case (int)1: {
								value = null();
							}
							break;
						}
						unsigned char _hx_switch_1 = op;
						if (  (_hx_switch_1==( (unsigned char)(0) )) ){
							assignValue = (value + assignValue);
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(1) )) ){
							assignValue = (( (Float)(value) ) - ( (Float)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(2) )) ){
							assignValue = (( (Float)(value) ) * ( (Float)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(3) )) ){
							assignValue = (( (Float)(value) ) / ( (Float)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(4) )) ){
							assignValue = ::hx::Mod(value,assignValue);
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(5) )) ){
							assignValue = (( (int)(value) ) & ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(6) )) ){
							assignValue = (( (int)(value) ) | ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(7) )) ){
							assignValue = (( (int)(value) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(8) )) ){
							assignValue = (( (int)(value) ) << ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(9) )) ){
							assignValue = (( (int)(value) ) >> ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(10) )) ){
							assignValue = ::hx::UShr(( (int)(value) ),( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(11) )) ){
							assignValue = ::hx::IsEq( value,assignValue );
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(12) )) ){
							assignValue = ::hx::IsNotEq( value,assignValue );
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(13) )) ){
							assignValue = ::hx::IsGreaterEq( value,assignValue );
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(14) )) ){
							assignValue = ::hx::IsLessEq( value,assignValue );
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(15) )) ){
							assignValue = ::hx::IsGreater( value,assignValue );
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(16) )) ){
							assignValue = ::hx::IsLess( value,assignValue );
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(17) )) ){
							if (!(!(( (bool)(value) )))) {
								assignValue = true;
							}
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(18) )) ){
							if (( (bool)(!(( (bool)(value) ))) )) {
								assignValue = false;
							}
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(19) )) ){
							assignValue = ::Std_obj::isOfType(value,assignValue);
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(20) )) ){
							 ::Dynamic tmp2 = value;
							if (::hx::IsNotNull( tmp2 )) {
								assignValue = tmp2;
							}
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(21) )) ){
							assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(value) ),( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(22) )) ||  (_hx_switch_1==( (unsigned char)(23) )) ){
							assignValue = null();
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(24) )) ){
							assignValue = (value + assignValue);
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(25) )) ){
							assignValue = (( (Float)(value) ) - ( (Float)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(26) )) ){
							assignValue = (( (Float)(value) ) * ( (Float)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(27) )) ){
							assignValue = (( (Float)(value) ) / ( (Float)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(28) )) ){
							assignValue = ::hx::Mod(value,assignValue);
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(29) )) ){
							assignValue = (( (int)(value) ) << ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(30) )) ){
							assignValue = (( (int)(value) ) >> ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(31) )) ){
							assignValue = ::hx::UShr(( (int)(value) ),( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(32) )) ){
							assignValue = (( (int)(value) ) | ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(33) )) ){
							assignValue = (( (int)(value) ) & ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(34) )) ){
							assignValue = (( (int)(value) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_47;
						}
						if (  (_hx_switch_1==( (unsigned char)(35) )) ){
							 ::Dynamic tmp3 = value;
							if (::hx::IsNotNull( tmp3 )) {
								assignValue = tmp3;
							}
							goto _hx_goto_47;
						}
						_hx_goto_47:;
						switch((int)(this->scriptParentType->_hx_getIndex())){
							case (int)0: {
								 ::Dynamic object1 = this->scriptParent;
								if (::Std_obj::isOfType(object1,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
									assignValue = ::hscript::IHScriptCustomBehaviour_obj::hset(object1,varName,assignValue);
								}
								else {
									::Reflect_obj::setProperty(object1,varName,assignValue);
								}
							}
							break;
							case (int)1: {
								assignValue = null();
							}
							break;
						}
						return assignValue;
					}
					if (::hscript::StaticInterp_obj::staticVariables->exists(varName)) {
						 ::Dynamic value1 = ::hscript::StaticInterp_obj::staticVariables->get(varName);
						unsigned char _hx_switch_2 = op;
						if (  (_hx_switch_2==( (unsigned char)(0) )) ){
							assignValue = (value1 + assignValue);
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(1) )) ){
							assignValue = (( (Float)(value1) ) - ( (Float)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(2) )) ){
							assignValue = (( (Float)(value1) ) * ( (Float)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(3) )) ){
							assignValue = (( (Float)(value1) ) / ( (Float)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(4) )) ){
							assignValue = ::hx::Mod(value1,assignValue);
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(5) )) ){
							assignValue = (( (int)(value1) ) & ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(6) )) ){
							assignValue = (( (int)(value1) ) | ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(7) )) ){
							assignValue = (( (int)(value1) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(8) )) ){
							assignValue = (( (int)(value1) ) << ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(9) )) ){
							assignValue = (( (int)(value1) ) >> ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(10) )) ){
							assignValue = ::hx::UShr(( (int)(value1) ),( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(11) )) ){
							assignValue = ::hx::IsEq( value1,assignValue );
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(12) )) ){
							assignValue = ::hx::IsNotEq( value1,assignValue );
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(13) )) ){
							assignValue = ::hx::IsGreaterEq( value1,assignValue );
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(14) )) ){
							assignValue = ::hx::IsLessEq( value1,assignValue );
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(15) )) ){
							assignValue = ::hx::IsGreater( value1,assignValue );
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(16) )) ){
							assignValue = ::hx::IsLess( value1,assignValue );
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(17) )) ){
							if (!(!(( (bool)(value1) )))) {
								assignValue = true;
							}
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(18) )) ){
							if (( (bool)(!(( (bool)(value1) ))) )) {
								assignValue = false;
							}
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(19) )) ){
							assignValue = ::Std_obj::isOfType(value1,assignValue);
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(20) )) ){
							 ::Dynamic tmp4 = value1;
							if (::hx::IsNotNull( tmp4 )) {
								assignValue = tmp4;
							}
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(21) )) ){
							assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(value1) ),( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(22) )) ||  (_hx_switch_2==( (unsigned char)(23) )) ){
							assignValue = null();
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(24) )) ){
							assignValue = (value1 + assignValue);
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(25) )) ){
							assignValue = (( (Float)(value1) ) - ( (Float)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(26) )) ){
							assignValue = (( (Float)(value1) ) * ( (Float)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(27) )) ){
							assignValue = (( (Float)(value1) ) / ( (Float)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(28) )) ){
							assignValue = ::hx::Mod(value1,assignValue);
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(29) )) ){
							assignValue = (( (int)(value1) ) << ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(30) )) ){
							assignValue = (( (int)(value1) ) >> ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(31) )) ){
							assignValue = ::hx::UShr(( (int)(value1) ),( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(32) )) ){
							assignValue = (( (int)(value1) ) | ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(33) )) ){
							assignValue = (( (int)(value1) ) & ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(34) )) ){
							assignValue = (( (int)(value1) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_48;
						}
						if (  (_hx_switch_2==( (unsigned char)(35) )) ){
							 ::Dynamic tmp5 = value1;
							if (::hx::IsNotNull( tmp5 )) {
								assignValue = tmp5;
							}
							goto _hx_goto_48;
						}
						_hx_goto_48:;
						::hscript::StaticInterp_obj::staticVariables->set(varName,assignValue);
						return assignValue;
					}
					bool _hx_tmp1;
					if (::hx::IsNotNull( this->publicVariables )) {
						_hx_tmp1 = this->publicVariables->exists(varName);
					}
					else {
						_hx_tmp1 = false;
					}
					if (_hx_tmp1) {
						 ::Dynamic value2 = this->publicVariables->get(varName);
						unsigned char _hx_switch_3 = op;
						if (  (_hx_switch_3==( (unsigned char)(0) )) ){
							assignValue = (value2 + assignValue);
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(1) )) ){
							assignValue = (( (Float)(value2) ) - ( (Float)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(2) )) ){
							assignValue = (( (Float)(value2) ) * ( (Float)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(3) )) ){
							assignValue = (( (Float)(value2) ) / ( (Float)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(4) )) ){
							assignValue = ::hx::Mod(value2,assignValue);
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(5) )) ){
							assignValue = (( (int)(value2) ) & ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(6) )) ){
							assignValue = (( (int)(value2) ) | ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(7) )) ){
							assignValue = (( (int)(value2) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(8) )) ){
							assignValue = (( (int)(value2) ) << ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(9) )) ){
							assignValue = (( (int)(value2) ) >> ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(10) )) ){
							assignValue = ::hx::UShr(( (int)(value2) ),( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(11) )) ){
							assignValue = ::hx::IsEq( value2,assignValue );
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(12) )) ){
							assignValue = ::hx::IsNotEq( value2,assignValue );
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(13) )) ){
							assignValue = ::hx::IsGreaterEq( value2,assignValue );
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(14) )) ){
							assignValue = ::hx::IsLessEq( value2,assignValue );
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(15) )) ){
							assignValue = ::hx::IsGreater( value2,assignValue );
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(16) )) ){
							assignValue = ::hx::IsLess( value2,assignValue );
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(17) )) ){
							if (!(!(( (bool)(value2) )))) {
								assignValue = true;
							}
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(18) )) ){
							if (( (bool)(!(( (bool)(value2) ))) )) {
								assignValue = false;
							}
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(19) )) ){
							assignValue = ::Std_obj::isOfType(value2,assignValue);
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(20) )) ){
							 ::Dynamic tmp6 = value2;
							if (::hx::IsNotNull( tmp6 )) {
								assignValue = tmp6;
							}
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(21) )) ){
							assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(value2) ),( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(22) )) ||  (_hx_switch_3==( (unsigned char)(23) )) ){
							assignValue = null();
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(24) )) ){
							assignValue = (value2 + assignValue);
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(25) )) ){
							assignValue = (( (Float)(value2) ) - ( (Float)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(26) )) ){
							assignValue = (( (Float)(value2) ) * ( (Float)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(27) )) ){
							assignValue = (( (Float)(value2) ) / ( (Float)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(28) )) ){
							assignValue = ::hx::Mod(value2,assignValue);
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(29) )) ){
							assignValue = (( (int)(value2) ) << ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(30) )) ){
							assignValue = (( (int)(value2) ) >> ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(31) )) ){
							assignValue = ::hx::UShr(( (int)(value2) ),( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(32) )) ){
							assignValue = (( (int)(value2) ) | ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(33) )) ){
							assignValue = (( (int)(value2) ) & ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(34) )) ){
							assignValue = (( (int)(value2) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_49;
						}
						if (  (_hx_switch_3==( (unsigned char)(35) )) ){
							 ::Dynamic tmp7 = value2;
							if (::hx::IsNotNull( tmp7 )) {
								assignValue = tmp7;
							}
							goto _hx_goto_49;
						}
						_hx_goto_49:;
						this->publicVariables->set(varName,assignValue);
						return assignValue;
					}
					 ::Dynamic line = left->line;
					int _hx_tmp2;
					if (::hx::IsNotNull( line )) {
						_hx_tmp2 = ( (int)(line) );
					}
					else {
						_hx_tmp2 = this->lineNumber;
					}
					HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EUnknownVariable(varName),null(),null(),this->fileName,_hx_tmp2));
				}
			}
			break;
			case (int)5: {
				 ::hscript::Expr _g2 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
				::String _g3 = _g->_hx_getString(1);
				{
					 ::Dynamic object2 = this->interpExpr(_g2);
					if (::hx::IsNull( object2 )) {
						if (!(( (bool)(_g->_hx_getObject(2)) ))) {
							 ::Dynamic line1 = _g2->line;
							int _hx_tmp3;
							if (::hx::IsNotNull( line1 )) {
								_hx_tmp3 = ( (int)(line1) );
							}
							else {
								_hx_tmp3 = this->lineNumber;
							}
							HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidAccess(_g3),null(),null(),this->fileName,_hx_tmp3));
						}
					}
					else {
						 ::Dynamic fieldValue;
						if (::Std_obj::isOfType(object2,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
							fieldValue = ::hscript::IHScriptCustomBehaviour_obj::hget(object2,_g3);
						}
						else {
							fieldValue = ::Reflect_obj::getProperty(object2,_g3);
						}
						 ::Dynamic fieldValue1 = fieldValue;
						unsigned char _hx_switch_4 = op;
						if (  (_hx_switch_4==( (unsigned char)(0) )) ){
							assignValue = (fieldValue1 + assignValue);
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(1) )) ){
							assignValue = (( (Float)(fieldValue1) ) - ( (Float)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(2) )) ){
							assignValue = (( (Float)(fieldValue1) ) * ( (Float)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(3) )) ){
							assignValue = (( (Float)(fieldValue1) ) / ( (Float)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(4) )) ){
							assignValue = ::hx::Mod(fieldValue1,assignValue);
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(5) )) ){
							assignValue = (( (int)(fieldValue1) ) & ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(6) )) ){
							assignValue = (( (int)(fieldValue1) ) | ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(7) )) ){
							assignValue = (( (int)(fieldValue1) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(8) )) ){
							assignValue = (( (int)(fieldValue1) ) << ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(9) )) ){
							assignValue = (( (int)(fieldValue1) ) >> ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(10) )) ){
							assignValue = ::hx::UShr(( (int)(fieldValue1) ),( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(11) )) ){
							assignValue = ::hx::IsEq( fieldValue1,assignValue );
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(12) )) ){
							assignValue = ::hx::IsNotEq( fieldValue1,assignValue );
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(13) )) ){
							assignValue = ::hx::IsGreaterEq( fieldValue1,assignValue );
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(14) )) ){
							assignValue = ::hx::IsLessEq( fieldValue1,assignValue );
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(15) )) ){
							assignValue = ::hx::IsGreater( fieldValue1,assignValue );
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(16) )) ){
							assignValue = ::hx::IsLess( fieldValue1,assignValue );
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(17) )) ){
							if (!(!(( (bool)(fieldValue1) )))) {
								assignValue = true;
							}
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(18) )) ){
							if (( (bool)(!(( (bool)(fieldValue1) ))) )) {
								assignValue = false;
							}
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(19) )) ){
							assignValue = ::Std_obj::isOfType(fieldValue1,assignValue);
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(20) )) ){
							 ::Dynamic tmp8 = fieldValue1;
							if (::hx::IsNotNull( tmp8 )) {
								assignValue = tmp8;
							}
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(21) )) ){
							assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(fieldValue1) ),( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(22) )) ||  (_hx_switch_4==( (unsigned char)(23) )) ){
							assignValue = null();
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(24) )) ){
							assignValue = (fieldValue1 + assignValue);
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(25) )) ){
							assignValue = (( (Float)(fieldValue1) ) - ( (Float)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(26) )) ){
							assignValue = (( (Float)(fieldValue1) ) * ( (Float)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(27) )) ){
							assignValue = (( (Float)(fieldValue1) ) / ( (Float)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(28) )) ){
							assignValue = ::hx::Mod(fieldValue1,assignValue);
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(29) )) ){
							assignValue = (( (int)(fieldValue1) ) << ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(30) )) ){
							assignValue = (( (int)(fieldValue1) ) >> ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(31) )) ){
							assignValue = ::hx::UShr(( (int)(fieldValue1) ),( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(32) )) ){
							assignValue = (( (int)(fieldValue1) ) | ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(33) )) ){
							assignValue = (( (int)(fieldValue1) ) & ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(34) )) ){
							assignValue = (( (int)(fieldValue1) ) ^ ( (int)(assignValue) ));
							goto _hx_goto_50;
						}
						if (  (_hx_switch_4==( (unsigned char)(35) )) ){
							 ::Dynamic tmp9 = fieldValue1;
							if (::hx::IsNotNull( tmp9 )) {
								assignValue = tmp9;
							}
							goto _hx_goto_50;
						}
						_hx_goto_50:;
						if (::Std_obj::isOfType(object2,::hx::ClassOf< ::hscript::IHScriptCustomBehaviour >())) {
							::hscript::IHScriptCustomBehaviour_obj::hset(object2,_g3,assignValue);
						}
						else {
							::Reflect_obj::setProperty(object2,_g3,assignValue);
						}
					}
				}
			}
			break;
			case (int)17: {
				 ::Dynamic array = this->interpExpr(_g->_hx_getObject(0).StaticCast<  ::hscript::Expr >());
				 ::Dynamic index = this->interpExpr(_g->_hx_getObject(1).StaticCast<  ::hscript::Expr >());
				if (::Std_obj::isOfType(array,::hx::ClassOf< ::haxe::IMap >())) {
					 ::Dynamic val11 = ::haxe::IMap_obj::get( ::hx::interface_check(array,0x09c2bd39),index);
					unsigned char _hx_switch_5 = op;
					if (  (_hx_switch_5==( (unsigned char)(0) )) ){
						assignValue = (val11 + assignValue);
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(1) )) ){
						assignValue = (( (Float)(val11) ) - ( (Float)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(2) )) ){
						assignValue = (( (Float)(val11) ) * ( (Float)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(3) )) ){
						assignValue = (( (Float)(val11) ) / ( (Float)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(4) )) ){
						assignValue = ::hx::Mod(val11,assignValue);
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(5) )) ){
						assignValue = (( (int)(val11) ) & ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(6) )) ){
						assignValue = (( (int)(val11) ) | ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(7) )) ){
						assignValue = (( (int)(val11) ) ^ ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(8) )) ){
						assignValue = (( (int)(val11) ) << ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(9) )) ){
						assignValue = (( (int)(val11) ) >> ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(10) )) ){
						assignValue = ::hx::UShr(( (int)(val11) ),( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(11) )) ){
						assignValue = ::hx::IsEq( val11,assignValue );
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(12) )) ){
						assignValue = ::hx::IsNotEq( val11,assignValue );
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(13) )) ){
						assignValue = ::hx::IsGreaterEq( val11,assignValue );
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(14) )) ){
						assignValue = ::hx::IsLessEq( val11,assignValue );
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(15) )) ){
						assignValue = ::hx::IsGreater( val11,assignValue );
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(16) )) ){
						assignValue = ::hx::IsLess( val11,assignValue );
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(17) )) ){
						if (!(!(( (bool)(val11) )))) {
							assignValue = true;
						}
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(18) )) ){
						if (( (bool)(!(( (bool)(val11) ))) )) {
							assignValue = false;
						}
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(19) )) ){
						assignValue = ::Std_obj::isOfType(val11,assignValue);
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(20) )) ){
						 ::Dynamic tmp10 = val11;
						if (::hx::IsNotNull( tmp10 )) {
							assignValue = tmp10;
						}
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(21) )) ){
						assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(val11) ),( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(22) )) ||  (_hx_switch_5==( (unsigned char)(23) )) ){
						assignValue = null();
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(24) )) ){
						assignValue = (val11 + assignValue);
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(25) )) ){
						assignValue = (( (Float)(val11) ) - ( (Float)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(26) )) ){
						assignValue = (( (Float)(val11) ) * ( (Float)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(27) )) ){
						assignValue = (( (Float)(val11) ) / ( (Float)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(28) )) ){
						assignValue = ::hx::Mod(val11,assignValue);
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(29) )) ){
						assignValue = (( (int)(val11) ) << ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(30) )) ){
						assignValue = (( (int)(val11) ) >> ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(31) )) ){
						assignValue = ::hx::UShr(( (int)(val11) ),( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(32) )) ){
						assignValue = (( (int)(val11) ) | ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(33) )) ){
						assignValue = (( (int)(val11) ) & ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(34) )) ){
						assignValue = (( (int)(val11) ) ^ ( (int)(assignValue) ));
						goto _hx_goto_51;
					}
					if (  (_hx_switch_5==( (unsigned char)(35) )) ){
						 ::Dynamic tmp11 = val11;
						if (::hx::IsNotNull( tmp11 )) {
							assignValue = tmp11;
						}
						goto _hx_goto_51;
					}
					_hx_goto_51:;
					::haxe::IMap_obj::set( ::hx::interface_check(array,0x09c2bd39),index,assignValue);
				}
				else {
					 ::Dynamic val12 = array->__GetItem(( (int)(index) ));
					unsigned char _hx_switch_6 = op;
					if (  (_hx_switch_6==( (unsigned char)(0) )) ){
						assignValue = (val12 + assignValue);
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(1) )) ){
						assignValue = (( (Float)(val12) ) - ( (Float)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(2) )) ){
						assignValue = (( (Float)(val12) ) * ( (Float)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(3) )) ){
						assignValue = (( (Float)(val12) ) / ( (Float)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(4) )) ){
						assignValue = ::hx::Mod(val12,assignValue);
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(5) )) ){
						assignValue = (( (int)(val12) ) & ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(6) )) ){
						assignValue = (( (int)(val12) ) | ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(7) )) ){
						assignValue = (( (int)(val12) ) ^ ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(8) )) ){
						assignValue = (( (int)(val12) ) << ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(9) )) ){
						assignValue = (( (int)(val12) ) >> ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(10) )) ){
						assignValue = ::hx::UShr(( (int)(val12) ),( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(11) )) ){
						assignValue = ::hx::IsEq( val12,assignValue );
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(12) )) ){
						assignValue = ::hx::IsNotEq( val12,assignValue );
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(13) )) ){
						assignValue = ::hx::IsGreaterEq( val12,assignValue );
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(14) )) ){
						assignValue = ::hx::IsLessEq( val12,assignValue );
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(15) )) ){
						assignValue = ::hx::IsGreater( val12,assignValue );
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(16) )) ){
						assignValue = ::hx::IsLess( val12,assignValue );
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(17) )) ){
						if (!(!(( (bool)(val12) )))) {
							assignValue = true;
						}
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(18) )) ){
						if (( (bool)(!(( (bool)(val12) ))) )) {
							assignValue = false;
						}
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(19) )) ){
						assignValue = ::Std_obj::isOfType(val12,assignValue);
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(20) )) ){
						 ::Dynamic tmp12 = val12;
						if (::hx::IsNotNull( tmp12 )) {
							assignValue = tmp12;
						}
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(21) )) ){
						assignValue =  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(val12) ),( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(22) )) ||  (_hx_switch_6==( (unsigned char)(23) )) ){
						assignValue = null();
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(24) )) ){
						assignValue = (val12 + assignValue);
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(25) )) ){
						assignValue = (( (Float)(val12) ) - ( (Float)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(26) )) ){
						assignValue = (( (Float)(val12) ) * ( (Float)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(27) )) ){
						assignValue = (( (Float)(val12) ) / ( (Float)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(28) )) ){
						assignValue = ::hx::Mod(val12,assignValue);
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(29) )) ){
						assignValue = (( (int)(val12) ) << ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(30) )) ){
						assignValue = (( (int)(val12) ) >> ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(31) )) ){
						assignValue = ::hx::UShr(( (int)(val12) ),( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(32) )) ){
						assignValue = (( (int)(val12) ) | ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(33) )) ){
						assignValue = (( (int)(val12) ) & ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(34) )) ){
						assignValue = (( (int)(val12) ) ^ ( (int)(assignValue) ));
						goto _hx_goto_52;
					}
					if (  (_hx_switch_6==( (unsigned char)(35) )) ){
						 ::Dynamic tmp13 = val12;
						if (::hx::IsNotNull( tmp13 )) {
							assignValue = tmp13;
						}
						goto _hx_goto_52;
					}
					_hx_goto_52:;
					array->__SetItem(( (int)(index) ),assignValue);
				}
			}
			break;
			default:{
				 ::Dynamic line2 = left->line;
				int _hx_tmp4;
				if (::hx::IsNotNull( line2 )) {
					_hx_tmp4 = ( (int)(line2) );
				}
				else {
					_hx_tmp4 = this->lineNumber;
				}
				HX_STACK_DO_THROW( ::hscript::Error_obj::__alloc( HX_CTX ,::hscript::ErrorDef_obj::EInvalidOp(::haxe::ds::Either_obj::Left(op)),null(),null(),this->fileName,_hx_tmp4));
			}
		}
	}
	return assignValue;
}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,assignExprOp,return )


::hx::ObjectPtr< Interp_obj > Interp_obj::__new(::String fileName) {
	::hx::ObjectPtr< Interp_obj > __this = new Interp_obj();
	__this->__construct(fileName);
	return __this;
}

::hx::ObjectPtr< Interp_obj > Interp_obj::__alloc(::hx::Ctx *_hx_ctx,::String fileName) {
	Interp_obj *__this = (Interp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interp_obj), true, "hscript.Interp"));
	*(void **)__this = Interp_obj::_hx_vtable;
	__this->__construct(fileName);
	return __this;
}

Interp_obj::Interp_obj()
{
}

::hx::Val Interp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"forLoop") ) { return ::hx::Val( forLoop_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"interpTry") ) { return ::hx::Val( interpTry_dyn() ); }
		if (HX_FIELD_EQ(inName,"whileLoop") ) { return ::hx::Val( whileLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpNew") ) { return ::hx::Val( interpNew_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"interpExpr") ) { return ::hx::Val( interpExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpLoop") ) { return ::hx::Val( interpLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"assignExpr") ) { return ::hx::Val( assignExpr_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"doWhileLoop") ) { return ::hx::Val( doWhileLoop_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"interpImport") ) { return ::hx::Val( interpImport_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpSwitch") ) { return ::hx::Val( interpSwitch_dyn() ); }
		if (HX_FIELD_EQ(inName,"assignExprOp") ) { return ::hx::Val( assignExprOp_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"interpFunction") ) { return ::hx::Val( interpFunction_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"forKeyValueLoop") ) { return ::hx::Val( forKeyValueLoop_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"interpReturnExpr") ) { return ::hx::Val( interpReturnExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeIteratorExpr") ) { return ::hx::Val( makeIteratorExpr_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"safeInterpReturnExpr") ) { return ::hx::Val( safeInterpReturnExpr_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"makeKeyValueIteratorExpr") ) { return ::hx::Val( makeKeyValueIteratorExpr_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Interp_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Interp_obj_sStaticStorageInfo = 0;
#endif

static ::String Interp_obj_sMemberFields[] = {
	HX_("execute",35,0a,0d,cc),
	HX_("interpExpr",29,1d,a1,14),
	HX_("interpReturnExpr",f9,74,e6,f0),
	HX_("safeInterpReturnExpr",66,f8,0e,f2),
	HX_("interpImport",59,a6,04,99),
	HX_("interpFunction",0c,d5,16,4d),
	HX_("interpTry",c7,83,6c,40),
	HX_("forKeyValueLoop",7f,05,38,09),
	HX_("forLoop",0d,52,69,c9),
	HX_("makeIteratorExpr",51,b5,96,ce),
	HX_("makeKeyValueIteratorExpr",c3,97,35,35),
	HX_("whileLoop",b5,42,98,e1),
	HX_("doWhileLoop",aa,01,97,3a),
	HX_("interpLoop",58,c6,3a,19),
	HX_("interpSwitch",e8,4e,fb,55),
	HX_("interpNew",ec,ea,67,40),
	HX_("assignExpr",04,b3,6d,11),
	HX_("assignExprOp",45,c1,83,8e),
	::String(null()) };

::hx::Class Interp_obj::__mClass;

void Interp_obj::__register()
{
	Interp_obj _hx_dummy;
	Interp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Interp",8f,7c,f0,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Interp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Interp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
