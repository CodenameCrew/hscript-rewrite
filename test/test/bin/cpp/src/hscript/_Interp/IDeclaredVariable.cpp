// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript__Interp_IDeclaredVariable
#include <hscript/_Interp/IDeclaredVariable.h>
#endif

namespace hscript{
namespace _Interp{

void IDeclaredVariable_obj::__construct(int name,bool oldDeclared, ::Dynamic oldValue){
	this->name = name;
	this->oldDeclared = oldDeclared;
	this->oldValue = oldValue;
}

Dynamic IDeclaredVariable_obj::__CreateEmpty() { return new IDeclaredVariable_obj; }

void *IDeclaredVariable_obj::_hx_vtable = 0;

Dynamic IDeclaredVariable_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IDeclaredVariable_obj > _hx_result = new IDeclaredVariable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IDeclaredVariable_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e9efd5b;
}


IDeclaredVariable_obj::IDeclaredVariable_obj()
{
}

void IDeclaredVariable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IDeclaredVariable);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(oldDeclared,"oldDeclared");
	HX_MARK_MEMBER_NAME(oldValue,"oldValue");
	HX_MARK_END_CLASS();
}

void IDeclaredVariable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(oldDeclared,"oldDeclared");
	HX_VISIT_MEMBER_NAME(oldValue,"oldValue");
}

::hx::Val IDeclaredVariable_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oldValue") ) { return ::hx::Val( oldValue ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"oldDeclared") ) { return ::hx::Val( oldDeclared ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IDeclaredVariable_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oldValue") ) { oldValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"oldDeclared") ) { oldDeclared=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IDeclaredVariable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("oldDeclared",c1,2c,96,04));
	outFields->push(HX_("oldValue",4a,99,83,18));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IDeclaredVariable_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(IDeclaredVariable_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(IDeclaredVariable_obj,oldDeclared),HX_("oldDeclared",c1,2c,96,04)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(IDeclaredVariable_obj,oldValue),HX_("oldValue",4a,99,83,18)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IDeclaredVariable_obj_sStaticStorageInfo = 0;
#endif

static ::String IDeclaredVariable_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("oldDeclared",c1,2c,96,04),
	HX_("oldValue",4a,99,83,18),
	::String(null()) };

::hx::Class IDeclaredVariable_obj::__mClass;

void IDeclaredVariable_obj::__register()
{
	IDeclaredVariable_obj _hx_dummy;
	IDeclaredVariable_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript._Interp.IDeclaredVariable",69,9a,d5,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IDeclaredVariable_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IDeclaredVariable_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IDeclaredVariable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IDeclaredVariable_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
} // end namespace _Interp
