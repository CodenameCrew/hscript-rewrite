// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Either
#include <haxe/ds/Either.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_ErrorDef
#include <hscript/ErrorDef.h>
#endif
#ifndef INCLUDED_hscript_LToken
#include <hscript/LToken.h>
#endif
#ifndef INCLUDED_hscript_Lexer
#include <hscript/Lexer.h>
#endif
#ifndef INCLUDED_hscript__Ast_ExprBinop_Impl_
#include <hscript/_Ast/ExprBinop_Impl_.h>
#endif
#ifndef INCLUDED_hscript__Ast_ExprUnop_Impl_
#include <hscript/_Ast/ExprUnop_Impl_.h>
#endif

namespace hscript{

void Error_obj::__construct( ::hscript::ErrorDef e, ::Dynamic min, ::Dynamic max,::String fileName, ::Dynamic line){
	this->e = e;
	this->min = ( (int)(min) );
	this->max = ( (int)(max) );
	this->fileName = fileName;
	this->line = ( (int)(line) );
}

Dynamic Error_obj::__CreateEmpty() { return new Error_obj; }

void *Error_obj::_hx_vtable = 0;

Dynamic Error_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Error_obj > _hx_result = new Error_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Error_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2248dc5d;
}

::String Error_obj::toString(){
	::String message;
	 ::hscript::ErrorDef _g = this->e;
	switch((int)(_g->_hx_getIndex())){
		case (int)0: {
			int _g1 = _g->_hx_getInt(0);
			::String message1;
			if ((_g1 == 0)) {
				message1 = HX_("EOF",9c,a0,34,00);
			}
			else {
				message1 = ::String::fromCharCode(_g1);
			}
			message = ((((HX_("Invalid character: '",a1,a5,78,86) + message1) + HX_("' (",ef,b3,1d,00)) + _g1) + HX_(")",29,00,00,00));
		}
		break;
		case (int)1: {
			 ::hscript::LToken _g2 = _g->_hx_getObject(0).StaticCast<  ::hscript::LToken >();
			 ::hscript::LToken _g3 = _g->_hx_getObject(1).StaticCast<  ::hscript::LToken >();
			if (::hx::IsNotNull( _g3 )) {
				::String message2 = ((HX_("Unexpected token: have ",08,8e,40,9b) + ::hscript::Lexer_obj::tokenToString(_g2)) + HX_(", want ",5c,8c,3c,b6));
				message = (message2 + ::hscript::Lexer_obj::tokenToString(_g3));
			}
			else {
				message = (HX_("Unexpected token: ",b0,5c,c5,d0) + ::hscript::Lexer_obj::tokenToString(_g2));
			}
		}
		break;
		case (int)2: {
			message = HX_("Unterminated string",d5,ed,a8,63);
		}
		break;
		case (int)3: {
			message = HX_("Unterminated comment",db,18,a4,58);
		}
		break;
		case (int)4: {
			message = ((HX_("Invalid preprocessor (",c0,ad,45,7c) + _g->_hx_getString(0)) + HX_(")",29,00,00,00));
		}
		break;
		case (int)5: {
			message = (HX_("Unknown variable: ",d8,ac,05,6b) + _g->_hx_getString(0));
		}
		break;
		case (int)6: {
			message = (HX_("Invalid iterator: ",bd,0a,a8,b4) + _g->_hx_getString(0));
		}
		break;
		case (int)7: {
			 ::haxe::ds::Either _g4 = _g->_hx_getObject(0).StaticCast<  ::haxe::ds::Either >();
			::String message3;
			switch((int)(_g4->_hx_getIndex())){
				case (int)0: {
					message3 = ::hscript::_Ast::ExprBinop_Impl__obj::EXPR_TO_LEXER_OP->get_string(( (int)(_g4->_hx_getObject(0)) ));
				}
				break;
				case (int)1: {
					message3 = ::hscript::_Ast::ExprUnop_Impl__obj::EXPR_TO_LEXER_UNOP->get_string(( (int)(_g4->_hx_getObject(0)) ));
				}
				break;
			}
			message = (HX_("Invalid operator: ",f3,35,a1,ea) + message3);
		}
		break;
		case (int)8: {
			message = (HX_("Invalid access to field ",18,98,cb,c3) + _g->_hx_getString(0));
		}
		break;
		case (int)9: {
			message = (HX_("Type not found ",91,f2,c8,aa) + _g->_hx_getString(0));
		}
		break;
		case (int)10: {
			message = _g->_hx_getString(0);
		}
		break;
	}
	::String _hx_tmp;
	bool _hx_tmp1;
	if (::hx::IsNotNull( this->fileName )) {
		_hx_tmp1 = (this->fileName != HX_("",00,00,00,00));
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		_hx_tmp = (this->fileName + HX_(":",3a,00,00,00));
	}
	else {
		_hx_tmp = HX_("",00,00,00,00);
	}
	return (((_hx_tmp + this->line) + HX_(": ",a6,32,00,00)) + message);
}


HX_DEFINE_DYNAMIC_FUNC0(Error_obj,toString,return )


::hx::ObjectPtr< Error_obj > Error_obj::__new( ::hscript::ErrorDef e, ::Dynamic min, ::Dynamic max,::String fileName, ::Dynamic line) {
	::hx::ObjectPtr< Error_obj > __this = new Error_obj();
	__this->__construct(e,min,max,fileName,line);
	return __this;
}

::hx::ObjectPtr< Error_obj > Error_obj::__alloc(::hx::Ctx *_hx_ctx, ::hscript::ErrorDef e, ::Dynamic min, ::Dynamic max,::String fileName, ::Dynamic line) {
	Error_obj *__this = (Error_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Error_obj), true, "hscript.Error"));
	*(void **)__this = Error_obj::_hx_vtable;
	__this->__construct(e,min,max,fileName,line);
	return __this;
}

Error_obj::Error_obj()
{
}

void Error_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Error);
	HX_MARK_MEMBER_NAME(e,"e");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(fileName,"fileName");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_END_CLASS();
}

void Error_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(e,"e");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(fileName,"fileName");
	HX_VISIT_MEMBER_NAME(line,"line");
}

::hx::Val Error_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"e") ) { return ::hx::Val( e ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { return ::hx::Val( fileName ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Error_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"e") ) { e=inValue.Cast<  ::hscript::ErrorDef >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { fileName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Error_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("e",65,00,00,00));
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	outFields->push(HX_("fileName",e7,5a,43,62));
	outFields->push(HX_("line",f4,17,b3,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Error_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hscript::ErrorDef */ ,(int)offsetof(Error_obj,e),HX_("e",65,00,00,00)},
	{::hx::fsInt,(int)offsetof(Error_obj,min),HX_("min",92,11,53,00)},
	{::hx::fsInt,(int)offsetof(Error_obj,max),HX_("max",a4,0a,53,00)},
	{::hx::fsString,(int)offsetof(Error_obj,fileName),HX_("fileName",e7,5a,43,62)},
	{::hx::fsInt,(int)offsetof(Error_obj,line),HX_("line",f4,17,b3,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Error_obj_sStaticStorageInfo = 0;
#endif

static ::String Error_obj_sMemberFields[] = {
	HX_("e",65,00,00,00),
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	HX_("fileName",e7,5a,43,62),
	HX_("line",f4,17,b3,47),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Error_obj::__mClass;

void Error_obj::__register()
{
	Error_obj _hx_dummy;
	Error_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Error",6d,b9,ef,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Error_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Error_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Error_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Error_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
