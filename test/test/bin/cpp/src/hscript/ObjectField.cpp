// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_ObjectField
#include <hscript/ObjectField.h>
#endif

namespace hscript{

void ObjectField_obj::__construct(::String name, ::hscript::Expr expr){
	this->name = name;
	this->expr = expr;
}

Dynamic ObjectField_obj::__CreateEmpty() { return new ObjectField_obj; }

void *ObjectField_obj::_hx_vtable = 0;

Dynamic ObjectField_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectField_obj > _hx_result = new ObjectField_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ObjectField_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23df0908;
}


::hx::ObjectPtr< ObjectField_obj > ObjectField_obj::__new(::String name, ::hscript::Expr expr) {
	::hx::ObjectPtr< ObjectField_obj > __this = new ObjectField_obj();
	__this->__construct(name,expr);
	return __this;
}

::hx::ObjectPtr< ObjectField_obj > ObjectField_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::hscript::Expr expr) {
	ObjectField_obj *__this = (ObjectField_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ObjectField_obj), true, "hscript.ObjectField"));
	*(void **)__this = ObjectField_obj::_hx_vtable;
	__this->__construct(name,expr);
	return __this;
}

ObjectField_obj::ObjectField_obj()
{
}

void ObjectField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectField);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_END_CLASS();
}

void ObjectField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(expr,"expr");
}

::hx::Val ObjectField_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ObjectField_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::hscript::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("expr",35,fd,1d,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ObjectField_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(ObjectField_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::hscript::Expr */ ,(int)offsetof(ObjectField_obj,expr),HX_("expr",35,fd,1d,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ObjectField_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectField_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("expr",35,fd,1d,43),
	::String(null()) };

::hx::Class ObjectField_obj::__mClass;

void ObjectField_obj::__register()
{
	ObjectField_obj _hx_dummy;
	ObjectField_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.ObjectField",e0,e8,8d,ae);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ObjectField_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ObjectField_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectField_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript
