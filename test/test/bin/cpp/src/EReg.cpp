// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif

static const ::String _hx_array_data_2dda4a0f_3[] = {
	HX_("$",24,00,00,00),
};
static const ::String _hx_array_data_2dda4a0f_4[] = {
	HX_("$",24,00,00,00),
};

void EReg_obj::__construct(::String r,::String opt){
	::Array< ::String > a = opt.split(HX_("g",67,00,00,00));
	this->global = (a->length > 1);
	if (this->global) {
		opt = a->join(HX_("",00,00,00,00));
	}
	this->r = _hx_regexp_new_options(r,opt);
}

Dynamic EReg_obj::__CreateEmpty() { return new EReg_obj; }

void *EReg_obj::_hx_vtable = 0;

Dynamic EReg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EReg_obj > _hx_result = new EReg_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool EReg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x022d4033;
}

bool EReg_obj::match(::String s){
	bool p = _hx_regexp_match(this->r,s,0,s.length);
	if (p) {
		this->last = s;
	}
	else {
		this->last = null();
	}
	return p;
}


HX_DEFINE_DYNAMIC_FUNC1(EReg_obj,match,return )

::String EReg_obj::matched(int n){
	return _hx_regexp_matched(this->r,n);
}


HX_DEFINE_DYNAMIC_FUNC1(EReg_obj,matched,return )

::String EReg_obj::matchedLeft(){
	 ::Dynamic p = _hx_regexp_matched_pos(this->r,0);
	return this->last.substr(0,p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic));
}


HX_DEFINE_DYNAMIC_FUNC0(EReg_obj,matchedLeft,return )

::String EReg_obj::matchedRight(){
	 ::Dynamic p = _hx_regexp_matched_pos(this->r,0);
	int sz = ( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) );
	return this->last.substr(sz,(this->last.length - sz));
}


HX_DEFINE_DYNAMIC_FUNC0(EReg_obj,matchedRight,return )

 ::Dynamic EReg_obj::matchedPos(){
	return _hx_regexp_matched_pos(this->r,0);
}


HX_DEFINE_DYNAMIC_FUNC0(EReg_obj,matchedPos,return )

bool EReg_obj::matchSub(::String s,int pos,::hx::Null< int >  __o_len){
	int len = __o_len.Default(-1);
	int p;
	if ((len < 0)) {
		p = (s.length - pos);
	}
	else {
		p = len;
	}
	bool p1 = _hx_regexp_match(this->r,s,pos,p);
	if (p1) {
		this->last = s;
	}
	else {
		this->last = null();
	}
	return p1;
}


HX_DEFINE_DYNAMIC_FUNC3(EReg_obj,matchSub,return )

::Array< ::String > EReg_obj::split(::String s){
	int pos = 0;
	int len = s.length;
	::Array< ::String > a = ::Array_obj< ::String >::__new();
	bool first = true;
	while(_hx_regexp_match(this->r,s,pos,len)){
		 ::Dynamic p = _hx_regexp_matched_pos(this->r,0);
		bool _hx_tmp;
		if (::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),0 )) {
			_hx_tmp = !(first);
		}
		else {
			_hx_tmp = false;
		}
		if (_hx_tmp) {
			if (::hx::IsEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),s.length )) {
				goto _hx_goto_0;
			}
			p->__SetField(HX_("pos",94,5d,55,00),(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + 1),::hx::paccDynamic);
		}
		a->push(s.substr(pos,(( (int)(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) ) - pos)));
		int tot = (( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) ) - pos);
		pos = (pos + tot);
		len = (len - tot);
		first = false;
		if (!(this->global)) {
			goto _hx_goto_0;
		}
	}
	_hx_goto_0:;
	a->push(s.substr(pos,len));
	return a;
}


HX_DEFINE_DYNAMIC_FUNC1(EReg_obj,split,return )

::String EReg_obj::replace(::String s,::String by){
            	HX_JUST_GC_STACKFRAME
	 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
	int pos = 0;
	int len = s.length;
	::Array< ::String > a = by.split(HX_("$",24,00,00,00));
	bool first = true;
	while(_hx_regexp_match(this->r,s,pos,len)){
		 ::Dynamic p = _hx_regexp_matched_pos(this->r,0);
		bool _hx_tmp;
		if (::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),0 )) {
			_hx_tmp = !(first);
		}
		else {
			_hx_tmp = false;
		}
		if (_hx_tmp) {
			if (::hx::IsEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),s.length )) {
				goto _hx_goto_1;
			}
			p->__SetField(HX_("pos",94,5d,55,00),(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + 1),::hx::paccDynamic);
		}
		{
			 ::Dynamic len1 = (( (int)(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) ) - pos);
			if (::hx::IsNotNull( b->charBuf )) {
				b->flush();
			}
			if (::hx::IsNull( b->b )) {
				b->b = ::Array_obj< ::String >::__new(1)->init(0,s.substr(pos,len1));
			}
			else {
				::Array< ::String > b1 = b->b;
				b1->push(s.substr(pos,len1));
			}
		}
		if ((a->length > 0)) {
			::String x = a->__get(0);
			if (::hx::IsNotNull( b->charBuf )) {
				b->flush();
			}
			if (::hx::IsNull( b->b )) {
				b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
			}
			else {
				::Array< ::String > b2 = b->b;
				b2->push(::Std_obj::string(x));
			}
		}
		int i = 1;
		while((i < a->length)){
			::String k = a->__get(i);
			 ::Dynamic c = k.charCodeAt(0);
			bool _hx_tmp1;
			if (::hx::IsGreaterEq( c,49 )) {
				_hx_tmp1 = ::hx::IsLessEq( c,57 );
			}
			else {
				_hx_tmp1 = false;
			}
			if (_hx_tmp1) {
				 ::Dynamic p1;
				try {
					HX_STACK_CATCHABLE(::String, 0);
					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
					 ::Dynamic p2 = this->r;
					p1 = _hx_regexp_matched_pos(p2,(::Std_obj::_hx_int(( (Float)(c) )) - 48));
				} catch( ::Dynamic _hx_e) {
					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
						HX_STACK_BEGIN_CATCH
						::String e = _hx_e;
						p1 = null();
					}
					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
						HX_STACK_BEGIN_CATCH
						 ::haxe::ValueException _g = _hx_e;
						{
							null();
						}
						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
							p1 = null();
						}
						else {
							HX_STACK_DO_THROW(_g);
						}
					}
					else {
						HX_STACK_DO_THROW(_hx_e);
					}
				}
				if (::hx::IsNull( p1 )) {
					{
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_2dda4a0f_3,1);
						}
						else {
							b->b->push(HX_("$",24,00,00,00));
						}
					}
					{
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(k));
						}
						else {
							::Array< ::String > b3 = b->b;
							b3->push(::Std_obj::string(k));
						}
					}
				}
				else {
					{
						int pos1 = ( (int)(p1->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) );
						 ::Dynamic len2 = p1->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic);
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::__new(1)->init(0,s.substr(pos1,len2));
						}
						else {
							::Array< ::String > b4 = b->b;
							b4->push(s.substr(pos1,len2));
						}
					}
					{
						 ::Dynamic len3 = (k.length - 1);
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::__new(1)->init(0,k.substr(1,len3));
						}
						else {
							::Array< ::String > b5 = b->b;
							b5->push(k.substr(1,len3));
						}
					}
				}
			}
			else {
				if (::hx::IsNull( c )) {
					{
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_2dda4a0f_4,1);
						}
						else {
							b->b->push(HX_("$",24,00,00,00));
						}
					}
					i = (i + 1);
					::String k2 = a->__get(i);
					bool _hx_tmp2;
					if (::hx::IsNotNull( k2 )) {
						_hx_tmp2 = (k2.length > 0);
					}
					else {
						_hx_tmp2 = false;
					}
					if (_hx_tmp2) {
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(k2));
						}
						else {
							::Array< ::String > b6 = b->b;
							b6->push(::Std_obj::string(k2));
						}
					}
				}
				else {
					::String x1 = (HX_("$",24,00,00,00) + k);
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
					}
					else {
						::Array< ::String > b7 = b->b;
						b7->push(::Std_obj::string(x1));
					}
				}
			}
			i = (i + 1);
		}
		int tot = (( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) ) - pos);
		pos = (pos + tot);
		len = (len - tot);
		first = false;
		if (!(this->global)) {
			goto _hx_goto_1;
		}
	}
	_hx_goto_1:;
	{
		if (::hx::IsNotNull( b->charBuf )) {
			b->flush();
		}
		if (::hx::IsNull( b->b )) {
			b->b = ::Array_obj< ::String >::__new(1)->init(0,s.substr(pos,len));
		}
		else {
			::Array< ::String > b8 = b->b;
			b8->push(s.substr(pos,len));
		}
	}
	return b->toString();
}


HX_DEFINE_DYNAMIC_FUNC2(EReg_obj,replace,return )

::String EReg_obj::map(::String s, ::Dynamic f){
            	HX_JUST_GC_STACKFRAME
	int offset = 0;
	 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
	do {
		if ((offset >= s.length)) {
			goto _hx_goto_5;
		}
		else {
			if (!(this->matchSub(s,offset,null()))) {
				{
					::String x = s.substr(offset,null());
					if (::hx::IsNotNull( buf->charBuf )) {
						buf->flush();
					}
					if (::hx::IsNull( buf->b )) {
						buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
					}
					else {
						::Array< ::String > buf1 = buf->b;
						buf1->push(::Std_obj::string(x));
					}
				}
				goto _hx_goto_5;
			}
		}
		 ::Dynamic p = _hx_regexp_matched_pos(this->r,0);
		{
			::String x1 = s.substr(offset,(( (int)(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) ) - offset));
			if (::hx::IsNotNull( buf->charBuf )) {
				buf->flush();
			}
			if (::hx::IsNull( buf->b )) {
				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
			}
			else {
				::Array< ::String > buf2 = buf->b;
				buf2->push(::Std_obj::string(x1));
			}
		}
		{
			::String x2 = ( (::String)(f(::hx::ObjectPtr<OBJ_>(this))) );
			if (::hx::IsNotNull( buf->charBuf )) {
				buf->flush();
			}
			if (::hx::IsNull( buf->b )) {
				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
			}
			else {
				::Array< ::String > buf3 = buf->b;
				buf3->push(::Std_obj::string(x2));
			}
		}
		if (::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),0 )) {
			{
				::String x3 = s.substr(( (int)(p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) ),1);
				if (::hx::IsNotNull( buf->charBuf )) {
					buf->flush();
				}
				if (::hx::IsNull( buf->b )) {
					buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
				}
				else {
					::Array< ::String > buf4 = buf->b;
					buf4->push(::Std_obj::string(x3));
				}
			}
			offset = ( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + 1)) );
		}
		else {
			offset = ( (int)((p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) );
		}
	} while(this->global);
	_hx_goto_5:;
	bool _hx_tmp;
	bool _hx_tmp1;
	if (!(this->global)) {
		_hx_tmp1 = (offset > 0);
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		_hx_tmp = (offset < s.length);
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		::String x4 = s.substr(offset,null());
		if (::hx::IsNotNull( buf->charBuf )) {
			buf->flush();
		}
		if (::hx::IsNull( buf->b )) {
			buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
		}
		else {
			::Array< ::String > buf5 = buf->b;
			buf5->push(::Std_obj::string(x4));
		}
	}
	return buf->toString();
}


HX_DEFINE_DYNAMIC_FUNC2(EReg_obj,map,return )

::String EReg_obj::toString(){
	return ((HX_("EReg(",39,83,26,f1) + ::Std_obj::string(this->r)) + HX_(")",29,00,00,00));
}


HX_DEFINE_DYNAMIC_FUNC0(EReg_obj,toString,return )

::String EReg_obj::escape(::String s){
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
	::String _hx_run( ::EReg r){
		return (HX_("\\",5c,00,00,00) + r->matched(0));
	}
	HX_END_LOCAL_FUNC1(return)

	return ::EReg_obj::escapeRegExpRe->map(s, ::Dynamic(new _hx_Closure_0()));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(EReg_obj,escape,return )

 ::EReg EReg_obj::escapeRegExpRe;


::hx::ObjectPtr< EReg_obj > EReg_obj::__new(::String r,::String opt) {
	::hx::ObjectPtr< EReg_obj > __this = new EReg_obj();
	__this->__construct(r,opt);
	return __this;
}

::hx::ObjectPtr< EReg_obj > EReg_obj::__alloc(::hx::Ctx *_hx_ctx,::String r,::String opt) {
	EReg_obj *__this = (EReg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EReg_obj), true, "EReg"));
	*(void **)__this = EReg_obj::_hx_vtable;
	__this->__construct(r,opt);
	return __this;
}

EReg_obj::EReg_obj()
{
}

void EReg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EReg);
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_MEMBER_NAME(global,"global");
	HX_MARK_END_CLASS();
}

void EReg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(last,"last");
	HX_VISIT_MEMBER_NAME(global,"global");
}

::hx::Val EReg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return ::hx::Val( r ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { return ::hx::Val( last ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { return ::hx::Val( match_dyn() ); }
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { return ::hx::Val( global ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"matched") ) { return ::hx::Val( matched_dyn() ); }
		if (HX_FIELD_EQ(inName,"replace") ) { return ::hx::Val( replace_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"matchSub") ) { return ::hx::Val( matchSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"matchedPos") ) { return ::hx::Val( matchedPos_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"matchedLeft") ) { return ::hx::Val( matchedLeft_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"matchedRight") ) { return ::hx::Val( matchedRight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EReg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"escape") ) { outValue = escape_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"escapeRegExpRe") ) { outValue = ( escapeRegExpRe ); return true; }
	}
	return false;
}

::hx::Val EReg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { global=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool EReg_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"escapeRegExpRe") ) { escapeRegExpRe=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

void EReg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("last",56,0a,ad,47));
	outFields->push(HX_("global",63,31,b2,a7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EReg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(EReg_obj,r),HX_("r",72,00,00,00)},
	{::hx::fsString,(int)offsetof(EReg_obj,last),HX_("last",56,0a,ad,47)},
	{::hx::fsBool,(int)offsetof(EReg_obj,global),HX_("global",63,31,b2,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo EReg_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::EReg */ ,(void *) &EReg_obj::escapeRegExpRe,HX_("escapeRegExpRe",5d,a4,2a,b2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String EReg_obj_sMemberFields[] = {
	HX_("r",72,00,00,00),
	HX_("last",56,0a,ad,47),
	HX_("global",63,31,b2,a7),
	HX_("match",45,49,23,03),
	HX_("matched",e4,3c,7c,89),
	HX_("matchedLeft",0b,b3,2f,7c),
	HX_("matchedRight",58,04,9a,a4),
	HX_("matchedPos",10,ff,c2,cb),
	HX_("matchSub",3b,71,2b,c3),
	HX_("split",da,ea,6e,81),
	HX_("replace",34,48,28,ab),
	HX_("map",9c,0a,53,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void EReg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EReg_obj::escapeRegExpRe,"escapeRegExpRe");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EReg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EReg_obj::escapeRegExpRe,"escapeRegExpRe");
};

#endif

::hx::Class EReg_obj::__mClass;

static ::String EReg_obj_sStaticFields[] = {
	HX_("escape",81,43,da,da),
	HX_("escapeRegExpRe",5d,a4,2a,b2),
	::String(null())
};

void EReg_obj::__register()
{
	EReg_obj _hx_dummy;
	EReg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("EReg",0f,4a,da,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EReg_obj::__GetStatic;
	__mClass->mSetStaticField = &EReg_obj::__SetStatic;
	__mClass->mMarkFunc = EReg_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EReg_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EReg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EReg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EReg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EReg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EReg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EReg_obj::__boot()
{
{
	HX_JUST_GC_STACKFRAME
	escapeRegExpRe =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\[\\]{}()*+?.\\\\\\^$|]",35,dd,81,d0),HX_("g",67,00,00,00));
}
}

