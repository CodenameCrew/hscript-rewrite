// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

namespace sys{

void FileSystem_obj::__construct() { }

Dynamic FileSystem_obj::__CreateEmpty() { return new FileSystem_obj; }

void *FileSystem_obj::_hx_vtable = 0;

Dynamic FileSystem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FileSystem_obj > _hx_result = new FileSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FileSystem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2378c654;
}

bool FileSystem_obj::exists(::String path){
	::String _hx_tmp;
	bool _hx_tmp1;
	if (::hx::IsEq( path.charCodeAt(1),58 )) {
		_hx_tmp1 = (path.length <= 3);
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		_hx_tmp = ::haxe::io::Path_obj::addTrailingSlash(path);
	}
	else {
		if ((path == HX_("/",2f,00,00,00))) {
			_hx_tmp = HX_("/",2f,00,00,00);
		}
		else {
			_hx_tmp = ::haxe::io::Path_obj::removeTrailingSlashes(path);
		}
	}
	return _hx_std_sys_exists(_hx_tmp);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,exists,return )

void FileSystem_obj::rename(::String path,::String newPath){
	_hx_std_sys_rename(path,newPath);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FileSystem_obj,rename,(void))

 ::Dynamic FileSystem_obj::stat(::String path){
	::String s;
	bool s1;
	if (::hx::IsEq( path.charCodeAt(1),58 )) {
		s1 = (path.length <= 3);
	}
	else {
		s1 = false;
	}
	if (s1) {
		s = ::haxe::io::Path_obj::addTrailingSlash(path);
	}
	else {
		if ((path == HX_("/",2f,00,00,00))) {
			s = HX_("/",2f,00,00,00);
		}
		else {
			s = ::haxe::io::Path_obj::removeTrailingSlashes(path);
		}
	}
	 ::Dynamic s2 = _hx_std_sys_stat(s);
	if (::hx::IsNull( s2 )) {
		 ::Date _hx_tmp = ::Date_obj::fromTime(( (Float)(0) ));
		 ::Date _hx_tmp1 = ::Date_obj::fromTime(( (Float)(0) ));
		return  ::Dynamic(::hx::Anon_obj::Create(11)
			->setFixed(0,HX_("nlink",68,e7,c6,9d),0)
			->setFixed(1,HX_("dev",d5,39,4c,00),0)
			->setFixed(2,HX_("gid",02,84,4e,00),0)
			->setFixed(3,HX_("ino",ea,0c,50,00),0)
			->setFixed(4,HX_("uid",90,23,59,00),0)
			->setFixed(5,HX_("mtime",fa,06,aa,0f),_hx_tmp1)
			->setFixed(6,HX_("atime",ee,10,db,26),_hx_tmp)
			->setFixed(7,HX_("mode",63,d3,60,48),0)
			->setFixed(8,HX_("rdev",a3,8c,a6,4b),0)
			->setFixed(9,HX_("size",c1,a0,53,4c),0)
			->setFixed(10,HX_("ctime",f0,39,a8,4d),::Date_obj::fromTime(( (Float)(0) ))));
	}
	s2->__SetField(HX_("atime",ee,10,db,26),::Date_obj::fromTime((((Float)1000.0) * ( (Float)(s2->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) ))),::hx::paccDynamic);
	s2->__SetField(HX_("mtime",fa,06,aa,0f),::Date_obj::fromTime((((Float)1000.0) * ( (Float)(s2->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) ))),::hx::paccDynamic);
	s2->__SetField(HX_("ctime",f0,39,a8,4d),::Date_obj::fromTime((((Float)1000.0) * ( (Float)(s2->__Field(HX_("ctime",f0,39,a8,4d),::hx::paccDynamic)) ))),::hx::paccDynamic);
	return s2;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,stat,return )

::String FileSystem_obj::fullPath(::String relPath){
	return _hx_std_file_full_path(relPath);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,fullPath,return )

::String FileSystem_obj::absolutePath(::String relPath){
	if (::haxe::io::Path_obj::isAbsolute(relPath)) {
		return relPath;
	}
	return ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,::Sys_obj::getCwd())->init(1,relPath));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,absolutePath,return )

::String FileSystem_obj::kind(::String path){
	::String _hx_tmp;
	bool _hx_tmp1;
	if (::hx::IsEq( path.charCodeAt(1),58 )) {
		_hx_tmp1 = (path.length <= 3);
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		_hx_tmp = ::haxe::io::Path_obj::addTrailingSlash(path);
	}
	else {
		if ((path == HX_("/",2f,00,00,00))) {
			_hx_tmp = HX_("/",2f,00,00,00);
		}
		else {
			_hx_tmp = ::haxe::io::Path_obj::removeTrailingSlashes(path);
		}
	}
	return _hx_std_sys_file_type(_hx_tmp);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,kind,return )

bool FileSystem_obj::isDirectory(::String path){
	::String _hx_tmp;
	bool _hx_tmp1;
	if (::hx::IsEq( path.charCodeAt(1),58 )) {
		_hx_tmp1 = (path.length <= 3);
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		_hx_tmp = ::haxe::io::Path_obj::addTrailingSlash(path);
	}
	else {
		if ((path == HX_("/",2f,00,00,00))) {
			_hx_tmp = HX_("/",2f,00,00,00);
		}
		else {
			_hx_tmp = ::haxe::io::Path_obj::removeTrailingSlashes(path);
		}
	}
	return (_hx_std_sys_file_type(_hx_tmp) == HX_("dir",4d,3d,4c,00));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,isDirectory,return )

void FileSystem_obj::createDirectory(::String path){
	::String path1 = ::haxe::io::Path_obj::addTrailingSlash(path);
	::String _p = null();
	::Array< ::String > parts = ::Array_obj< ::String >::__new(0);
	while(true){
		_p = ::haxe::io::Path_obj::directory(path1);
		if (!((path1 != _p))) {
			goto _hx_goto_0;
		}
		parts->unshift(path1);
		path1 = _p;
	}
	_hx_goto_0:;
	{
		int _g = 0;
		while((_g < parts->length)){
			::String part = parts->__get(_g);
			_g = (_g + 1);
			bool _hx_tmp;
			bool _hx_tmp1;
			if (::hx::IsNotEq( part.charCodeAt((part.length - 1)),58 )) {
				_hx_tmp1 = !(::sys::FileSystem_obj::exists(part));
			}
			else {
				_hx_tmp1 = false;
			}
			if (_hx_tmp1) {
				_hx_tmp = !(_hx_std_sys_create_dir(part,493));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				HX_STACK_DO_THROW((HX_("Could not create directory:",05,3d,91,19) + part));
			}
		}
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,createDirectory,(void))

void FileSystem_obj::deleteFile(::String path){
	_hx_std_file_delete(path);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,deleteFile,(void))

void FileSystem_obj::deleteDirectory(::String path){
	_hx_std_sys_remove_dir(path);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,deleteDirectory,(void))

::Array< ::String > FileSystem_obj::readDirectory(::String path){
	return _hx_std_sys_read_dir(path);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,readDirectory,return )

::String FileSystem_obj::makeCompatiblePath(::String path){
	bool _hx_tmp;
	if (::hx::IsEq( path.charCodeAt(1),58 )) {
		_hx_tmp = (path.length <= 3);
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		return ::haxe::io::Path_obj::addTrailingSlash(path);
	}
	else {
		if ((path == HX_("/",2f,00,00,00))) {
			return HX_("/",2f,00,00,00);
		}
		else {
			return ::haxe::io::Path_obj::removeTrailingSlashes(path);
		}
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,makeCompatiblePath,return )


FileSystem_obj::FileSystem_obj()
{
}

bool FileSystem_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stat") ) { outValue = stat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"kind") ) { outValue = kind_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rename") ) { outValue = rename_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fullPath") ) { outValue = fullPath_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"deleteFile") ) { outValue = deleteFile_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isDirectory") ) { outValue = isDirectory_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"absolutePath") ) { outValue = absolutePath_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readDirectory") ) { outValue = readDirectory_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createDirectory") ) { outValue = createDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"deleteDirectory") ) { outValue = deleteDirectory_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"makeCompatiblePath") ) { outValue = makeCompatiblePath_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FileSystem_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FileSystem_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FileSystem_obj::__mClass;

static ::String FileSystem_obj_sStaticFields[] = {
	HX_("exists",dc,1d,e0,bf),
	HX_("rename",7e,2b,27,05),
	HX_("stat",d4,e3,5b,4c),
	HX_("fullPath",d4,6e,65,5e),
	HX_("absolutePath",bc,e7,6e,f7),
	HX_("kind",54,e1,09,47),
	HX_("isDirectory",23,a9,c5,ee),
	HX_("createDirectory",d1,ab,39,b1),
	HX_("deleteFile",47,ac,08,97),
	HX_("deleteDirectory",c2,34,a9,52),
	HX_("readDirectory",37,6c,b3,a3),
	HX_("makeCompatiblePath",a7,39,ac,6a),
	::String(null())
};

void FileSystem_obj::__register()
{
	FileSystem_obj _hx_dummy;
	FileSystem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.FileSystem",6c,2c,e5,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FileSystem_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FileSystem_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FileSystem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FileSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FileSystem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
