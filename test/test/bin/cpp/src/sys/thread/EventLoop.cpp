// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif
#ifndef INCLUDED_sys_thread_EventLoop
#include <sys/thread/EventLoop.h>
#endif
#ifndef INCLUDED_sys_thread_Lock
#include <sys/thread/Lock.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif
#ifndef INCLUDED_sys_thread_NextEventTime
#include <sys/thread/NextEventTime.h>
#endif
#ifndef INCLUDED_sys_thread__EventLoop_RegularEvent
#include <sys/thread/_EventLoop/RegularEvent.h>
#endif

namespace sys{
namespace thread{

void EventLoop_obj::__construct(){
            	HX_JUST_GC_STACKFRAME
	this->promisedEventsCount = 0;
	this->waitLock =  ::sys::thread::Lock_obj::__alloc( HX_CTX );
	this->oneTimeEventsIdx = 0;
	this->oneTimeEvents = ::Array_obj< ::Dynamic>::__new();
	this->mutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
	this->isMainThread = !(::sys::thread::EventLoop_obj::CREATED);
	::sys::thread::EventLoop_obj::CREATED = true;
}

Dynamic EventLoop_obj::__CreateEmpty() { return new EventLoop_obj; }

void *EventLoop_obj::_hx_vtable = 0;

Dynamic EventLoop_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EventLoop_obj > _hx_result = new EventLoop_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EventLoop_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6a581147;
}

 ::sys::thread::_EventLoop::RegularEvent EventLoop_obj::repeat( ::Dynamic event,int intervalMs){
            	HX_JUST_GC_STACKFRAME
	this->mutex->acquire();
	Float interval = (((Float)0.001) * ( (Float)(intervalMs) ));
	 ::sys::thread::_EventLoop::RegularEvent event1 =  ::sys::thread::_EventLoop::RegularEvent_obj::__alloc( HX_CTX ,event,(::Sys_obj::time() + interval),interval);
	{
		 ::sys::thread::_EventLoop::RegularEvent _g = this->regularEvents;
		if (::hx::IsNull( _g )) {
			this->regularEvents = event1;
		}
		else {
			 ::sys::thread::_EventLoop::RegularEvent current = _g;
			{
				 ::sys::thread::_EventLoop::RegularEvent previous = null();
				while(true){
					if (::hx::IsNull( current )) {
						previous->next = event1;
						event1->previous = previous;
						goto _hx_goto_0;
					}
					else {
						if ((event1->nextRunTime < current->nextRunTime)) {
							event1->next = current;
							current->previous = event1;
							if (::hx::IsNull( previous )) {
								this->regularEvents = event1;
							}
							else {
								event1->previous = previous;
								previous->next = event1;
								current->previous = event1;
							}
							goto _hx_goto_0;
						}
						else {
							previous = current;
							current = current->next;
						}
					}
				}
				_hx_goto_0:;
			}
		}
	}
	this->waitLock->release();
	this->mutex->release();
	return event1;
}


HX_DEFINE_DYNAMIC_FUNC2(EventLoop_obj,repeat,return )

void EventLoop_obj::insertEventByTime( ::sys::thread::_EventLoop::RegularEvent event){
	 ::sys::thread::_EventLoop::RegularEvent _g = this->regularEvents;
	if (::hx::IsNull( _g )) {
		this->regularEvents = event;
	}
	else {
		 ::sys::thread::_EventLoop::RegularEvent current = _g;
		{
			 ::sys::thread::_EventLoop::RegularEvent previous = null();
			while(true){
				if (::hx::IsNull( current )) {
					previous->next = event;
					event->previous = previous;
					goto _hx_goto_1;
				}
				else {
					if ((event->nextRunTime < current->nextRunTime)) {
						event->next = current;
						current->previous = event;
						if (::hx::IsNull( previous )) {
							this->regularEvents = event;
						}
						else {
							event->previous = previous;
							previous->next = event;
							current->previous = event;
						}
						goto _hx_goto_1;
					}
					else {
						previous = current;
						current = current->next;
					}
				}
			}
			_hx_goto_1:;
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC1(EventLoop_obj,insertEventByTime,(void))

void EventLoop_obj::cancel( ::sys::thread::_EventLoop::RegularEvent eventHandler){
	this->mutex->acquire();
	 ::sys::thread::_EventLoop::RegularEvent event = eventHandler;
	event->cancelled = true;
	if (::hx::IsInstanceEq( this->regularEvents,event )) {
		this->regularEvents = event->next;
	}
	{
		 ::sys::thread::_EventLoop::RegularEvent _g = event->next;
		if (::hx::IsNotNull( _g )) {
			_g->previous = event->previous;
		}
	}
	{
		 ::sys::thread::_EventLoop::RegularEvent _g1 = event->previous;
		if (::hx::IsNotNull( _g1 )) {
			_g1->next = event->next;
		}
	}
	event->next = (event->previous = null());
	this->mutex->release();
}


HX_DEFINE_DYNAMIC_FUNC1(EventLoop_obj,cancel,(void))

void EventLoop_obj::promise(){
	this->mutex->acquire();
	++this->promisedEventsCount;
	this->mutex->release();
}


HX_DEFINE_DYNAMIC_FUNC0(EventLoop_obj,promise,(void))

void EventLoop_obj::run( ::Dynamic event){
	this->mutex->acquire();
	this->oneTimeEvents[this->oneTimeEventsIdx++] = event;
	this->waitLock->release();
	this->mutex->release();
}


HX_DEFINE_DYNAMIC_FUNC1(EventLoop_obj,run,(void))

void EventLoop_obj::runPromised( ::Dynamic event){
	this->mutex->acquire();
	this->oneTimeEvents[this->oneTimeEventsIdx++] = event;
	--this->promisedEventsCount;
	this->waitLock->release();
	this->mutex->release();
}


HX_DEFINE_DYNAMIC_FUNC1(EventLoop_obj,runPromised,(void))

 ::sys::thread::NextEventTime EventLoop_obj::progress(){
	Float now = ::Sys_obj::time();
	::Array< ::Dynamic> regularsToRun = ::Array_obj< ::Dynamic>::__new(0);
	int eventsToRunIdx = 0;
	Float nextEventAt = ( (Float)(-1) );
	this->mutex->acquire();
	while(this->waitLock->wait(((Float)0.0))){
	}
	 ::sys::thread::_EventLoop::RegularEvent current = this->regularEvents;
	while(::hx::IsNotNull( current )){
		if ((current->nextRunTime <= now)) {
			eventsToRunIdx = (eventsToRunIdx + 1);
			regularsToRun[(eventsToRunIdx - 1)] = current;
			 ::sys::thread::_EventLoop::RegularEvent current1 = current;
			current1->nextRunTime = (current1->nextRunTime + current->interval);
			nextEventAt = ( (Float)(-2) );
		}
		else {
			bool _hx_tmp;
			if ((nextEventAt != -1)) {
				_hx_tmp = (current->nextRunTime < nextEventAt);
			}
			else {
				_hx_tmp = true;
			}
			if (_hx_tmp) {
				nextEventAt = current->nextRunTime;
			}
		}
		current = current->next;
	}
	this->mutex->release();
	int _g = 0;
	int _g1 = eventsToRunIdx;
	while((_g < _g1)){
		_g = (_g + 1);
		int i = (_g - 1);
		if (!(regularsToRun->__get(i).StaticCast<  ::sys::thread::_EventLoop::RegularEvent >()->cancelled)) {
			regularsToRun->__get(i).StaticCast<  ::sys::thread::_EventLoop::RegularEvent >()->run();
		}
		regularsToRun[i] = null();
	}
	eventsToRunIdx = 0;
	::Array< ::Dynamic> oneTimersToRun = ::Array_obj< ::Dynamic>::__new(0);
	this->mutex->acquire();
	::Array< ::Dynamic> _this = this->oneTimeEvents;
	int _g_current = 0;
	while((_g_current < _this->length)){
		 ::Dynamic _g_value = _this->__get(_g_current);
		_g_current = (_g_current + 1);
		if (::hx::IsNull( _g_value )) {
			goto _hx_goto_5;
		}
		else {
			eventsToRunIdx = (eventsToRunIdx + 1);
			oneTimersToRun[(eventsToRunIdx - 1)] = _g_value;
			this->oneTimeEvents[(_g_current - 1)] = null();
		}
	}
	_hx_goto_5:;
	this->oneTimeEventsIdx = 0;
	bool hasPromisedEvents = (this->promisedEventsCount > 0);
	this->mutex->release();
	int _g2 = 0;
	int _g3 = eventsToRunIdx;
	while((_g2 < _g3)){
		_g2 = (_g2 + 1);
		int i1 = (_g2 - 1);
		oneTimersToRun->__get(i1)();
		oneTimersToRun[i1] = null();
	}
	if (this->isMainThread) {
		Float next = ::haxe::MainLoop_obj::tick();
		if (::haxe::MainLoop_obj::hasEvents()) {
			eventsToRunIdx = (eventsToRunIdx + 1);
			if ((nextEventAt > next)) {
				nextEventAt = next;
			}
		}
	}
	if ((eventsToRunIdx > 0)) {
		nextEventAt = ( (Float)(-2) );
	}
	Float _g_nextEventAt = nextEventAt;
	Float _hx_switch_0 = _g_nextEventAt;
	if (  (_hx_switch_0==( (Float)(-2) )) ){
		return ::sys::thread::NextEventTime_obj::Now_dyn();
		goto _hx_goto_7;
	}
	if (  (_hx_switch_0==( (Float)(-1) )) ){
		if (hasPromisedEvents) {
			return ::sys::thread::NextEventTime_obj::AnyTime(null());
		}
		else {
			return ::sys::thread::NextEventTime_obj::Never_dyn();
		}
		goto _hx_goto_7;
	}
	/* default */{
		if (hasPromisedEvents) {
			return ::sys::thread::NextEventTime_obj::AnyTime(_g_nextEventAt);
		}
		else {
			return ::sys::thread::NextEventTime_obj::At(_g_nextEventAt);
		}
	}
	_hx_goto_7:;
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(EventLoop_obj,progress,return )

bool EventLoop_obj::wait( ::Dynamic timeout){
	return this->waitLock->wait(timeout);
}


HX_DEFINE_DYNAMIC_FUNC1(EventLoop_obj,wait,return )

void EventLoop_obj::loop(){
	::Array< ::Dynamic> recycleRegular = ::Array_obj< ::Dynamic>::__new(0);
	::Array< ::Dynamic> recycleOneTimers = ::Array_obj< ::Dynamic>::__new(0);
	while(true){
		Float now = ::Sys_obj::time();
		int eventsToRunIdx = 0;
		Float nextEventAt = ( (Float)(-1) );
		this->mutex->acquire();
		while(this->waitLock->wait(((Float)0.0))){
		}
		 ::sys::thread::_EventLoop::RegularEvent current = this->regularEvents;
		while(::hx::IsNotNull( current )){
			if ((current->nextRunTime <= now)) {
				eventsToRunIdx = (eventsToRunIdx + 1);
				recycleRegular[(eventsToRunIdx - 1)] = current;
				 ::sys::thread::_EventLoop::RegularEvent current1 = current;
				current1->nextRunTime = (current1->nextRunTime + current->interval);
				nextEventAt = ( (Float)(-2) );
			}
			else {
				bool _hx_tmp;
				if ((nextEventAt != -1)) {
					_hx_tmp = (current->nextRunTime < nextEventAt);
				}
				else {
					_hx_tmp = true;
				}
				if (_hx_tmp) {
					nextEventAt = current->nextRunTime;
				}
			}
			current = current->next;
		}
		this->mutex->release();
		int _g = 0;
		int _g1 = eventsToRunIdx;
		while((_g < _g1)){
			_g = (_g + 1);
			int i = (_g - 1);
			if (!(recycleRegular->__get(i).StaticCast<  ::sys::thread::_EventLoop::RegularEvent >()->cancelled)) {
				recycleRegular->__get(i).StaticCast<  ::sys::thread::_EventLoop::RegularEvent >()->run();
			}
			recycleRegular[i] = null();
		}
		eventsToRunIdx = 0;
		this->mutex->acquire();
		::Array< ::Dynamic> _this = this->oneTimeEvents;
		int _g_current = 0;
		while((_g_current < _this->length)){
			 ::Dynamic _g_value = _this->__get(_g_current);
			_g_current = (_g_current + 1);
			if (::hx::IsNull( _g_value )) {
				goto _hx_goto_12;
			}
			else {
				eventsToRunIdx = (eventsToRunIdx + 1);
				recycleOneTimers[(eventsToRunIdx - 1)] = _g_value;
				this->oneTimeEvents[(_g_current - 1)] = null();
			}
		}
		_hx_goto_12:;
		this->oneTimeEventsIdx = 0;
		bool hasPromisedEvents = (this->promisedEventsCount > 0);
		this->mutex->release();
		int _g2 = 0;
		int _g3 = eventsToRunIdx;
		while((_g2 < _g3)){
			_g2 = (_g2 + 1);
			int i1 = (_g2 - 1);
			recycleOneTimers->__get(i1)();
			recycleOneTimers[i1] = null();
		}
		if (this->isMainThread) {
			Float next = ::haxe::MainLoop_obj::tick();
			if (::haxe::MainLoop_obj::hasEvents()) {
				eventsToRunIdx = (eventsToRunIdx + 1);
				if ((nextEventAt > next)) {
					nextEventAt = next;
				}
			}
		}
		if ((eventsToRunIdx > 0)) {
			nextEventAt = ( (Float)(-2) );
		}
		Float r_nextEventAt = nextEventAt;
		Float _hx_switch_0 = r_nextEventAt;
		if (  (_hx_switch_0==( (Float)(-2) )) ){
			goto _hx_goto_14;
		}
		if (  (_hx_switch_0==( (Float)(-1) )) ){
			if (hasPromisedEvents) {
				this->waitLock->wait(null());
			}
			else {
				goto _hx_goto_8;
			}
			goto _hx_goto_14;
		}
		/* default */{
			Float timeout = (r_nextEventAt - ::Sys_obj::time());
			this->waitLock->wait(::Math_obj::max(( (Float)(0) ),timeout));
		}
		_hx_goto_14:;
	}
	_hx_goto_8:;
}


HX_DEFINE_DYNAMIC_FUNC0(EventLoop_obj,loop,(void))

 ::Dynamic EventLoop_obj::_hx___progress(Float now,::Array< ::Dynamic> recycleRegular,::Array< ::Dynamic> recycleOneTimers){
	int eventsToRunIdx = 0;
	Float nextEventAt = ( (Float)(-1) );
	this->mutex->acquire();
	while(this->waitLock->wait(((Float)0.0))){
	}
	 ::sys::thread::_EventLoop::RegularEvent current = this->regularEvents;
	while(::hx::IsNotNull( current )){
		if ((current->nextRunTime <= now)) {
			eventsToRunIdx = (eventsToRunIdx + 1);
			recycleRegular[(eventsToRunIdx - 1)] = current;
			 ::sys::thread::_EventLoop::RegularEvent current1 = current;
			current1->nextRunTime = (current1->nextRunTime + current->interval);
			nextEventAt = ( (Float)(-2) );
		}
		else {
			bool _hx_tmp;
			if ((nextEventAt != -1)) {
				_hx_tmp = (current->nextRunTime < nextEventAt);
			}
			else {
				_hx_tmp = true;
			}
			if (_hx_tmp) {
				nextEventAt = current->nextRunTime;
			}
		}
		current = current->next;
	}
	this->mutex->release();
	{
		int _g = 0;
		int _g1 = eventsToRunIdx;
		while((_g < _g1)){
			_g = (_g + 1);
			int i = (_g - 1);
			if (!(recycleRegular->__get(i).StaticCast<  ::sys::thread::_EventLoop::RegularEvent >()->cancelled)) {
				recycleRegular->__get(i).StaticCast<  ::sys::thread::_EventLoop::RegularEvent >()->run();
			}
			recycleRegular[i] = null();
		}
	}
	eventsToRunIdx = 0;
	this->mutex->acquire();
	{
		::Array< ::Dynamic> _this = this->oneTimeEvents;
		int _g_current = 0;
		while((_g_current < _this->length)){
			 ::Dynamic _g_value = _this->__get(_g_current);
			_g_current = (_g_current + 1);
			if (::hx::IsNull( _g_value )) {
				goto _hx_goto_18;
			}
			else {
				eventsToRunIdx = (eventsToRunIdx + 1);
				recycleOneTimers[(eventsToRunIdx - 1)] = _g_value;
				this->oneTimeEvents[(_g_current - 1)] = null();
			}
		}
		_hx_goto_18:;
	}
	this->oneTimeEventsIdx = 0;
	bool hasPromisedEvents = (this->promisedEventsCount > 0);
	this->mutex->release();
	{
		int _g2 = 0;
		int _g3 = eventsToRunIdx;
		while((_g2 < _g3)){
			_g2 = (_g2 + 1);
			int i1 = (_g2 - 1);
			recycleOneTimers->__get(i1)();
			recycleOneTimers[i1] = null();
		}
	}
	if (this->isMainThread) {
		Float next = ::haxe::MainLoop_obj::tick();
		if (::haxe::MainLoop_obj::hasEvents()) {
			eventsToRunIdx = (eventsToRunIdx + 1);
			if ((nextEventAt > next)) {
				nextEventAt = next;
			}
		}
	}
	if ((eventsToRunIdx > 0)) {
		nextEventAt = ( (Float)(-2) );
	}
	return  ::Dynamic(::hx::Anon_obj::Create(2)
		->setFixed(0,HX_("anyTime",19,d9,35,a0),hasPromisedEvents)
		->setFixed(1,HX_("nextEventAt",fa,32,e4,dc),nextEventAt));
}


HX_DEFINE_DYNAMIC_FUNC3(EventLoop_obj,_hx___progress,return )

bool EventLoop_obj::CREATED;


::hx::ObjectPtr< EventLoop_obj > EventLoop_obj::__new() {
	::hx::ObjectPtr< EventLoop_obj > __this = new EventLoop_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< EventLoop_obj > EventLoop_obj::__alloc(::hx::Ctx *_hx_ctx) {
	EventLoop_obj *__this = (EventLoop_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EventLoop_obj), true, "sys.thread.EventLoop"));
	*(void **)__this = EventLoop_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EventLoop_obj::EventLoop_obj()
{
}

void EventLoop_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EventLoop);
	HX_MARK_MEMBER_NAME(mutex,"mutex");
	HX_MARK_MEMBER_NAME(oneTimeEvents,"oneTimeEvents");
	HX_MARK_MEMBER_NAME(oneTimeEventsIdx,"oneTimeEventsIdx");
	HX_MARK_MEMBER_NAME(waitLock,"waitLock");
	HX_MARK_MEMBER_NAME(promisedEventsCount,"promisedEventsCount");
	HX_MARK_MEMBER_NAME(regularEvents,"regularEvents");
	HX_MARK_MEMBER_NAME(isMainThread,"isMainThread");
	HX_MARK_END_CLASS();
}

void EventLoop_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mutex,"mutex");
	HX_VISIT_MEMBER_NAME(oneTimeEvents,"oneTimeEvents");
	HX_VISIT_MEMBER_NAME(oneTimeEventsIdx,"oneTimeEventsIdx");
	HX_VISIT_MEMBER_NAME(waitLock,"waitLock");
	HX_VISIT_MEMBER_NAME(promisedEventsCount,"promisedEventsCount");
	HX_VISIT_MEMBER_NAME(regularEvents,"regularEvents");
	HX_VISIT_MEMBER_NAME(isMainThread,"isMainThread");
}

::hx::Val EventLoop_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"wait") ) { return ::hx::Val( wait_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return ::hx::Val( loop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mutex") ) { return ::hx::Val( mutex ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { return ::hx::Val( repeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { return ::hx::Val( promise_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waitLock") ) { return ::hx::Val( waitLock ); }
		if (HX_FIELD_EQ(inName,"progress") ) { return ::hx::Val( progress_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__progress") ) { return ::hx::Val( _hx___progress_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"runPromised") ) { return ::hx::Val( runPromised_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isMainThread") ) { return ::hx::Val( isMainThread ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"oneTimeEvents") ) { return ::hx::Val( oneTimeEvents ); }
		if (HX_FIELD_EQ(inName,"regularEvents") ) { return ::hx::Val( regularEvents ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"oneTimeEventsIdx") ) { return ::hx::Val( oneTimeEventsIdx ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"insertEventByTime") ) { return ::hx::Val( insertEventByTime_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"promisedEventsCount") ) { return ::hx::Val( promisedEventsCount ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EventLoop_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"CREATED") ) { outValue = ( CREATED ); return true; }
	}
	return false;
}

::hx::Val EventLoop_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"mutex") ) { mutex=inValue.Cast<  ::sys::thread::Mutex >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waitLock") ) { waitLock=inValue.Cast<  ::sys::thread::Lock >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isMainThread") ) { isMainThread=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"oneTimeEvents") ) { oneTimeEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"regularEvents") ) { regularEvents=inValue.Cast<  ::sys::thread::_EventLoop::RegularEvent >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"oneTimeEventsIdx") ) { oneTimeEventsIdx=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"promisedEventsCount") ) { promisedEventsCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool EventLoop_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"CREATED") ) { CREATED=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void EventLoop_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mutex",7f,8f,5b,10));
	outFields->push(HX_("oneTimeEvents",0c,71,5c,81));
	outFields->push(HX_("oneTimeEventsIdx",91,7a,66,79));
	outFields->push(HX_("waitLock",00,01,9a,50));
	outFields->push(HX_("promisedEventsCount",0d,bf,c2,9b));
	outFields->push(HX_("regularEvents",95,42,47,b5));
	outFields->push(HX_("isMainThread",6d,c0,84,b6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EventLoop_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(int)offsetof(EventLoop_obj,mutex),HX_("mutex",7f,8f,5b,10)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventLoop_obj,oneTimeEvents),HX_("oneTimeEvents",0c,71,5c,81)},
	{::hx::fsInt,(int)offsetof(EventLoop_obj,oneTimeEventsIdx),HX_("oneTimeEventsIdx",91,7a,66,79)},
	{::hx::fsObject /*  ::sys::thread::Lock */ ,(int)offsetof(EventLoop_obj,waitLock),HX_("waitLock",00,01,9a,50)},
	{::hx::fsInt,(int)offsetof(EventLoop_obj,promisedEventsCount),HX_("promisedEventsCount",0d,bf,c2,9b)},
	{::hx::fsObject /*  ::sys::thread::_EventLoop::RegularEvent */ ,(int)offsetof(EventLoop_obj,regularEvents),HX_("regularEvents",95,42,47,b5)},
	{::hx::fsBool,(int)offsetof(EventLoop_obj,isMainThread),HX_("isMainThread",6d,c0,84,b6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo EventLoop_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &EventLoop_obj::CREATED,HX_("CREATED",c8,89,3e,91)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String EventLoop_obj_sMemberFields[] = {
	HX_("mutex",7f,8f,5b,10),
	HX_("oneTimeEvents",0c,71,5c,81),
	HX_("oneTimeEventsIdx",91,7a,66,79),
	HX_("waitLock",00,01,9a,50),
	HX_("promisedEventsCount",0d,bf,c2,9b),
	HX_("regularEvents",95,42,47,b5),
	HX_("isMainThread",6d,c0,84,b6),
	HX_("repeat",5b,97,7c,06),
	HX_("insertEventByTime",85,6e,5e,2c),
	HX_("cancel",7a,ed,33,b8),
	HX_("promise",9b,cd,e9,f7),
	HX_("run",4b,e7,56,00),
	HX_("runPromised",d4,80,2b,b7),
	HX_("progress",ad,f7,2a,86),
	HX_("wait",75,5a,f2,4e),
	HX_("loop",64,a6,b7,47),
	HX_("__progress",cd,6a,63,29),
	::String(null()) };

static void EventLoop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EventLoop_obj::CREATED,"CREATED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EventLoop_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EventLoop_obj::CREATED,"CREATED");
};

#endif

::hx::Class EventLoop_obj::__mClass;

static ::String EventLoop_obj_sStaticFields[] = {
	HX_("CREATED",c8,89,3e,91),
	::String(null())
};

void EventLoop_obj::__register()
{
	EventLoop_obj _hx_dummy;
	EventLoop_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.thread.EventLoop",5b,45,a8,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EventLoop_obj::__GetStatic;
	__mClass->mSetStaticField = &EventLoop_obj::__SetStatic;
	__mClass->mMarkFunc = EventLoop_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EventLoop_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EventLoop_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EventLoop_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EventLoop_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EventLoop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EventLoop_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace thread
