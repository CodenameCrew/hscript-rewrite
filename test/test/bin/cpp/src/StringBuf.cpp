// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif


void StringBuf_obj::__construct(){
}

Dynamic StringBuf_obj::__CreateEmpty() { return new StringBuf_obj; }

void *StringBuf_obj::_hx_vtable = 0;

Dynamic StringBuf_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringBuf_obj > _hx_result = new StringBuf_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StringBuf_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2cc74002;
}

::String StringBuf_obj::charBufAsString(){
	int len = this->charBuf->length;
	this->charBuf->push(0);
	::cpp::Pointer< char > inPtr = ( (::cpp::Pointer< char >)(::cpp::Pointer_obj::arrayElem(this->charBuf,0)) );
	return  ::String(inPtr->ptr,len);
}


HX_DEFINE_DYNAMIC_FUNC0(StringBuf_obj,charBufAsString,return )

void StringBuf_obj::flush(){
	if (::hx::IsNull( this->b )) {
		this->b = ::Array_obj< ::String >::__new(1)->init(0,this->charBufAsString());
	}
	else {
		::Array< ::String > _hx_tmp = this->b;
		_hx_tmp->push(this->charBufAsString());
	}
	this->charBuf = null();
}


HX_DEFINE_DYNAMIC_FUNC0(StringBuf_obj,flush,(void))

int StringBuf_obj::get_length(){
	int len = 0;
	if (::hx::IsNotNull( this->charBuf )) {
		len = this->charBuf->length;
	}
	if (::hx::IsNotNull( this->b )) {
		int _g = 0;
		::Array< ::String > _g1 = this->b;
		while((_g < _g1->length)){
			::String s = _g1->__get(_g);
			_g = (_g + 1);
			int len1;
			if (::hx::IsNull( s )) {
				len1 = 4;
			}
			else {
				len1 = s.length;
			}
			len = (len + len1);
		}
	}
	return len;
}


HX_DEFINE_DYNAMIC_FUNC0(StringBuf_obj,get_length,return )

void StringBuf_obj::add( ::Dynamic x){
	if (::hx::IsNotNull( this->charBuf )) {
		this->flush();
	}
	if (::hx::IsNull( this->b )) {
		this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
	}
	else {
		::Array< ::String > _hx_tmp = this->b;
		_hx_tmp->push(::Std_obj::string(x));
	}
}


HX_DEFINE_DYNAMIC_FUNC1(StringBuf_obj,add,(void))

void StringBuf_obj::addSub(::String s,int pos, ::Dynamic len){
	if (::hx::IsNotNull( this->charBuf )) {
		this->flush();
	}
	if (::hx::IsNull( this->b )) {
		this->b = ::Array_obj< ::String >::__new(1)->init(0,s.substr(pos,len));
	}
	else {
		::Array< ::String > _hx_tmp = this->b;
		_hx_tmp->push(s.substr(pos,len));
	}
}


HX_DEFINE_DYNAMIC_FUNC3(StringBuf_obj,addSub,(void))

void StringBuf_obj::addChar(int c){
	if ((c >= 127)) {
		::String x = ::String::fromCharCode(c);
		if (::hx::IsNotNull( this->charBuf )) {
			this->flush();
		}
		if (::hx::IsNull( this->b )) {
			this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
		}
		else {
			::Array< ::String > _hx_tmp = this->b;
			_hx_tmp->push(::Std_obj::string(x));
		}
	}
	else {
		if (::hx::IsNull( this->charBuf )) {
			this->charBuf = ::Array_obj< char >::__new();
		}
		this->charBuf->push(c);
	}
}


HX_DEFINE_DYNAMIC_FUNC1(StringBuf_obj,addChar,(void))

::String StringBuf_obj::toString(){
	if (::hx::IsNotNull( this->charBuf )) {
		this->flush();
	}
	bool _hx_tmp;
	if (::hx::IsNotNull( this->b )) {
		_hx_tmp = (this->b->length == 0);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		return HX_("",00,00,00,00);
	}
	if ((this->b->length == 1)) {
		return this->b->__get(0);
	}
	return this->b->join(HX_("",00,00,00,00));
}


HX_DEFINE_DYNAMIC_FUNC0(StringBuf_obj,toString,return )


::hx::ObjectPtr< StringBuf_obj > StringBuf_obj::__new() {
	::hx::ObjectPtr< StringBuf_obj > __this = new StringBuf_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< StringBuf_obj > StringBuf_obj::__alloc(::hx::Ctx *_hx_ctx) {
	StringBuf_obj *__this = (StringBuf_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StringBuf_obj), true, "StringBuf"));
	*(void **)__this = StringBuf_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StringBuf_obj::StringBuf_obj()
{
}

void StringBuf_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringBuf);
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(charBuf,"charBuf");
	HX_MARK_END_CLASS();
}

void StringBuf_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(charBuf,"charBuf");
}

::hx::Val StringBuf_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return ::hx::Val( b ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { return ::hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"addSub") ) { return ::hx::Val( addSub_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charBuf") ) { return ::hx::Val( charBuf ); }
		if (HX_FIELD_EQ(inName,"addChar") ) { return ::hx::Val( addChar_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charBufAsString") ) { return ::hx::Val( charBufAsString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StringBuf_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charBuf") ) { charBuf=inValue.Cast< ::Array< char > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringBuf_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("charBuf",fd,85,55,cf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StringBuf_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(StringBuf_obj,b),HX_("b",62,00,00,00)},
	{::hx::fsObject /* ::Array< char > */ ,(int)offsetof(StringBuf_obj,charBuf),HX_("charBuf",fd,85,55,cf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StringBuf_obj_sStaticStorageInfo = 0;
#endif

static ::String StringBuf_obj_sMemberFields[] = {
	HX_("b",62,00,00,00),
	HX_("charBuf",fd,85,55,cf),
	HX_("charBufAsString",80,3a,2f,0a),
	HX_("flush",c4,62,9b,02),
	HX_("get_length",af,04,8f,8f),
	HX_("add",21,f2,49,00),
	HX_("addSub",df,b9,08,9f),
	HX_("addChar",97,a1,fc,7d),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class StringBuf_obj::__mClass;

void StringBuf_obj::__register()
{
	StringBuf_obj _hx_dummy;
	StringBuf_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StringBuf",c2,ca,83,69);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StringBuf_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StringBuf_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringBuf_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringBuf_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

