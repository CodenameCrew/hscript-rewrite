// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_TreeNode
#include <haxe/ds/TreeNode.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif

namespace haxe{
namespace ds{

void BalancedTree_obj::__construct(){
}

Dynamic BalancedTree_obj::__CreateEmpty() { return new BalancedTree_obj; }

void *BalancedTree_obj::_hx_vtable = 0;

Dynamic BalancedTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BalancedTree_obj > _hx_result = new BalancedTree_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BalancedTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4cc9cf7f;
}

static ::haxe::IMap_obj _hx_haxe_ds_BalancedTree__hx_haxe_IMap= {
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::haxe::ds::BalancedTree_obj::get,
	( void (::hx::Object::*)( ::Dynamic, ::Dynamic))&::haxe::ds::BalancedTree_obj::set_dca24b06,
	( bool (::hx::Object::*)( ::Dynamic))&::haxe::ds::BalancedTree_obj::exists,
	( bool (::hx::Object::*)( ::Dynamic))&::haxe::ds::BalancedTree_obj::remove,
	(  ::Dynamic (::hx::Object::*)())&::haxe::ds::BalancedTree_obj::keys,
	(  ::Dynamic (::hx::Object::*)())&::haxe::ds::BalancedTree_obj::iterator,
	(  ::Dynamic (::hx::Object::*)())&::haxe::ds::BalancedTree_obj::keyValueIterator,
	( ::Dynamic (::hx::Object::*)())&::haxe::ds::BalancedTree_obj::copy_ee952b4b,
	( ::String (::hx::Object::*)())&::haxe::ds::BalancedTree_obj::toString,
	( void (::hx::Object::*)())&::haxe::ds::BalancedTree_obj::clear,
};

::Dynamic BalancedTree_obj::copy_ee952b4b() {
			return copy();
}

void BalancedTree_obj::set_dca24b06( ::Dynamic k, ::Dynamic v) {
			set(k,v);
}
void *BalancedTree_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x09c2bd39: return &_hx_haxe_ds_BalancedTree__hx_haxe_IMap;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BalancedTree_obj::set( ::Dynamic key, ::Dynamic value){
	this->root = this->setLoop(key,value,this->root);
}


HX_DEFINE_DYNAMIC_FUNC2(BalancedTree_obj,set,(void))

 ::Dynamic BalancedTree_obj::get( ::Dynamic key){
	 ::haxe::ds::TreeNode node = this->root;
	while(::hx::IsNotNull( node )){
		int c = this->compare(key,node->key);
		if ((c == 0)) {
			return node->value;
		}
		if ((c < 0)) {
			node = node->left;
		}
		else {
			node = node->right;
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(BalancedTree_obj,get,return )

bool BalancedTree_obj::remove( ::Dynamic key){
	try {
		HX_STACK_CATCHABLE(::String, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		this->root = this->removeLoop(key,this->root);
		return true;
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
			HX_STACK_BEGIN_CATCH
			::String e = _hx_e;
			return false;
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::String >())) {
				return false;
			}
			else {
				HX_STACK_DO_THROW(_g);
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(BalancedTree_obj,remove,return )

bool BalancedTree_obj::exists( ::Dynamic key){
	 ::haxe::ds::TreeNode node = this->root;
	while(::hx::IsNotNull( node )){
		int c = this->compare(key,node->key);
		if ((c == 0)) {
			return true;
		}
		else {
			if ((c < 0)) {
				node = node->left;
			}
			else {
				node = node->right;
			}
		}
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(BalancedTree_obj,exists,return )

 ::Dynamic BalancedTree_obj::iterator(){
            	HX_JUST_GC_STACKFRAME
	::cpp::VirtualArray ret = ::cpp::VirtualArray_obj::__new(0);
	::haxe::ds::BalancedTree_obj::iteratorLoop(this->root,ret);
	return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,ret);
}


HX_DEFINE_DYNAMIC_FUNC0(BalancedTree_obj,iterator,return )

 ::Dynamic BalancedTree_obj::keyValueIterator(){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
}


HX_DEFINE_DYNAMIC_FUNC0(BalancedTree_obj,keyValueIterator,return )

 ::Dynamic BalancedTree_obj::keys(){
            	HX_JUST_GC_STACKFRAME
	::cpp::VirtualArray ret = ::cpp::VirtualArray_obj::__new(0);
	this->keysLoop(this->root,ret);
	return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,ret);
}


HX_DEFINE_DYNAMIC_FUNC0(BalancedTree_obj,keys,return )

 ::haxe::ds::BalancedTree BalancedTree_obj::copy(){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::ds::BalancedTree copied =  ::haxe::ds::BalancedTree_obj::__alloc( HX_CTX );
	copied->root = this->root;
	return copied;
}


HX_DEFINE_DYNAMIC_FUNC0(BalancedTree_obj,copy,return )

 ::haxe::ds::TreeNode BalancedTree_obj::setLoop( ::Dynamic k, ::Dynamic v, ::haxe::ds::TreeNode node){
            	HX_JUST_GC_STACKFRAME
	if (::hx::IsNull( node )) {
		return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,null(),k,v,null(),null());
	}
	int c = this->compare(k,node->key);
	if ((c == 0)) {
		int _hx_tmp;
		if (::hx::IsNull( node )) {
			_hx_tmp = 0;
		}
		else {
			_hx_tmp = node->_height;
		}
		return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,node->left,k,v,node->right,_hx_tmp);
	}
	else {
		if ((c < 0)) {
			 ::haxe::ds::TreeNode nl = this->setLoop(k,v,node->left);
			return this->balance(nl,node->key,node->value,node->right);
		}
		else {
			 ::haxe::ds::TreeNode nr = this->setLoop(k,v,node->right);
			return this->balance(node->left,node->key,node->value,nr);
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC3(BalancedTree_obj,setLoop,return )

 ::haxe::ds::TreeNode BalancedTree_obj::removeLoop( ::Dynamic k, ::haxe::ds::TreeNode node){
	if (::hx::IsNull( node )) {
		HX_STACK_DO_THROW(HX_("Not_found",b6,92,a5,ea));
	}
	int c = this->compare(k,node->key);
	if ((c == 0)) {
		return this->merge(node->left,node->right);
	}
	else {
		if ((c < 0)) {
			 ::haxe::ds::TreeNode _hx_tmp = this->removeLoop(k,node->left);
			return this->balance(_hx_tmp,node->key,node->value,node->right);
		}
		else {
			 ::haxe::ds::TreeNode node1 = node->left;
			 ::Dynamic node2 = node->key;
			 ::Dynamic node3 = node->value;
			return this->balance(node1,node2,node3,this->removeLoop(k,node->right));
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC2(BalancedTree_obj,removeLoop,return )

void BalancedTree_obj::keysLoop( ::haxe::ds::TreeNode node,::cpp::VirtualArray acc){
	if (::hx::IsNotNull( node )) {
		this->keysLoop(node->left,acc);
		acc->push(node->key);
		this->keysLoop(node->right,acc);
	}
}


HX_DEFINE_DYNAMIC_FUNC2(BalancedTree_obj,keysLoop,(void))

 ::haxe::ds::TreeNode BalancedTree_obj::merge( ::haxe::ds::TreeNode t1, ::haxe::ds::TreeNode t2){
	if (::hx::IsNull( t1 )) {
		return t2;
	}
	if (::hx::IsNull( t2 )) {
		return t1;
	}
	 ::haxe::ds::TreeNode t = this->minBinding(t2);
	 ::Dynamic t3 = t->key;
	 ::Dynamic t4 = t->value;
	return this->balance(t1,t3,t4,this->removeMinBinding(t2));
}


HX_DEFINE_DYNAMIC_FUNC2(BalancedTree_obj,merge,return )

 ::haxe::ds::TreeNode BalancedTree_obj::minBinding( ::haxe::ds::TreeNode t){
	if (::hx::IsNull( t )) {
		HX_STACK_DO_THROW(HX_("Not_found",b6,92,a5,ea));
	}
	else {
		if (::hx::IsNull( t->left )) {
			return t;
		}
		else {
			return this->minBinding(t->left);
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(BalancedTree_obj,minBinding,return )

 ::haxe::ds::TreeNode BalancedTree_obj::removeMinBinding( ::haxe::ds::TreeNode t){
	if (::hx::IsNull( t->left )) {
		return t->right;
	}
	else {
		 ::haxe::ds::TreeNode _hx_tmp = this->removeMinBinding(t->left);
		return this->balance(_hx_tmp,t->key,t->value,t->right);
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(BalancedTree_obj,removeMinBinding,return )

 ::haxe::ds::TreeNode BalancedTree_obj::balance( ::haxe::ds::TreeNode l, ::Dynamic k, ::Dynamic v, ::haxe::ds::TreeNode r){
            	HX_JUST_GC_STACKFRAME
	int hl;
	if (::hx::IsNull( l )) {
		hl = 0;
	}
	else {
		hl = l->_height;
	}
	int hr;
	if (::hx::IsNull( r )) {
		hr = 0;
	}
	else {
		hr = r->_height;
	}
	if ((hl > (hr + 2))) {
		 ::haxe::ds::TreeNode _this = l->left;
		int _hx_tmp;
		if (::hx::IsNull( _this )) {
			_hx_tmp = 0;
		}
		else {
			_hx_tmp = _this->_height;
		}
		 ::haxe::ds::TreeNode _this1 = l->right;
		int _hx_tmp1;
		if (::hx::IsNull( _this1 )) {
			_hx_tmp1 = 0;
		}
		else {
			_hx_tmp1 = _this1->_height;
		}
		if ((_hx_tmp >= _hx_tmp1)) {
			return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l->left,l->key,l->value, ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l->right,k,v,r,null()),null());
		}
		else {
			return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX , ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l->left,l->key,l->value,l->right->left,null()),l->right->key,l->right->value, ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l->right->right,k,v,r,null()),null());
		}
	}
	else {
		if ((hr > (hl + 2))) {
			 ::haxe::ds::TreeNode _this2 = r->right;
			int _hx_tmp2;
			if (::hx::IsNull( _this2 )) {
				_hx_tmp2 = 0;
			}
			else {
				_hx_tmp2 = _this2->_height;
			}
			 ::haxe::ds::TreeNode _this3 = r->left;
			int _hx_tmp3;
			if (::hx::IsNull( _this3 )) {
				_hx_tmp3 = 0;
			}
			else {
				_hx_tmp3 = _this3->_height;
			}
			if ((_hx_tmp2 > _hx_tmp3)) {
				return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX , ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l,k,v,r->left,null()),r->key,r->value,r->right,null());
			}
			else {
				return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX , ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l,k,v,r->left->left,null()),r->left->key,r->left->value, ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,r->left->right,r->key,r->value,r->right,null()),null());
			}
		}
		else {
			int _hx_tmp4;
			if ((hl > hr)) {
				_hx_tmp4 = hl;
			}
			else {
				_hx_tmp4 = hr;
			}
			return  ::haxe::ds::TreeNode_obj::__alloc( HX_CTX ,l,k,v,r,(_hx_tmp4 + 1));
		}
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC4(BalancedTree_obj,balance,return )

int BalancedTree_obj::compare( ::Dynamic k1, ::Dynamic k2){
	return ::Reflect_obj::compare(k1,k2);
}


HX_DEFINE_DYNAMIC_FUNC2(BalancedTree_obj,compare,return )

::String BalancedTree_obj::toString(){
	if (::hx::IsNull( this->root )) {
		return HX_("[]",a2,4f,00,00);
	}
	else {
		return ((HX_("[",5b,00,00,00) + this->root->toString()) + HX_("]",5d,00,00,00));
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(BalancedTree_obj,toString,return )

void BalancedTree_obj::clear(){
	this->root = null();
}


HX_DEFINE_DYNAMIC_FUNC0(BalancedTree_obj,clear,(void))

void BalancedTree_obj::iteratorLoop( ::haxe::ds::TreeNode node,::cpp::VirtualArray acc){
	while(true){
		if (::hx::IsNotNull( node )) {
			::haxe::ds::BalancedTree_obj::iteratorLoop(node->left,acc);
			acc->push(node->value);
			node = node->right;
			continue;
		}
		return;
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BalancedTree_obj,iteratorLoop,(void))


::hx::ObjectPtr< BalancedTree_obj > BalancedTree_obj::__new() {
	::hx::ObjectPtr< BalancedTree_obj > __this = new BalancedTree_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BalancedTree_obj > BalancedTree_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BalancedTree_obj *__this = (BalancedTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BalancedTree_obj), true, "haxe.ds.BalancedTree"));
	*(void **)__this = BalancedTree_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BalancedTree_obj::BalancedTree_obj()
{
}

void BalancedTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BalancedTree);
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_END_CLASS();
}

void BalancedTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
}

::hx::Val BalancedTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return ::hx::Val( root ); }
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { return ::hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setLoop") ) { return ::hx::Val( setLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"balance") ) { return ::hx::Val( balance_dyn() ); }
		if (HX_FIELD_EQ(inName,"compare") ) { return ::hx::Val( compare_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"keysLoop") ) { return ::hx::Val( keysLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeLoop") ) { return ::hx::Val( removeLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"minBinding") ) { return ::hx::Val( minBinding_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { return ::hx::Val( keyValueIterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeMinBinding") ) { return ::hx::Val( removeMinBinding_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BalancedTree_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"iteratorLoop") ) { outValue = iteratorLoop_dyn(); return true; }
	}
	return false;
}

::hx::Val BalancedTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::haxe::ds::TreeNode >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BalancedTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("root",22,ee,ae,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BalancedTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::TreeNode */ ,(int)offsetof(BalancedTree_obj,root),HX_("root",22,ee,ae,4b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BalancedTree_obj_sStaticStorageInfo = 0;
#endif

static ::String BalancedTree_obj_sMemberFields[] = {
	HX_("root",22,ee,ae,4b),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("remove",44,9c,88,04),
	HX_("exists",dc,1d,e0,bf),
	HX_("iterator",ee,49,9a,93),
	HX_("keyValueIterator",60,cd,ee,4a),
	HX_("keys",f4,e1,06,47),
	HX_("copy",b5,bb,c4,41),
	HX_("setLoop",26,e7,3b,0d),
	HX_("removeLoop",c8,e0,d6,c4),
	HX_("keysLoop",78,be,e1,1a),
	HX_("merge",b8,a2,c6,05),
	HX_("minBinding",d3,d7,e4,44),
	HX_("removeMinBinding",37,f5,8d,fe),
	HX_("balance",1c,9d,8d,23),
	HX_("compare",a5,18,69,83),
	HX_("toString",ac,d0,6e,38),
	HX_("clear",8d,71,5b,48),
	::String(null()) };

::hx::Class BalancedTree_obj::__mClass;

static ::String BalancedTree_obj_sStaticFields[] = {
	HX_("iteratorLoop",72,ab,e1,e4),
	::String(null())
};

void BalancedTree_obj::__register()
{
	BalancedTree_obj _hx_dummy;
	BalancedTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ds.BalancedTree",5d,9d,3e,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BalancedTree_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BalancedTree_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BalancedTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BalancedTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BalancedTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BalancedTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
