// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_cpp_Int64Map
#include <cpp/Int64Map.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_ds__Map_Map_Impl_
#include <haxe/ds/_Map/Map_Impl_.h>
#endif

namespace haxe{
namespace ds{
namespace _Map{

void Map_Impl__obj::__construct() { }

Dynamic Map_Impl__obj::__CreateEmpty() { return new Map_Impl__obj; }

void *Map_Impl__obj::_hx_vtable = 0;

Dynamic Map_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Map_Impl__obj > _hx_result = new Map_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Map_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32801086;
}

void Map_Impl__obj::set(::Dynamic this1, ::Dynamic key, ::Dynamic value){
	::haxe::IMap_obj::set(this1,key,value);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Map_Impl__obj,set,(void))

 ::Dynamic Map_Impl__obj::get(::Dynamic this1, ::Dynamic key){
	return ::haxe::IMap_obj::get(this1,key);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Map_Impl__obj,get,return )

bool Map_Impl__obj::exists(::Dynamic this1, ::Dynamic key){
	return ::haxe::IMap_obj::exists(this1,key);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Map_Impl__obj,exists,return )

bool Map_Impl__obj::remove(::Dynamic this1, ::Dynamic key){
	return ::haxe::IMap_obj::remove(this1,key);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Map_Impl__obj,remove,return )

 ::Dynamic Map_Impl__obj::keys(::Dynamic this1){
	return ::haxe::IMap_obj::keys(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,keys,return )

 ::Dynamic Map_Impl__obj::iterator(::Dynamic this1){
	return ::haxe::IMap_obj::iterator(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,iterator,return )

 ::Dynamic Map_Impl__obj::keyValueIterator(::Dynamic this1){
	return ::haxe::IMap_obj::keyValueIterator(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,keyValueIterator,return )

::Dynamic Map_Impl__obj::copy(::Dynamic this1){
	return ::haxe::IMap_obj::copy(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,copy,return )

::String Map_Impl__obj::toString(::Dynamic this1){
	return ::haxe::IMap_obj::toString(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toString,return )

void Map_Impl__obj::clear(::Dynamic this1){
	::haxe::IMap_obj::clear(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,clear,(void))

 ::Dynamic Map_Impl__obj::arrayWrite(::Dynamic this1, ::Dynamic k, ::Dynamic v){
	::haxe::IMap_obj::set(this1,k,v);
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Map_Impl__obj,arrayWrite,return )

 ::haxe::ds::StringMap Map_Impl__obj::toStringMap(::Dynamic t){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toStringMap,return )

 ::haxe::ds::IntMap Map_Impl__obj::toIntMap(::Dynamic t){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toIntMap,return )

 ::cpp::Int64Map Map_Impl__obj::toInt64Map(::Dynamic t){
            	HX_JUST_GC_STACKFRAME
	return  ::cpp::Int64Map_obj::__alloc( HX_CTX );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toInt64Map,return )

 ::haxe::ds::EnumValueMap Map_Impl__obj::toEnumValueMapMap(::Dynamic t){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toEnumValueMapMap,return )

 ::haxe::ds::ObjectMap Map_Impl__obj::toObjectMap(::Dynamic t){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toObjectMap,return )

 ::haxe::ds::StringMap Map_Impl__obj::fromStringMap( ::haxe::ds::StringMap map){
	return map;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromStringMap,return )

 ::haxe::ds::IntMap Map_Impl__obj::fromIntMap( ::haxe::ds::IntMap map){
	return map;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromIntMap,return )

 ::cpp::Int64Map Map_Impl__obj::fromInt64Map( ::cpp::Int64Map map){
	return map;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromInt64Map,return )

 ::haxe::ds::ObjectMap Map_Impl__obj::fromObjectMap( ::haxe::ds::ObjectMap map){
	return map;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromObjectMap,return )


Map_Impl__obj::Map_Impl__obj()
{
}

bool Map_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = keys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toIntMap") ) { outValue = toIntMap_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"arrayWrite") ) { outValue = arrayWrite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt64Map") ) { outValue = toInt64Map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromIntMap") ) { outValue = fromIntMap_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toStringMap") ) { outValue = toStringMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toObjectMap") ) { outValue = toObjectMap_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromInt64Map") ) { outValue = fromInt64Map_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromStringMap") ) { outValue = fromStringMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromObjectMap") ) { outValue = fromObjectMap_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { outValue = keyValueIterator_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"toEnumValueMapMap") ) { outValue = toEnumValueMapMap_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Map_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Map_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Map_Impl__obj::__mClass;

static ::String Map_Impl__obj_sStaticFields[] = {
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("exists",dc,1d,e0,bf),
	HX_("remove",44,9c,88,04),
	HX_("keys",f4,e1,06,47),
	HX_("iterator",ee,49,9a,93),
	HX_("keyValueIterator",60,cd,ee,4a),
	HX_("copy",b5,bb,c4,41),
	HX_("toString",ac,d0,6e,38),
	HX_("clear",8d,71,5b,48),
	HX_("arrayWrite",86,84,86,ca),
	HX_("toStringMap",50,a5,9e,2e),
	HX_("toIntMap",c8,dc,b2,c5),
	HX_("toInt64Map",4a,73,a9,61),
	HX_("toEnumValueMapMap",f5,5e,8d,00),
	HX_("toObjectMap",22,38,63,aa),
	HX_("fromStringMap",81,6f,a2,3b),
	HX_("fromIntMap",f7,39,b8,e1),
	HX_("fromInt64Map",39,ba,a3,8f),
	HX_("fromObjectMap",53,02,67,b7),
	::String(null())
};

void Map_Impl__obj::__register()
{
	Map_Impl__obj _hx_dummy;
	Map_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ds._Map.Map_Impl_",a2,0b,3a,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Map_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Map_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Map_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Map_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Map_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
} // end namespace _Map
