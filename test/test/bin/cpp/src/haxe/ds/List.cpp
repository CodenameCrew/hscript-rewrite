// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListIterator
#include <haxe/ds/_List/ListIterator.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListKeyValueIterator
#include <haxe/ds/_List/ListKeyValueIterator.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif

static const ::String _hx_array_data_15aa2575_2[] = {
	HX_("{",7b,00,00,00),
};
static const ::String _hx_array_data_15aa2575_3[] = {
	HX_(", ",74,26,00,00),
};
static const ::String _hx_array_data_15aa2575_4[] = {
	HX_("}",7d,00,00,00),
};
namespace haxe{
namespace ds{

void List_obj::__construct(){
	this->length = 0;
}

Dynamic List_obj::__CreateEmpty() { return new List_obj; }

void *List_obj::_hx_vtable = 0;

Dynamic List_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< List_obj > _hx_result = new List_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool List_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x39a75d33;
}

void List_obj::add( ::Dynamic item){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::ds::_List::ListNode next = null();
	 ::haxe::ds::_List::ListNode x =  ::haxe::ds::_List::ListNode_obj::__alloc( HX_CTX ,item,next);
	if (::hx::IsNull( this->h )) {
		this->h = x;
	}
	else {
		this->q->next = x;
	}
	this->q = x;
	this->length++;
}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,add,(void))

void List_obj::push( ::Dynamic item){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::ds::_List::ListNode x =  ::haxe::ds::_List::ListNode_obj::__alloc( HX_CTX ,item,this->h);
	this->h = x;
	if (::hx::IsNull( this->q )) {
		this->q = x;
	}
	this->length++;
}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,push,(void))

 ::Dynamic List_obj::first(){
	if (::hx::IsNull( this->h )) {
		return null();
	}
	else {
		return this->h->item;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,first,return )

 ::Dynamic List_obj::last(){
	if (::hx::IsNull( this->q )) {
		return null();
	}
	else {
		return this->q->item;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,last,return )

 ::Dynamic List_obj::pop(){
	if (::hx::IsNull( this->h )) {
		return null();
	}
	 ::Dynamic x = this->h->item;
	this->h = this->h->next;
	if (::hx::IsNull( this->h )) {
		this->q = null();
	}
	this->length--;
	return x;
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,pop,return )

bool List_obj::isEmpty(){
	return ::hx::IsNull( this->h );
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,isEmpty,return )

void List_obj::clear(){
	this->h = null();
	this->q = null();
	this->length = 0;
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,clear,(void))

bool List_obj::remove( ::Dynamic v){
	 ::haxe::ds::_List::ListNode prev = null();
	 ::haxe::ds::_List::ListNode l = this->h;
	while(::hx::IsNotNull( l )){
		if (::hx::IsEq( l->item,v )) {
			if (::hx::IsNull( prev )) {
				this->h = l->next;
			}
			else {
				prev->next = l->next;
			}
			if (::hx::IsInstanceEq( this->q,l )) {
				this->q = prev;
			}
			this->length--;
			return true;
		}
		prev = l;
		l = l->next;
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,remove,return )

 ::haxe::ds::_List::ListIterator List_obj::iterator(){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::ds::_List::ListIterator_obj::__alloc( HX_CTX ,this->h);
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,iterator,return )

 ::haxe::ds::_List::ListKeyValueIterator List_obj::keyValueIterator(){
            	HX_JUST_GC_STACKFRAME
	return  ::haxe::ds::_List::ListKeyValueIterator_obj::__alloc( HX_CTX ,this->h);
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,keyValueIterator,return )

::String List_obj::toString(){
            	HX_JUST_GC_STACKFRAME
	 ::StringBuf s =  ::StringBuf_obj::__alloc( HX_CTX );
	bool first = true;
	 ::haxe::ds::_List::ListNode l = this->h;
	{
		if (::hx::IsNotNull( s->charBuf )) {
			s->flush();
		}
		if (::hx::IsNull( s->b )) {
			s->b = ::Array_obj< ::String >::fromData( _hx_array_data_15aa2575_2,1);
		}
		else {
			s->b->push(HX_("{",7b,00,00,00));
		}
	}
	while(::hx::IsNotNull( l )){
		if (first) {
			first = false;
		}
		else {
			if (::hx::IsNotNull( s->charBuf )) {
				s->flush();
			}
			if (::hx::IsNull( s->b )) {
				s->b = ::Array_obj< ::String >::fromData( _hx_array_data_15aa2575_3,1);
			}
			else {
				s->b->push(HX_(", ",74,26,00,00));
			}
		}
		{
			::String x = ::Std_obj::string(l->item);
			if (::hx::IsNotNull( s->charBuf )) {
				s->flush();
			}
			if (::hx::IsNull( s->b )) {
				s->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
			}
			else {
				::Array< ::String > s1 = s->b;
				s1->push(::Std_obj::string(x));
			}
		}
		l = l->next;
	}
	{
		if (::hx::IsNotNull( s->charBuf )) {
			s->flush();
		}
		if (::hx::IsNull( s->b )) {
			s->b = ::Array_obj< ::String >::fromData( _hx_array_data_15aa2575_4,1);
		}
		else {
			s->b->push(HX_("}",7d,00,00,00));
		}
	}
	return s->toString();
}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,toString,return )

::String List_obj::join(::String sep){
            	HX_JUST_GC_STACKFRAME
	 ::StringBuf s =  ::StringBuf_obj::__alloc( HX_CTX );
	bool first = true;
	 ::haxe::ds::_List::ListNode l = this->h;
	while(::hx::IsNotNull( l )){
		if (first) {
			first = false;
		}
		else {
			if (::hx::IsNotNull( s->charBuf )) {
				s->flush();
			}
			if (::hx::IsNull( s->b )) {
				s->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(sep));
			}
			else {
				::Array< ::String > s1 = s->b;
				s1->push(::Std_obj::string(sep));
			}
		}
		{
			 ::Dynamic x = l->item;
			if (::hx::IsNotNull( s->charBuf )) {
				s->flush();
			}
			if (::hx::IsNull( s->b )) {
				s->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
			}
			else {
				::Array< ::String > s2 = s->b;
				s2->push(::Std_obj::string(x));
			}
		}
		l = l->next;
	}
	return s->toString();
}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,join,return )

 ::haxe::ds::List List_obj::filter( ::Dynamic f){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::ds::List l2 =  ::haxe::ds::List_obj::__alloc( HX_CTX );
	 ::haxe::ds::_List::ListNode l = this->h;
	while(::hx::IsNotNull( l )){
		 ::Dynamic v = l->item;
		l = l->next;
		if (( (bool)(f(v)) )) {
			l2->add(v);
		}
	}
	return l2;
}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,filter,return )

 ::haxe::ds::List List_obj::map( ::Dynamic f){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::ds::List b =  ::haxe::ds::List_obj::__alloc( HX_CTX );
	 ::haxe::ds::_List::ListNode l = this->h;
	while(::hx::IsNotNull( l )){
		 ::Dynamic v = l->item;
		l = l->next;
		b->add(f(v));
	}
	return b;
}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,map,return )


::hx::ObjectPtr< List_obj > List_obj::__new() {
	::hx::ObjectPtr< List_obj > __this = new List_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< List_obj > List_obj::__alloc(::hx::Ctx *_hx_ctx) {
	List_obj *__this = (List_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(List_obj), true, "haxe.ds.List"));
	*(void **)__this = List_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

List_obj::List_obj()
{
}

void List_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(List);
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(q,"q");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void List_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(q,"q");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val List_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		if (HX_FIELD_EQ(inName,"q") ) { return ::hx::Val( q ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return ::hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"last") ) { return ::hx::Val( last_dyn() ); }
		if (HX_FIELD_EQ(inName,"join") ) { return ::hx::Val( join_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"first") ) { return ::hx::Val( first_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return ::hx::Val( filter_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { return ::hx::Val( keyValueIterator_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val List_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast<  ::haxe::ds::_List::ListNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"q") ) { q=inValue.Cast<  ::haxe::ds::_List::ListNode >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void List_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("q",71,00,00,00));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo List_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::_List::ListNode */ ,(int)offsetof(List_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsObject /*  ::haxe::ds::_List::ListNode */ ,(int)offsetof(List_obj,q),HX_("q",71,00,00,00)},
	{::hx::fsInt,(int)offsetof(List_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *List_obj_sStaticStorageInfo = 0;
#endif

static ::String List_obj_sMemberFields[] = {
	HX_("h",68,00,00,00),
	HX_("q",71,00,00,00),
	HX_("length",e6,94,07,9f),
	HX_("add",21,f2,49,00),
	HX_("push",da,11,61,4a),
	HX_("first",30,78,9d,00),
	HX_("last",56,0a,ad,47),
	HX_("pop",91,5d,55,00),
	HX_("isEmpty",43,de,5f,0c),
	HX_("clear",8d,71,5b,48),
	HX_("remove",44,9c,88,04),
	HX_("iterator",ee,49,9a,93),
	HX_("keyValueIterator",60,cd,ee,4a),
	HX_("toString",ac,d0,6e,38),
	HX_("join",ea,33,65,46),
	HX_("filter",b8,1f,35,85),
	HX_("map",9c,0a,53,00),
	::String(null()) };

::hx::Class List_obj::__mClass;

void List_obj::__register()
{
	List_obj _hx_dummy;
	List_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ds.List",75,25,aa,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(List_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< List_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = List_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = List_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
