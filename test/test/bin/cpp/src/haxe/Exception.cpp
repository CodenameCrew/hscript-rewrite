// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_NativeStackTrace
#include <haxe/NativeStackTrace.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif

namespace haxe{

void Exception_obj::__construct(::String message, ::haxe::Exception previous, ::Dynamic native){
	this->_hx___skipStack = 0;
	this->_hx___exceptionMessage = message;
	this->_hx___previousException = previous;
	if (::hx::IsNotNull( native )) {
		this->_hx___nativeStack = ::haxe::NativeStackTrace_obj::exceptionStack();
		this->_hx___nativeException = native;
	}
	else {
		this->_hx___nativeStack = ::haxe::NativeStackTrace_obj::callStack();
		this->_hx___nativeException = ::hx::ObjectPtr<OBJ_>(this);
	}
}

Dynamic Exception_obj::__CreateEmpty() { return new Exception_obj; }

void *Exception_obj::_hx_vtable = 0;

Dynamic Exception_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Exception_obj > _hx_result = new Exception_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Exception_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x677ddc49;
}

 ::Dynamic Exception_obj::unwrap(){
	return this->_hx___nativeException;
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,unwrap,return )

::String Exception_obj::toString(){
	return this->get_message();
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,toString,return )

::String Exception_obj::details(){
	if (::hx::IsNull( this->get_previous() )) {
		::String _hx_tmp = (HX_("Exception: ",95,cc,ac,54) + this->toString());
		::Array< ::Dynamic> tmp = this->get_stack();
		::String _hx_tmp1;
		if (::hx::IsNull( tmp )) {
			_hx_tmp1 = HX_("null",87,9e,0e,49);
		}
		else {
			_hx_tmp1 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
		}
		return (_hx_tmp + _hx_tmp1);
	}
	else {
		::String result = HX_("",00,00,00,00);
		 ::haxe::Exception e = ::hx::ObjectPtr<OBJ_>(this);
		 ::haxe::Exception prev = null();
		while(::hx::IsNotNull( e )){
			if (::hx::IsNull( prev )) {
				::String result1 = (HX_("Exception: ",95,cc,ac,54) + e->get_message());
				::Array< ::Dynamic> tmp1 = e->get_stack();
				::String result2;
				if (::hx::IsNull( tmp1 )) {
					result2 = HX_("null",87,9e,0e,49);
				}
				else {
					result2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp1);
				}
				result = ((result1 + result2) + result);
			}
			else {
				::Array< ::Dynamic> prevStack = e->get_stack();
				::Array< ::Dynamic> prevStack1 = ::haxe::_CallStack::CallStack_Impl__obj::subtract(prevStack,prev->get_stack());
				::String result3 = (HX_("Exception: ",95,cc,ac,54) + e->get_message());
				::String result4;
				if (::hx::IsNull( prevStack1 )) {
					result4 = HX_("null",87,9e,0e,49);
				}
				else {
					result4 = ::haxe::_CallStack::CallStack_Impl__obj::toString(prevStack1);
				}
				result = (((result3 + result4) + HX_("\n\nNext ",ed,7e,c7,cb)) + result);
			}
			prev = e;
			e = e->get_previous();
		}
		return result;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,details,return )

void Exception_obj::_hx___shiftStack(){
	this->_hx___skipStack++;
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,_hx___shiftStack,(void))

void Exception_obj::_hx___unshiftStack(){
	this->_hx___skipStack--;
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,_hx___unshiftStack,(void))

::String Exception_obj::get_message(){
	return this->_hx___exceptionMessage;
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,get_message,return )

 ::haxe::Exception Exception_obj::get_previous(){
	return this->_hx___previousException;
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,get_previous,return )

 ::Dynamic Exception_obj::get_native(){
	return this->_hx___nativeException;
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,get_native,return )

::Array< ::Dynamic> Exception_obj::get_stack(){
	::Array< ::Dynamic> _g = this->_hx___exceptionStack;
	if (::hx::IsNull( _g )) {
		return (this->_hx___exceptionStack = ::haxe::NativeStackTrace_obj::toHaxe(this->_hx___nativeStack,this->_hx___skipStack));
	}
	else {
		return _g;
	}
	return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Exception_obj,get_stack,return )

 ::haxe::Exception Exception_obj::caught( ::Dynamic value){
            	HX_JUST_GC_STACKFRAME
	if (::Std_obj::isOfType(value,::hx::ClassOf< ::haxe::Exception >())) {
		return ( ( ::haxe::Exception)(value) );
	}
	else {
		 ::haxe::ValueException e =  ::haxe::ValueException_obj::__alloc( HX_CTX ,value,null(),value);
		e->_hx___skipStack--;
		return e;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exception_obj,caught,return )

 ::Dynamic Exception_obj::thrown( ::Dynamic value){
            	HX_JUST_GC_STACKFRAME
	if (::Std_obj::isOfType(value,::hx::ClassOf< ::haxe::Exception >())) {
		return ( ( ::haxe::Exception)(value) )->get_native();
	}
	else {
		 ::haxe::ValueException e =  ::haxe::ValueException_obj::__alloc( HX_CTX ,value,null(),null());
		e->_hx___skipStack++;
		return e;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exception_obj,thrown,return )


::hx::ObjectPtr< Exception_obj > Exception_obj::__new(::String message, ::haxe::Exception previous, ::Dynamic native) {
	::hx::ObjectPtr< Exception_obj > __this = new Exception_obj();
	__this->__construct(message,previous,native);
	return __this;
}

::hx::ObjectPtr< Exception_obj > Exception_obj::__alloc(::hx::Ctx *_hx_ctx,::String message, ::haxe::Exception previous, ::Dynamic native) {
	Exception_obj *__this = (Exception_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Exception_obj), true, "haxe.Exception"));
	*(void **)__this = Exception_obj::_hx_vtable;
	__this->__construct(message,previous,native);
	return __this;
}

Exception_obj::Exception_obj()
{
}

void Exception_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Exception);
	HX_MARK_MEMBER_NAME(_hx___exceptionMessage,"__exceptionMessage");
	HX_MARK_MEMBER_NAME(_hx___exceptionStack,"__exceptionStack");
	HX_MARK_MEMBER_NAME(_hx___nativeStack,"__nativeStack");
	HX_MARK_MEMBER_NAME(_hx___skipStack,"__skipStack");
	HX_MARK_MEMBER_NAME(_hx___nativeException,"__nativeException");
	HX_MARK_MEMBER_NAME(_hx___previousException,"__previousException");
	HX_MARK_END_CLASS();
}

void Exception_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___exceptionMessage,"__exceptionMessage");
	HX_VISIT_MEMBER_NAME(_hx___exceptionStack,"__exceptionStack");
	HX_VISIT_MEMBER_NAME(_hx___nativeStack,"__nativeStack");
	HX_VISIT_MEMBER_NAME(_hx___skipStack,"__skipStack");
	HX_VISIT_MEMBER_NAME(_hx___nativeException,"__nativeException");
	HX_VISIT_MEMBER_NAME(_hx___previousException,"__previousException");
}

::hx::Val Exception_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_stack() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"native") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_native() ); }
		if (HX_FIELD_EQ(inName,"unwrap") ) { return ::hx::Val( unwrap_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_message() ); }
		if (HX_FIELD_EQ(inName,"details") ) { return ::hx::Val( details_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previous") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_previous() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_stack") ) { return ::hx::Val( get_stack_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_native") ) { return ::hx::Val( get_native_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__skipStack") ) { return ::hx::Val( _hx___skipStack ); }
		if (HX_FIELD_EQ(inName,"get_message") ) { return ::hx::Val( get_message_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__shiftStack") ) { return ::hx::Val( _hx___shiftStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_previous") ) { return ::hx::Val( get_previous_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__nativeStack") ) { return ::hx::Val( _hx___nativeStack ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__unshiftStack") ) { return ::hx::Val( _hx___unshiftStack_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__exceptionStack") ) { return ::hx::Val( _hx___exceptionStack ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__nativeException") ) { return ::hx::Val( _hx___nativeException ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__exceptionMessage") ) { return ::hx::Val( _hx___exceptionMessage ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__previousException") ) { return ::hx::Val( _hx___previousException ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Exception_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"caught") ) { outValue = caught_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"thrown") ) { outValue = thrown_dyn(); return true; }
	}
	return false;
}

::hx::Val Exception_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__skipStack") ) { _hx___skipStack=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__nativeStack") ) { _hx___nativeStack=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__exceptionStack") ) { _hx___exceptionStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__nativeException") ) { _hx___nativeException=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__exceptionMessage") ) { _hx___exceptionMessage=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__previousException") ) { _hx___previousException=inValue.Cast<  ::haxe::Exception >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Exception_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("message",c7,35,11,9a));
	outFields->push(HX_("stack",48,67,0b,84));
	outFields->push(HX_("previous",37,bc,b0,23));
	outFields->push(HX_("native",97,c9,1c,22));
	outFields->push(HX_("__exceptionMessage",58,18,4c,1e));
	outFields->push(HX_("__exceptionStack",99,d3,95,3f));
	outFields->push(HX_("__nativeStack",11,2b,7f,33));
	outFields->push(HX_("__skipStack",29,1d,33,c6));
	outFields->push(HX_("__nativeException",98,ec,35,0d));
	outFields->push(HX_("__previousException",f8,9d,b4,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Exception_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Exception_obj,_hx___exceptionMessage),HX_("__exceptionMessage",58,18,4c,1e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Exception_obj,_hx___exceptionStack),HX_("__exceptionStack",99,d3,95,3f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Exception_obj,_hx___nativeStack),HX_("__nativeStack",11,2b,7f,33)},
	{::hx::fsInt,(int)offsetof(Exception_obj,_hx___skipStack),HX_("__skipStack",29,1d,33,c6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Exception_obj,_hx___nativeException),HX_("__nativeException",98,ec,35,0d)},
	{::hx::fsObject /*  ::haxe::Exception */ ,(int)offsetof(Exception_obj,_hx___previousException),HX_("__previousException",f8,9d,b4,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Exception_obj_sStaticStorageInfo = 0;
#endif

static ::String Exception_obj_sMemberFields[] = {
	HX_("__exceptionMessage",58,18,4c,1e),
	HX_("__exceptionStack",99,d3,95,3f),
	HX_("__nativeStack",11,2b,7f,33),
	HX_("__skipStack",29,1d,33,c6),
	HX_("__nativeException",98,ec,35,0d),
	HX_("__previousException",f8,9d,b4,84),
	HX_("unwrap",a3,40,d4,6c),
	HX_("toString",ac,d0,6e,38),
	HX_("details",c2,dc,56,ab),
	HX_("__shiftStack",86,ce,f6,cb),
	HX_("__unshiftStack",1f,06,33,20),
	HX_("get_message",de,95,0b,20),
	HX_("get_previous",40,70,ca,d8),
	HX_("get_native",60,39,a4,12),
	HX_("get_stack",9f,c3,b4,c7),
	::String(null()) };

::hx::Class Exception_obj::__mClass;

static ::String Exception_obj_sStaticFields[] = {
	HX_("caught",7c,77,d7,bc),
	HX_("thrown",88,24,c1,8e),
	::String(null())
};

void Exception_obj::__register()
{
	Exception_obj _hx_dummy;
	Exception_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.Exception",e7,99,a3,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Exception_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Exception_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Exception_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Exception_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Exception_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Exception_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
