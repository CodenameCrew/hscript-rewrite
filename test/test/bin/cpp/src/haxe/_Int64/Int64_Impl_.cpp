// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp__Int64_Int64_Impl_
#include <cpp/_Int64/Int64_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Int64Helper
#include <haxe/Int64Helper.h>
#endif
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#include <haxe/_Int64/Int64_Impl_.h>
#endif

namespace haxe{
namespace _Int64{

void Int64_Impl__obj::__construct() { }

Dynamic Int64_Impl__obj::__CreateEmpty() { return new Int64_Impl__obj; }

void *Int64_Impl__obj::_hx_vtable = 0;

Dynamic Int64_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Int64_Impl__obj > _hx_result = new Int64_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Int64_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x66145239;
}

::cpp::Int64 Int64_Impl__obj::copy(::cpp::Int64 this1){
	return this1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,copy,return )

::cpp::Int64 Int64_Impl__obj::make(int high,int low){
	return _hx_int64_make(high,low);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,make,return )

::cpp::Int64 Int64_Impl__obj::ofInt(int x){
	return ( (::cpp::Int64)(x) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,ofInt,return )

int Int64_Impl__obj::toInt(::cpp::Int64 x){
	int _hx_tmp = _hx_int64_high(x);
	if ((_hx_tmp != (_hx_int64_low(x) >> 31))) {
		HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
	}
	return _hx_int64_low(x);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,toInt,return )

bool Int64_Impl__obj::is( ::Dynamic val){
	return ::Std_obj::isOfType(val,::hx::ClassOf< ::cpp::Int64 >());
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,is,return )

bool Int64_Impl__obj::isInt64( ::Dynamic val){
	return ::Std_obj::isOfType(val,::hx::ClassOf< ::cpp::Int64 >());
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,isInt64,return )

int Int64_Impl__obj::getHigh(::cpp::Int64 x){
	return _hx_int64_high(x);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,getHigh,return )

int Int64_Impl__obj::getLow(::cpp::Int64 x){
	return _hx_int64_low(x);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,getLow,return )

bool Int64_Impl__obj::isNeg(::cpp::Int64 x){
	return _hx_int64_is_neg(x);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,isNeg,return )

bool Int64_Impl__obj::isZero(::cpp::Int64 x){
	return _hx_int64_is_zero(x);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,isZero,return )

int Int64_Impl__obj::compare(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_compare(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,compare,return )

int Int64_Impl__obj::ucompare(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_ucompare(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,ucompare,return )

::String Int64_Impl__obj::toStr(::cpp::Int64 x){
	return ( (::String)(x) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,toStr,return )

::String Int64_Impl__obj::toString(::cpp::Int64 this1){
	return ( (::String)(this1) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,toString,return )

::cpp::Int64 Int64_Impl__obj::parseString(::String sParam){
	return ::haxe::Int64Helper_obj::parseString(sParam);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,parseString,return )

::cpp::Int64 Int64_Impl__obj::fromFloat(Float f){
	return ::haxe::Int64Helper_obj::fromFloat(f);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,fromFloat,return )

 ::Dynamic Int64_Impl__obj::divMod(::cpp::Int64 dividend,::cpp::Int64 divisor){
	if (_hx_int64_is_zero(divisor)) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	::cpp::Int64 q = _hx_int64_div(dividend,divisor);
	if (_hx_int64_eq(divisor,( (::cpp::Int64)(0) ))) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	::cpp::Int64 m = _hx_int64_sub(dividend,_hx_int64_mul(q,divisor));
	return  ::Dynamic(::hx::Anon_obj::Create(2)
		->setFixed(0,HX_("quotient",ab,68,60,b2),q)
		->setFixed(1,HX_("modulus",37,f0,fa,f7),m));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,divMod,return )

::cpp::Int64 Int64_Impl__obj::neg(::cpp::Int64 x){
	return _hx_int64_neg(x);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,neg,return )

::cpp::Int64 Int64_Impl__obj::preIncrement(::cpp::Int64 this1){
	return _hx_int64_pre_increment(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,preIncrement,return )

::cpp::Int64 Int64_Impl__obj::postIncrement(::cpp::Int64 this1){
	return _hx_int64_post_increment(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,postIncrement,return )

::cpp::Int64 Int64_Impl__obj::preDecrement(::cpp::Int64 this1){
	return _hx_int64_pre_decrement(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,preDecrement,return )

::cpp::Int64 Int64_Impl__obj::postDecrement(::cpp::Int64 this1){
	return _hx_int64_post_decrement(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,postDecrement,return )

::cpp::Int64 Int64_Impl__obj::add(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_add(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,add,return )

::cpp::Int64 Int64_Impl__obj::addInt(::cpp::Int64 a,int b){
	return _hx_int64_add(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,addInt,return )

::cpp::Int64 Int64_Impl__obj::sub(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_sub(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,sub,return )

::cpp::Int64 Int64_Impl__obj::subInt(::cpp::Int64 a,int b){
	return _hx_int64_sub(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,subInt,return )

::cpp::Int64 Int64_Impl__obj::intSub(int a,::cpp::Int64 b){
	return _hx_int64_sub(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intSub,return )

::cpp::Int64 Int64_Impl__obj::mul(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_mul(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,mul,return )

::cpp::Int64 Int64_Impl__obj::mulInt(::cpp::Int64 a,int b){
	return _hx_int64_mul(a,( (::cpp::Int64)(b) ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,mulInt,return )

::cpp::Int64 Int64_Impl__obj::div(::cpp::Int64 a,::cpp::Int64 b){
	if (_hx_int64_is_zero(b)) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	return _hx_int64_div(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,div,return )

::cpp::Int64 Int64_Impl__obj::divInt(::cpp::Int64 a,int b){
	if (_hx_int64_is_zero(( (::cpp::Int64)(b) ))) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	return _hx_int64_div(a,( (::cpp::Int64)(b) ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,divInt,return )

::cpp::Int64 Int64_Impl__obj::intDiv(int a,::cpp::Int64 b){
	if (_hx_int64_is_zero(b)) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	::cpp::Int64 x = _hx_int64_div(( (::cpp::Int64)(a) ),b);
	int _hx_tmp = _hx_int64_high(x);
	if ((_hx_tmp != (_hx_int64_low(x) >> 31))) {
		HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
	}
	return ( (::cpp::Int64)(_hx_int64_low(x)) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intDiv,return )

::cpp::Int64 Int64_Impl__obj::mod(::cpp::Int64 a,::cpp::Int64 b){
	if (_hx_int64_is_zero(b)) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	return _hx_int64_mod(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,mod,return )

::cpp::Int64 Int64_Impl__obj::modInt(::cpp::Int64 a,int b){
	if (_hx_int64_is_zero(( (::cpp::Int64)(b) ))) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	::cpp::Int64 x = _hx_int64_mod(a,( (::cpp::Int64)(b) ));
	int _hx_tmp = _hx_int64_high(x);
	if ((_hx_tmp != (_hx_int64_low(x) >> 31))) {
		HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
	}
	return ( (::cpp::Int64)(_hx_int64_low(x)) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,modInt,return )

::cpp::Int64 Int64_Impl__obj::intMod(int a,::cpp::Int64 b){
	if (_hx_int64_is_zero(b)) {
		HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
	}
	::cpp::Int64 x = _hx_int64_mod(( (::cpp::Int64)(a) ),b);
	int _hx_tmp = _hx_int64_high(x);
	if ((_hx_tmp != (_hx_int64_low(x) >> 31))) {
		HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
	}
	return ( (::cpp::Int64)(_hx_int64_low(x)) );
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intMod,return )

bool Int64_Impl__obj::eq(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_eq(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,eq,return )

bool Int64_Impl__obj::eqInt(::cpp::Int64 a,int b){
	return _hx_int64_eq(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,eqInt,return )

bool Int64_Impl__obj::neq(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_neq(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,neq,return )

bool Int64_Impl__obj::neqInt(::cpp::Int64 a,int b){
	return _hx_int64_neq(a,( (::cpp::Int64)(b) ));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,neqInt,return )

bool Int64_Impl__obj::lt(::cpp::Int64 a,::cpp::Int64 b){
	return (_hx_int64_compare(a,b) < 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,lt,return )

bool Int64_Impl__obj::ltInt(::cpp::Int64 a,int b){
	return (_hx_int64_compare(a,( (::cpp::Int64)(b) )) < 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,ltInt,return )

bool Int64_Impl__obj::intLt(int a,::cpp::Int64 b){
	return (_hx_int64_compare(( (::cpp::Int64)(a) ),b) < 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intLt,return )

bool Int64_Impl__obj::lte(::cpp::Int64 a,::cpp::Int64 b){
	return (_hx_int64_compare(a,b) <= 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,lte,return )

bool Int64_Impl__obj::lteInt(::cpp::Int64 a,int b){
	return (_hx_int64_compare(a,( (::cpp::Int64)(b) )) <= 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,lteInt,return )

bool Int64_Impl__obj::intLte(int a,::cpp::Int64 b){
	return (_hx_int64_compare(( (::cpp::Int64)(a) ),b) <= 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intLte,return )

bool Int64_Impl__obj::gt(::cpp::Int64 a,::cpp::Int64 b){
	return (_hx_int64_compare(a,b) > 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gt,return )

bool Int64_Impl__obj::gtInt(::cpp::Int64 a,int b){
	return (_hx_int64_compare(a,( (::cpp::Int64)(b) )) > 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gtInt,return )

bool Int64_Impl__obj::intGt(int a,::cpp::Int64 b){
	return (_hx_int64_compare(( (::cpp::Int64)(a) ),b) > 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intGt,return )

bool Int64_Impl__obj::gte(::cpp::Int64 a,::cpp::Int64 b){
	return (_hx_int64_compare(a,b) >= 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gte,return )

bool Int64_Impl__obj::gteInt(::cpp::Int64 a,int b){
	return (_hx_int64_compare(a,( (::cpp::Int64)(b) )) >= 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gteInt,return )

bool Int64_Impl__obj::intGte(int a,::cpp::Int64 b){
	return (_hx_int64_compare(( (::cpp::Int64)(a) ),b) >= 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intGte,return )

::cpp::Int64 Int64_Impl__obj::complement(::cpp::Int64 a){
	return _hx_int64_complement(a);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,complement,return )

::cpp::Int64 Int64_Impl__obj::_hx_and(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_and(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,_hx_and,return )

::cpp::Int64 Int64_Impl__obj::_hx_or(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_or(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,_hx_or,return )

::cpp::Int64 Int64_Impl__obj::_hx_xor(::cpp::Int64 a,::cpp::Int64 b){
	return _hx_int64_xor(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,_hx_xor,return )

::cpp::Int64 Int64_Impl__obj::shl(::cpp::Int64 a,int b){
	return _hx_int64_shl(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,shl,return )

::cpp::Int64 Int64_Impl__obj::shr(::cpp::Int64 a,int b){
	return _hx_int64_shr(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,shr,return )

::cpp::Int64 Int64_Impl__obj::ushr(::cpp::Int64 a,int b){
	return _hx_int64_ushr(a,b);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,ushr,return )

int Int64_Impl__obj::get_high(::cpp::Int64 this1){
	return _hx_int64_high(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,get_high,return )

int Int64_Impl__obj::get_low(::cpp::Int64 this1){
	return _hx_int64_low(this1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,get_low,return )

::cpp::Int64 Int64_Impl__obj::get_val(::cpp::Int64 this1){
	return this1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,get_val,return )


Int64_Impl__obj::Int64_Impl__obj()
{
}

bool Int64_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"is") ) { outValue = is_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eq") ) { outValue = eq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lt") ) { outValue = lt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gt") ) { outValue = gt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"neg") ) { outValue = neg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mul") ) { outValue = mul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"div") ) { outValue = div_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mod") ) { outValue = mod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neq") ) { outValue = neq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lte") ) { outValue = lte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gte") ) { outValue = gte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xor") ) { outValue = _hx_xor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shl") ) { outValue = shl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shr") ) { outValue = shr_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"make") ) { outValue = make_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ushr") ) { outValue = ushr_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ofInt") ) { outValue = ofInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNeg") ) { outValue = isNeg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toStr") ) { outValue = toStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eqInt") ) { outValue = eqInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ltInt") ) { outValue = ltInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intLt") ) { outValue = intLt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gtInt") ) { outValue = gtInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intGt") ) { outValue = intGt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getLow") ) { outValue = getLow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divMod") ) { outValue = divMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addInt") ) { outValue = addInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt") ) { outValue = subInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intSub") ) { outValue = intSub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mulInt") ) { outValue = mulInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divInt") ) { outValue = divInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intDiv") ) { outValue = intDiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modInt") ) { outValue = modInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intMod") ) { outValue = intMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neqInt") ) { outValue = neqInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lteInt") ) { outValue = lteInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intLte") ) { outValue = intLte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gteInt") ) { outValue = gteInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intGte") ) { outValue = intGte_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isInt64") ) { outValue = isInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getHigh") ) { outValue = getHigh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_low") ) { outValue = get_low_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_val") ) { outValue = get_val_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ucompare") ) { outValue = ucompare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_high") ) { outValue = get_high_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Int64_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Int64_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Int64_Impl__obj::__mClass;

static ::String Int64_Impl__obj_sStaticFields[] = {
	HX_("copy",b5,bb,c4,41),
	HX_("make",ee,39,56,48),
	HX_("ofInt",18,ec,1d,2d),
	HX_("toInt",34,be,11,14),
	HX_("is",ea,5b,00,00),
	HX_("isInt64",a3,39,a6,5a),
	HX_("getHigh",18,e7,90,17),
	HX_("getLow",9e,8d,21,a3),
	HX_("isNeg",86,fa,51,c1),
	HX_("isZero",32,d4,57,6e),
	HX_("compare",a5,18,69,83),
	HX_("ucompare",d0,40,77,a7),
	HX_("toStr",f6,59,19,14),
	HX_("toString",ac,d0,6e,38),
	HX_("parseString",64,d5,6c,8c),
	HX_("fromFloat",d2,af,1f,b7),
	HX_("divMod",f1,f9,fc,be),
	HX_("neg",50,d0,53,00),
	HX_("preIncrement",8c,e9,fe,d7),
	HX_("postIncrement",af,d5,b1,df),
	HX_("preDecrement",70,d9,81,b6),
	HX_("postDecrement",93,c5,34,be),
	HX_("add",21,f2,49,00),
	HX_("addInt",4e,1d,01,9f),
	HX_("sub",80,a9,57,00),
	HX_("subInt",4f,0b,eb,99),
	HX_("intSub",d1,d3,78,9e),
	HX_("mul",04,1c,53,00),
	HX_("mulInt",4b,03,63,3a),
	HX_("div",51,3d,4c,00),
	HX_("divInt",1e,f0,f9,be),
	HX_("intDiv",a2,67,6d,9e),
	HX_("mod",c2,16,53,00),
	HX_("modInt",4d,d3,b1,c0),
	HX_("intMod",13,41,74,9e),
	HX_("eq",6c,58,00,00),
	HX_("eqInt",e3,77,61,72),
	HX_("neq",5a,d0,53,00),
	HX_("neqInt",b5,28,a3,6d),
	HX_("lt",88,5e,00,00),
	HX_("ltInt",47,2b,2b,7c),
	HX_("intLt",57,a9,20,be),
	HX_("lte",dd,58,52,00),
	HX_("lteInt",12,94,00,3c),
	HX_("intLte",2e,83,73,9e),
	HX_("gt",2d,5a,00,00),
	HX_("gtInt",c2,44,2a,9b),
	HX_("intGt",fc,a4,20,be),
	HX_("gte",98,8d,4e,00),
	HX_("gteInt",37,c6,37,3c),
	HX_("intGte",e9,b7,6f,9e),
	HX_("complement",e6,42,b4,fd),
	HX_("and",d7,fa,49,00),
	HX_("or",23,61,00,00),
	HX_("xor",9b,6f,5b,00),
	HX_("shl",37,9e,57,00),
	HX_("shr",3d,9e,57,00),
	HX_("ushr",e8,94,ad,4d),
	HX_("get_high",eb,f2,c8,c4),
	HX_("get_low",2b,1d,c7,26),
	HX_("get_val",78,a7,ce,26),
	::String(null())
};

void Int64_Impl__obj::__register()
{
	Int64_Impl__obj _hx_dummy;
	Int64_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe._Int64.Int64_Impl_",15,d6,6c,a0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int64_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Int64_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Int64_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int64_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int64_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace _Int64
