// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif

static const ::String _hx_array_data_4ec6cf05_5[] = {
	HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_4ec6cf05_6[] = {
	HX_(":",3a,00,00,00),
};
static const ::String _hx_array_data_4ec6cf05_7[] = {
	HX_("/",2f,00,00,00),
};
namespace haxe{
namespace io{

void Path_obj::__construct(::String path){
	::String _hx_switch_0 = path;
	if (  (_hx_switch_0==HX_(".",2e,00,00,00)) ||  (_hx_switch_0==HX_("..",40,28,00,00)) ){
		this->dir = path;
		this->file = HX_("",00,00,00,00);
		return;
		goto _hx_goto_0;
	}
	_hx_goto_0:;
	int c1 = path.lastIndexOf(HX_("/",2f,00,00,00),null());
	int c2 = path.lastIndexOf(HX_("\\",5c,00,00,00),null());
	if ((c1 < c2)) {
		this->dir = path.substr(0,c2);
		path = path.substr((c2 + 1),null());
		this->backslash = true;
	}
	else {
		if ((c2 < c1)) {
			this->dir = path.substr(0,c1);
			path = path.substr((c1 + 1),null());
		}
		else {
			this->dir = null();
		}
	}
	int cp = path.lastIndexOf(HX_(".",2e,00,00,00),null());
	if ((cp != -1)) {
		this->ext = path.substr((cp + 1),null());
		this->file = path.substr(0,cp);
	}
	else {
		this->ext = null();
		this->file = path;
	}
}

Dynamic Path_obj::__CreateEmpty() { return new Path_obj; }

void *Path_obj::_hx_vtable = 0;

Dynamic Path_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Path_obj > _hx_result = new Path_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Path_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x026896d9;
}

::String Path_obj::toString(){
	::String _hx_tmp;
	if (::hx::IsNull( this->dir )) {
		_hx_tmp = HX_("",00,00,00,00);
	}
	else {
		::String _hx_tmp1;
		if (this->backslash) {
			_hx_tmp1 = HX_("\\",5c,00,00,00);
		}
		else {
			_hx_tmp1 = HX_("/",2f,00,00,00);
		}
		_hx_tmp = (this->dir + _hx_tmp1);
	}
	::String _hx_tmp2;
	if (::hx::IsNull( this->ext )) {
		_hx_tmp2 = HX_("",00,00,00,00);
	}
	else {
		_hx_tmp2 = (HX_(".",2e,00,00,00) + this->ext);
	}
	return ((_hx_tmp + this->file) + _hx_tmp2);
}


HX_DEFINE_DYNAMIC_FUNC0(Path_obj,toString,return )

::String Path_obj::withoutExtension(::String path){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
	s->ext = null();
	return s->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,withoutExtension,return )

::String Path_obj::withoutDirectory(::String path){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
	s->dir = null();
	return s->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,withoutDirectory,return )

::String Path_obj::directory(::String path){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
	if (::hx::IsNull( s->dir )) {
		return HX_("",00,00,00,00);
	}
	return s->dir;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,directory,return )

::String Path_obj::extension(::String path){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
	if (::hx::IsNull( s->ext )) {
		return HX_("",00,00,00,00);
	}
	return s->ext;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,extension,return )

::String Path_obj::withExtension(::String path,::String ext){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
	s->ext = ext;
	return s->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_obj,withExtension,return )

::String Path_obj::join(::Array< ::String > paths){
	::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
	{
		int _g1 = 0;
		while((_g1 < paths->length)){
			::String v = paths->__get(_g1);
			_g1 = (_g1 + 1);
			bool _hx_tmp;
			if (::hx::IsNotNull( v )) {
				_hx_tmp = (v != HX_("",00,00,00,00));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				_g->push(v);
			}
		}
	}
	if ((_g->length == 0)) {
		return HX_("",00,00,00,00);
	}
	::String path = _g->__get(0);
	{
		int _g2 = 1;
		int _g3 = _g->length;
		while((_g2 < _g3)){
			_g2 = (_g2 + 1);
			path = ::haxe::io::Path_obj::addTrailingSlash(path);
			path = (path + _g->__get((_g2 - 1)));
		}
	}
	return ::haxe::io::Path_obj::normalize(path);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,join,return )

::String Path_obj::normalize(::String path){
            	HX_JUST_GC_STACKFRAME
	path = path.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
	if ((path == HX_("/",2f,00,00,00))) {
		return HX_("/",2f,00,00,00);
	}
	::Array< ::String > target = ::Array_obj< ::String >::__new(0);
	{
		int _g = 0;
		::Array< ::String > _g1 = path.split(HX_("/",2f,00,00,00));
		while((_g < _g1->length)){
			::String token = _g1->__get(_g);
			_g = (_g + 1);
			bool _hx_tmp;
			bool _hx_tmp1;
			if ((token == HX_("..",40,28,00,00))) {
				_hx_tmp1 = (target->length > 0);
			}
			else {
				_hx_tmp1 = false;
			}
			if (_hx_tmp1) {
				_hx_tmp = (target->__get((target->length - 1)) != HX_("..",40,28,00,00));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				target->pop();
			}
			else {
				if ((token == HX_("",00,00,00,00))) {
					bool _hx_tmp2;
					if ((target->length <= 0)) {
						_hx_tmp2 = ::hx::IsEq( path.charCodeAt(0),47 );
					}
					else {
						_hx_tmp2 = true;
					}
					if (_hx_tmp2) {
						target->push(token);
					}
				}
				else {
					if ((token != HX_(".",2e,00,00,00))) {
						target->push(token);
					}
				}
			}
		}
	}
	::String tmp = target->join(HX_("/",2f,00,00,00));
	 ::StringBuf acc =  ::StringBuf_obj::__alloc( HX_CTX );
	bool colon = false;
	bool slashes = false;
	{
		int _g_offset = 0;
		while((_g_offset < tmp.length)){
			_g_offset = (_g_offset + 1);
			int index = (_g_offset - 1);
			int c = tmp.cca(index);
			bool _hx_tmp3;
			if ((c >= 55296)) {
				_hx_tmp3 = (c <= 56319);
			}
			else {
				_hx_tmp3 = false;
			}
			if (_hx_tmp3) {
				c = (((c - 55232) << 10) | (tmp.cca((index + 1)) & 1023));
			}
			int c1 = c;
			if ((c1 >= 65536)) {
				_g_offset = (_g_offset + 1);
			}
			switch((int)(c1)){
				case (int)47: {
					if (!(colon)) {
						slashes = true;
					}
					else {
						colon = false;
						if (slashes) {
							{
								if (::hx::IsNotNull( acc->charBuf )) {
									acc->flush();
								}
								if (::hx::IsNull( acc->b )) {
									acc->b = ::Array_obj< ::String >::fromData( _hx_array_data_4ec6cf05_5,1);
								}
								else {
									acc->b->push(HX_("/",2f,00,00,00));
								}
							}
							slashes = false;
						}
						if ((c1 >= 127)) {
							::String x = ::String::fromCharCode(c1);
							if (::hx::IsNotNull( acc->charBuf )) {
								acc->flush();
							}
							if (::hx::IsNull( acc->b )) {
								acc->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
							}
							else {
								::Array< ::String > acc1 = acc->b;
								acc1->push(::Std_obj::string(x));
							}
						}
						else {
							if (::hx::IsNull( acc->charBuf )) {
								acc->charBuf = ::Array_obj< char >::__new();
							}
							acc->charBuf->push(c1);
						}
					}
				}
				break;
				case (int)58: {
					{
						if (::hx::IsNotNull( acc->charBuf )) {
							acc->flush();
						}
						if (::hx::IsNull( acc->b )) {
							acc->b = ::Array_obj< ::String >::fromData( _hx_array_data_4ec6cf05_6,1);
						}
						else {
							acc->b->push(HX_(":",3a,00,00,00));
						}
					}
					colon = true;
				}
				break;
				default:{
					colon = false;
					if (slashes) {
						{
							if (::hx::IsNotNull( acc->charBuf )) {
								acc->flush();
							}
							if (::hx::IsNull( acc->b )) {
								acc->b = ::Array_obj< ::String >::fromData( _hx_array_data_4ec6cf05_7,1);
							}
							else {
								acc->b->push(HX_("/",2f,00,00,00));
							}
						}
						slashes = false;
					}
					if ((c1 >= 127)) {
						::String x1 = ::String::fromCharCode(c1);
						if (::hx::IsNotNull( acc->charBuf )) {
							acc->flush();
						}
						if (::hx::IsNull( acc->b )) {
							acc->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
						}
						else {
							::Array< ::String > acc2 = acc->b;
							acc2->push(::Std_obj::string(x1));
						}
					}
					else {
						if (::hx::IsNull( acc->charBuf )) {
							acc->charBuf = ::Array_obj< char >::__new();
						}
						acc->charBuf->push(c1);
					}
				}
			}
		}
	}
	return acc->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,normalize,return )

::String Path_obj::addTrailingSlash(::String path){
	if ((path.length == 0)) {
		return HX_("/",2f,00,00,00);
	}
	int c1 = path.lastIndexOf(HX_("/",2f,00,00,00),null());
	int c2 = path.lastIndexOf(HX_("\\",5c,00,00,00),null());
	if ((c1 < c2)) {
		if ((c2 != (path.length - 1))) {
			return (path + HX_("\\",5c,00,00,00));
		}
		else {
			return path;
		}
	}
	else {
		if ((c1 != (path.length - 1))) {
			return (path + HX_("/",2f,00,00,00));
		}
		else {
			return path;
		}
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,addTrailingSlash,return )

::String Path_obj::removeTrailingSlashes(::String path){
	while(true){
		 ::Dynamic _g = path.charCodeAt((path.length - 1));
		if (::hx::IsNull( _g )) {
			goto _hx_goto_8;
		}
		else {
			 ::Dynamic _hx_switch_0 = _g;
			if (  (_hx_switch_0==47) ||  (_hx_switch_0==92) ){
				path = path.substr(0,-1);
				goto _hx_goto_9;
			}
			/* default */{
				goto _hx_goto_8;
			}
			_hx_goto_9:;
		}
	}
	_hx_goto_8:;
	return path;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,removeTrailingSlashes,return )

bool Path_obj::isAbsolute(::String path){
	if (::StringTools_obj::startsWith(path,HX_("/",2f,00,00,00))) {
		return true;
	}
	if ((path.charAt(1) == HX_(":",3a,00,00,00))) {
		return true;
	}
	if (::StringTools_obj::startsWith(path,HX_("\\\\",80,50,00,00))) {
		return true;
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,isAbsolute,return )

::String Path_obj::unescape(::String path){
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
	::String _hx_run( ::EReg regex){
		HX_JUST_GC_STACKFRAME
		return ::String::fromCharCode(( (int)(::Std_obj::parseInt(regex->matched(1))) ));
	}
	HX_END_LOCAL_FUNC1(return)

            	HX_JUST_GC_STACKFRAME
	return  ::EReg_obj::__alloc( HX_CTX ,HX_("-x([0-9][0-9])",ac,12,39,1d),HX_("g",67,00,00,00))->map(path, ::Dynamic(new _hx_Closure_0()));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,unescape,return )

::String Path_obj::escape(::String path,::hx::Null< bool >  __o_allowSlashes){
	HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
	::String _hx_run( ::EReg v){
		HX_JUST_GC_STACKFRAME
		return (HX_("-x",ab,27,00,00) + v->matched(0).charCodeAt(0));
	}
	HX_END_LOCAL_FUNC1(return)

	bool allowSlashes = __o_allowSlashes.Default(false);
            	HX_JUST_GC_STACKFRAME
	 ::EReg regex;
	if (allowSlashes) {
		regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^A-Za-z0-9_/\\\\\\.]",e2,20,d8,87),HX_("g",67,00,00,00));
	}
	else {
		regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^A-Za-z0-9_\\.]",e5,4f,7d,11),HX_("g",67,00,00,00));
	}
	return regex->map(path, ::Dynamic(new _hx_Closure_0()));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_obj,escape,return )


::hx::ObjectPtr< Path_obj > Path_obj::__new(::String path) {
	::hx::ObjectPtr< Path_obj > __this = new Path_obj();
	__this->__construct(path);
	return __this;
}

::hx::ObjectPtr< Path_obj > Path_obj::__alloc(::hx::Ctx *_hx_ctx,::String path) {
	Path_obj *__this = (Path_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Path_obj), true, "haxe.io.Path"));
	*(void **)__this = Path_obj::_hx_vtable;
	__this->__construct(path);
	return __this;
}

Path_obj::Path_obj()
{
}

void Path_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Path);
	HX_MARK_MEMBER_NAME(dir,"dir");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(ext,"ext");
	HX_MARK_MEMBER_NAME(backslash,"backslash");
	HX_MARK_END_CLASS();
}

void Path_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dir,"dir");
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(ext,"ext");
	HX_VISIT_MEMBER_NAME(backslash,"backslash");
}

::hx::Val Path_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { return ::hx::Val( dir ); }
		if (HX_FIELD_EQ(inName,"ext") ) { return ::hx::Val( ext ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return ::hx::Val( file ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"backslash") ) { return ::hx::Val( backslash ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Path_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"escape") ) { outValue = escape_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"unescape") ) { outValue = unescape_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"directory") ) { outValue = directory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extension") ) { outValue = extension_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isAbsolute") ) { outValue = isAbsolute_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"withExtension") ) { outValue = withExtension_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"withoutExtension") ) { outValue = withoutExtension_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withoutDirectory") ) { outValue = withoutDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addTrailingSlash") ) { outValue = addTrailingSlash_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"removeTrailingSlashes") ) { outValue = removeTrailingSlashes_dyn(); return true; }
	}
	return false;
}

::hx::Val Path_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ext") ) { ext=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"backslash") ) { backslash=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Path_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("dir",4d,3d,4c,00));
	outFields->push(HX_("file",7c,ce,bb,43));
	outFields->push(HX_("ext",a1,0c,4d,00));
	outFields->push(HX_("backslash",b6,b8,45,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Path_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Path_obj,dir),HX_("dir",4d,3d,4c,00)},
	{::hx::fsString,(int)offsetof(Path_obj,file),HX_("file",7c,ce,bb,43)},
	{::hx::fsString,(int)offsetof(Path_obj,ext),HX_("ext",a1,0c,4d,00)},
	{::hx::fsBool,(int)offsetof(Path_obj,backslash),HX_("backslash",b6,b8,45,c8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Path_obj_sStaticStorageInfo = 0;
#endif

static ::String Path_obj_sMemberFields[] = {
	HX_("dir",4d,3d,4c,00),
	HX_("file",7c,ce,bb,43),
	HX_("ext",a1,0c,4d,00),
	HX_("backslash",b6,b8,45,c8),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Path_obj::__mClass;

static ::String Path_obj_sStaticFields[] = {
	HX_("withoutExtension",17,b8,9d,4f),
	HX_("withoutDirectory",05,17,d2,7a),
	HX_("directory",6d,f2,44,10),
	HX_("extension",7f,93,10,e5),
	HX_("withExtension",99,0c,eb,6d),
	HX_("join",ea,33,65,46),
	HX_("normalize",8d,37,a1,ab),
	HX_("addTrailingSlash",e0,d6,eb,26),
	HX_("removeTrailingSlashes",8b,dc,1d,43),
	HX_("isAbsolute",81,e0,44,3e),
	HX_("unescape",9a,72,21,dd),
	HX_("escape",81,43,da,da),
	::String(null())
};

void Path_obj::__register()
{
	Path_obj _hx_dummy;
	Path_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.io.Path",05,cf,c6,4e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Path_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Path_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Path_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Path_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Path_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Path_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
