// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_NotImplementedException
#include <haxe/exceptions/NotImplementedException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_FPHelper
#include <haxe/io/FPHelper.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif

namespace haxe{
namespace io{

void Input_obj::__construct() { }

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

void *Input_obj::_hx_vtable = 0;

Dynamic Input_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Input_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19e22056;
}

int Input_obj::readByte(){
            	HX_JUST_GC_STACKFRAME
	HX_STACK_DO_THROW( ::haxe::exceptions::NotImplementedException_obj::__alloc( HX_CTX ,null(),null(),::hx::SourceInfo(HX_("haxe/io/Input.hx",f4,10,5a,cd),51,HX_("haxe.io.Input",aa,0e,f5,9f),HX_("readByte",7e,f9,1a,69))));
	return 0;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readByte,return )

int Input_obj::readBytes( ::haxe::io::Bytes s,int pos,int len){
	int k = len;
	::Array< unsigned char > b = s->b;
	bool _hx_tmp;
	bool _hx_tmp1;
	if ((pos >= 0)) {
		_hx_tmp1 = (len < 0);
	}
	else {
		_hx_tmp1 = true;
	}
	if (!(_hx_tmp1)) {
		_hx_tmp = ((pos + len) > s->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
	}
	try {
		HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		while((k > 0)){
			b[pos] = ( (unsigned char)(this->readByte()) );
			pos = (pos + 1);
			k = (k - 1);
		}
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::io::Eof eof = _hx_e;
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (!(::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
				HX_STACK_DO_THROW(_g);
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return (len - k);
}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,readBytes,return )

void Input_obj::close(){
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,close,(void))

bool Input_obj::set_bigEndian(bool b){
	this->bigEndian = b;
	return b;
}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,set_bigEndian,return )

 ::haxe::io::Bytes Input_obj::readAll( ::Dynamic bufsize){
            	HX_JUST_GC_STACKFRAME
	if (::hx::IsNull( bufsize )) {
		bufsize = 16384;
	}
	 ::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(( (int)(bufsize) ));
	 ::haxe::io::BytesBuffer total =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
	try {
		HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		while(true){
			int len = this->readBytes(buf,0,( (int)(bufsize) ));
			if ((len == 0)) {
				HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
			}
			{
				bool _hx_tmp;
				if ((len >= 0)) {
					_hx_tmp = (len > buf->length);
				}
				else {
					_hx_tmp = true;
				}
				if (_hx_tmp) {
					HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
				}
				::Array< unsigned char > b2 = buf->b;
				{
					int _g = 0;
					while((_g < len)){
						_g = (_g + 1);
						total->b->push(b2->__get((_g - 1)));
					}
				}
			}
		}
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::io::Eof e = _hx_e;
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g1 = _hx_e;
			{
				null();
			}
			if (!(::Std_obj::isOfType(_g1->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
				HX_STACK_DO_THROW(_g1);
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return total->getBytes();
}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,readAll,return )

void Input_obj::readFullBytes( ::haxe::io::Bytes s,int pos,int len){
	while((len > 0)){
		int k = this->readBytes(s,pos,len);
		if ((k == 0)) {
			HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
		}
		pos = (pos + k);
		len = (len - k);
	}
}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,readFullBytes,(void))

 ::haxe::io::Bytes Input_obj::read(int nbytes){
	 ::haxe::io::Bytes s = ::haxe::io::Bytes_obj::alloc(nbytes);
	int p = 0;
	while((nbytes > 0)){
		int k = this->readBytes(s,p,nbytes);
		if ((k == 0)) {
			HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
		}
		p = (p + k);
		nbytes = (nbytes - k);
	}
	return s;
}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,read,return )

::String Input_obj::readUntil(int end){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
	int last;
	while(true){
		last = this->readByte();
		if (!((last != end))) {
			goto _hx_goto_5;
		}
		buf->b->push(last);
	}
	_hx_goto_5:;
	return buf->getBytes()->toString();
}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,readUntil,return )

::String Input_obj::readLine(){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
	int last;
	::String s;
	try {
		HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		while(true){
			last = this->readByte();
			if (!((last != 10))) {
				goto _hx_goto_6;
			}
			buf->b->push(last);
		}
		_hx_goto_6:;
		s = buf->getBytes()->toString();
		if (::hx::IsEq( s.charCodeAt((s.length - 1)),13 )) {
			s = s.substr(0,-1);
		}
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::io::Eof e1 = _hx_e;
			s = buf->getBytes()->toString();
			if ((s.length == 0)) {
				HX_STACK_DO_THROW(e1);
			}
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >())) {
				 ::haxe::io::Eof e1 = ( ( ::haxe::io::Eof)(_g->value) );
				{
					s = buf->getBytes()->toString();
					if ((s.length == 0)) {
						HX_STACK_DO_THROW(e1);
					}
				}
			}
			else {
				HX_STACK_DO_THROW(_g);
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
	return s;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readLine,return )

Float Input_obj::readFloat(){
	return ::haxe::io::FPHelper_obj::i32ToFloat(this->readInt32());
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readFloat,return )

Float Input_obj::readDouble(){
	int i1 = this->readInt32();
	int i2 = this->readInt32();
	if (this->bigEndian) {
		return ::haxe::io::FPHelper_obj::i64ToDouble(i2,i1);
	}
	else {
		return ::haxe::io::FPHelper_obj::i64ToDouble(i1,i2);
	}
	return ((Float)0.);
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readDouble,return )

int Input_obj::readInt8(){
	int n = this->readByte();
	if ((n >= 128)) {
		return (n - 256);
	}
	return n;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt8,return )

int Input_obj::readInt16(){
	int ch1 = this->readByte();
	int ch2 = this->readByte();
	int n;
	if (this->bigEndian) {
		n = (ch2 | (ch1 << 8));
	}
	else {
		n = (ch1 | (ch2 << 8));
	}
	if (((n & 32768) != 0)) {
		return (n - 65536);
	}
	return n;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt16,return )

int Input_obj::readUInt16(){
	int ch1 = this->readByte();
	int ch2 = this->readByte();
	if (this->bigEndian) {
		return (ch2 | (ch1 << 8));
	}
	else {
		return (ch1 | (ch2 << 8));
	}
	return 0;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readUInt16,return )

int Input_obj::readInt24(){
	int ch1 = this->readByte();
	int ch2 = this->readByte();
	int ch3 = this->readByte();
	int n;
	if (this->bigEndian) {
		n = ((ch3 | (ch2 << 8)) | (ch1 << 16));
	}
	else {
		n = ((ch1 | (ch2 << 8)) | (ch3 << 16));
	}
	if (((n & 8388608) != 0)) {
		return (n - 16777216);
	}
	return n;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt24,return )

int Input_obj::readUInt24(){
	int ch1 = this->readByte();
	int ch2 = this->readByte();
	int ch3 = this->readByte();
	if (this->bigEndian) {
		return ((ch3 | (ch2 << 8)) | (ch1 << 16));
	}
	else {
		return ((ch1 | (ch2 << 8)) | (ch3 << 16));
	}
	return 0;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readUInt24,return )

int Input_obj::readInt32(){
	int ch1 = this->readByte();
	int ch2 = this->readByte();
	int ch3 = this->readByte();
	int ch4 = this->readByte();
	if (this->bigEndian) {
		return (((ch4 | (ch3 << 8)) | (ch2 << 16)) | (ch1 << 24));
	}
	else {
		return (((ch1 | (ch2 << 8)) | (ch3 << 16)) | (ch4 << 24));
	}
	return 0;
}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt32,return )

::String Input_obj::readString(int len, ::haxe::io::Encoding encoding){
	 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(len);
	this->readFullBytes(b,0,len);
	return b->getString(0,len,encoding);
}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,readString,return )


Input_obj::Input_obj()
{
}

::hx::Val Input_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return ::hx::Val( read_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readAll") ) { return ::hx::Val( readAll_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readByte") ) { return ::hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"readLine") ) { return ::hx::Val( readLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt8") ) { return ::hx::Val( readInt8_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { return ::hx::Val( bigEndian ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return ::hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUntil") ) { return ::hx::Val( readUntil_dyn() ); }
		if (HX_FIELD_EQ(inName,"readFloat") ) { return ::hx::Val( readFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt16") ) { return ::hx::Val( readInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt24") ) { return ::hx::Val( readInt24_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt32") ) { return ::hx::Val( readInt32_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDouble") ) { return ::hx::Val( readDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUInt16") ) { return ::hx::Val( readUInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUInt24") ) { return ::hx::Val( readUInt24_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return ::hx::Val( readString_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_bigEndian") ) { return ::hx::Val( set_bigEndian_dyn() ); }
		if (HX_FIELD_EQ(inName,"readFullBytes") ) { return ::hx::Val( readFullBytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Input_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bigEndian(inValue.Cast< bool >()) );bigEndian=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Input_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bigEndian",7b,d5,5a,20));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Input_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Input_obj,bigEndian),HX_("bigEndian",7b,d5,5a,20)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Input_obj_sStaticStorageInfo = 0;
#endif

static ::String Input_obj_sMemberFields[] = {
	HX_("bigEndian",7b,d5,5a,20),
	HX_("readByte",7e,f9,1a,69),
	HX_("readBytes",35,55,7f,8e),
	HX_("close",b8,17,63,48),
	HX_("set_bigEndian",5e,8b,c4,26),
	HX_("readAll",6b,9f,c3,02),
	HX_("readFullBytes",26,02,0b,ce),
	HX_("read",56,4b,a7,4b),
	HX_("readUntil",68,05,d7,77),
	HX_("readLine",6a,f2,aa,6f),
	HX_("readFloat",66,12,7e,d3),
	HX_("readDouble",07,0f,47,2c),
	HX_("readInt8",df,1e,b3,6d),
	HX_("readInt16",5e,de,07,8f),
	HX_("readUInt16",d5,1c,8b,12),
	HX_("readInt24",3b,df,07,8f),
	HX_("readUInt24",b2,1d,8b,12),
	HX_("readInt32",18,e0,07,8f),
	HX_("readString",c7,0c,ac,0a),
	::String(null()) };

::hx::Class Input_obj::__mClass;

void Input_obj::__register()
{
	Input_obj _hx_dummy;
	Input_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.io.Input",aa,0e,f5,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Input_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Input_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
