// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_NotImplementedException
#include <haxe/exceptions/NotImplementedException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_FPHelper
#include <haxe/io/FPHelper.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif

namespace haxe{
namespace io{

void Output_obj::__construct() { }

Dynamic Output_obj::__CreateEmpty() { return new Output_obj; }

void *Output_obj::_hx_vtable = 0;

Dynamic Output_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Output_obj > _hx_result = new Output_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Output_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a55a26d;
}

void Output_obj::writeByte(int c){
            	HX_JUST_GC_STACKFRAME
	HX_STACK_DO_THROW( ::haxe::exceptions::NotImplementedException_obj::__alloc( HX_CTX ,null(),null(),::hx::SourceInfo(HX_("haxe/io/Output.hx",5d,da,8a,cb),47,HX_("haxe.io.Output",61,10,0b,c7),HX_("writeByte",87,13,d7,49))));
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeByte,(void))

int Output_obj::writeBytes( ::haxe::io::Bytes s,int pos,int len){
	bool _hx_tmp;
	bool _hx_tmp1;
	if ((pos >= 0)) {
		_hx_tmp1 = (len < 0);
	}
	else {
		_hx_tmp1 = true;
	}
	if (!(_hx_tmp1)) {
		_hx_tmp = ((pos + len) > s->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
	}
	::Array< unsigned char > b = s->b;
	int k = len;
	while((k > 0)){
		this->writeByte(( (int)(b->__get(pos)) ));
		pos = (pos + 1);
		k = (k - 1);
	}
	return len;
}


HX_DEFINE_DYNAMIC_FUNC3(Output_obj,writeBytes,return )

void Output_obj::flush(){
}


HX_DEFINE_DYNAMIC_FUNC0(Output_obj,flush,(void))

void Output_obj::close(){
}


HX_DEFINE_DYNAMIC_FUNC0(Output_obj,close,(void))

bool Output_obj::set_bigEndian(bool b){
	this->bigEndian = b;
	return b;
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,set_bigEndian,return )

void Output_obj::write( ::haxe::io::Bytes s){
	int l = s->length;
	int p = 0;
	while((l > 0)){
		int k = this->writeBytes(s,p,l);
		if ((k == 0)) {
			HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
		}
		p = (p + k);
		l = (l - k);
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,write,(void))

void Output_obj::writeFullBytes( ::haxe::io::Bytes s,int pos,int len){
	while((len > 0)){
		int k = this->writeBytes(s,pos,len);
		pos = (pos + k);
		len = (len - k);
	}
}


HX_DEFINE_DYNAMIC_FUNC3(Output_obj,writeFullBytes,(void))

void Output_obj::writeFloat(Float x){
	this->writeInt32(::haxe::io::FPHelper_obj::floatToI32(x));
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeFloat,(void))

void Output_obj::writeDouble(Float x){
	::cpp::Int64 i64 = ::haxe::io::FPHelper_obj::doubleToI64(x);
	if (this->bigEndian) {
		this->writeInt32(_hx_int64_high(i64));
		this->writeInt32(_hx_int64_low(i64));
	}
	else {
		this->writeInt32(_hx_int64_low(i64));
		this->writeInt32(_hx_int64_high(i64));
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeDouble,(void))

void Output_obj::writeInt8(int x){
	bool _hx_tmp;
	if ((x >= -128)) {
		_hx_tmp = (x >= 128);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
	}
	this->writeByte((x & 255));
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt8,(void))

void Output_obj::writeInt16(int x){
	bool _hx_tmp;
	if ((x >= -32768)) {
		_hx_tmp = (x >= 32768);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
	}
	this->writeUInt16((x & 65535));
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt16,(void))

void Output_obj::writeUInt16(int x){
	bool _hx_tmp;
	if ((x >= 0)) {
		_hx_tmp = (x >= 65536);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
	}
	if (this->bigEndian) {
		this->writeByte((x >> 8));
		this->writeByte((x & 255));
	}
	else {
		this->writeByte((x & 255));
		this->writeByte((x >> 8));
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeUInt16,(void))

void Output_obj::writeInt24(int x){
	bool _hx_tmp;
	if ((x >= -8388608)) {
		_hx_tmp = (x >= 8388608);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
	}
	this->writeUInt24((x & 16777215));
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt24,(void))

void Output_obj::writeUInt24(int x){
	bool _hx_tmp;
	if ((x >= 0)) {
		_hx_tmp = (x >= 16777216);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
	}
	if (this->bigEndian) {
		this->writeByte((x >> 16));
		this->writeByte(((x >> 8) & 255));
		this->writeByte((x & 255));
	}
	else {
		this->writeByte((x & 255));
		this->writeByte(((x >> 8) & 255));
		this->writeByte((x >> 16));
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeUInt24,(void))

void Output_obj::writeInt32(int x){
	if (this->bigEndian) {
		this->writeByte(::hx::UShr(x,24));
		this->writeByte(((x >> 16) & 255));
		this->writeByte(((x >> 8) & 255));
		this->writeByte((x & 255));
	}
	else {
		this->writeByte((x & 255));
		this->writeByte(((x >> 8) & 255));
		this->writeByte(((x >> 16) & 255));
		this->writeByte(::hx::UShr(x,24));
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt32,(void))

void Output_obj::prepare(int nbytes){
}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,prepare,(void))

void Output_obj::writeInput( ::haxe::io::Input i, ::Dynamic bufsize){
	if (::hx::IsNull( bufsize )) {
		bufsize = 4096;
	}
	 ::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(( (int)(bufsize) ));
	try {
		HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
		HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
		while(true){
			int len = i->readBytes(buf,0,( (int)(bufsize) ));
			if ((len == 0)) {
				HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
			}
			int p = 0;
			while((len > 0)){
				int k = this->writeBytes(buf,p,len);
				if ((k == 0)) {
					HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
				}
				p = (p + k);
				len = (len - k);
			}
		}
	} catch( ::Dynamic _hx_e) {
		if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::io::Eof e = _hx_e;
		}
		else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
			HX_STACK_BEGIN_CATCH
			 ::haxe::ValueException _g = _hx_e;
			{
				null();
			}
			if (!(::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
				HX_STACK_DO_THROW(_g);
			}
		}
		else {
			HX_STACK_DO_THROW(_hx_e);
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Output_obj,writeInput,(void))

void Output_obj::writeString(::String s, ::haxe::io::Encoding encoding){
	 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::ofString(s,encoding);
	this->writeFullBytes(b,0,b->length);
}


HX_DEFINE_DYNAMIC_FUNC2(Output_obj,writeString,(void))


Output_obj::Output_obj()
{
}

::hx::Val Output_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { return ::hx::Val( flush_dyn() ); }
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"prepare") ) { return ::hx::Val( prepare_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { return ::hx::Val( bigEndian ); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return ::hx::Val( writeByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInt8") ) { return ::hx::Val( writeInt8_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return ::hx::Val( writeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeFloat") ) { return ::hx::Val( writeFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInt16") ) { return ::hx::Val( writeInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInt24") ) { return ::hx::Val( writeInt24_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInt32") ) { return ::hx::Val( writeInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInput") ) { return ::hx::Val( writeInput_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"writeDouble") ) { return ::hx::Val( writeDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUInt16") ) { return ::hx::Val( writeUInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUInt24") ) { return ::hx::Val( writeUInt24_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeString") ) { return ::hx::Val( writeString_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_bigEndian") ) { return ::hx::Val( set_bigEndian_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"writeFullBytes") ) { return ::hx::Val( writeFullBytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Output_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bigEndian(inValue.Cast< bool >()) );bigEndian=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Output_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bigEndian",7b,d5,5a,20));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Output_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Output_obj,bigEndian),HX_("bigEndian",7b,d5,5a,20)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Output_obj_sStaticStorageInfo = 0;
#endif

static ::String Output_obj_sMemberFields[] = {
	HX_("bigEndian",7b,d5,5a,20),
	HX_("writeByte",87,13,d7,49),
	HX_("writeBytes",0c,03,5a,52),
	HX_("flush",c4,62,9b,02),
	HX_("close",b8,17,63,48),
	HX_("set_bigEndian",5e,8b,c4,26),
	HX_("write",df,6c,59,d0),
	HX_("writeFullBytes",7d,e7,66,a4),
	HX_("writeFloat",3d,c0,58,97),
	HX_("writeDouble",50,7d,c4,c7),
	HX_("writeInt8",e8,38,6f,4e),
	HX_("writeInt16",35,8c,e2,52),
	HX_("writeUInt16",1e,8b,08,ae),
	HX_("writeInt24",12,8d,e2,52),
	HX_("writeUInt24",fb,8b,08,ae),
	HX_("writeInt32",ef,8d,e2,52),
	HX_("prepare",87,91,dd,37),
	HX_("writeInput",ab,be,df,52),
	HX_("writeString",10,7b,29,a6),
	::String(null()) };

::hx::Class Output_obj::__mClass;

void Output_obj::__register()
{
	Output_obj _hx_dummy;
	Output_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.io.Output",61,10,0b,c7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Output_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Output_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Output_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Output_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
