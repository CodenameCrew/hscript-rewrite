// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif

static const ::String _hx_array_data_d3e3a3db_3[] = {
	HX_("\"",22,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_4[] = {
	HX_(">",3e,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_5[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_6[] = {
	HX_(">",3e,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_7[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_8[] = {
	HX_("/>",2f,29,00,00),
};
static const ::String _hx_array_data_d3e3a3db_9[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_10[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_11[] = {
	HX_("]]>",de,e2,46,00),
};
static const ::String _hx_array_data_d3e3a3db_12[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_13[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_14[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_15[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_d3e3a3db_16[] = {
	HX_("\n",0a,00,00,00),
};
namespace haxe{
namespace xml{

void Printer_obj::__construct(bool pretty){
            	HX_JUST_GC_STACKFRAME
	this->output =  ::StringBuf_obj::__alloc( HX_CTX );
	this->pretty = pretty;
}

Dynamic Printer_obj::__CreateEmpty() { return new Printer_obj; }

void *Printer_obj::_hx_vtable = 0;

Dynamic Printer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Printer_obj > _hx_result = new Printer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Printer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5ef86269;
}

void Printer_obj::writeNode( ::Xml value,::String tabs){
            	HX_JUST_GC_STACKFRAME
	switch((int)(value->nodeType)){
		case (int)0: {
			{
				::String input = (tabs + HX_("<",3c,00,00,00));
				{
					 ::StringBuf _this = this->output;
					if (::hx::IsNotNull( _this->charBuf )) {
						_this->flush();
					}
					if (::hx::IsNull( _this->b )) {
						_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input));
					}
					else {
						::Array< ::String > _this1 = _this->b;
						_this1->push(::Std_obj::string(input));
					}
				}
			}
			{
				if ((value->nodeType != ::Xml_obj::Element)) {
					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
				}
				::String input1 = value->nodeName;
				{
					 ::StringBuf _this2 = this->output;
					if (::hx::IsNotNull( _this2->charBuf )) {
						_this2->flush();
					}
					if (::hx::IsNull( _this2->b )) {
						_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input1));
					}
					else {
						::Array< ::String > _this3 = _this2->b;
						_this3->push(::Std_obj::string(input1));
					}
				}
			}
			{
				 ::Dynamic attribute = value->attributes();
				while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
					::String attribute1 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
					{
						::String input2 = ((HX_(" ",20,00,00,00) + attribute1) + HX_("=\"",45,35,00,00));
						{
							 ::StringBuf _this4 = this->output;
							if (::hx::IsNotNull( _this4->charBuf )) {
								_this4->flush();
							}
							if (::hx::IsNull( _this4->b )) {
								_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input2));
							}
							else {
								::Array< ::String > _this5 = _this4->b;
								_this5->push(::Std_obj::string(input2));
							}
						}
					}
					{
						::String input3 = ::StringTools_obj::htmlEscape(value->get(attribute1),true);
						{
							 ::StringBuf _this6 = this->output;
							if (::hx::IsNotNull( _this6->charBuf )) {
								_this6->flush();
							}
							if (::hx::IsNull( _this6->b )) {
								_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input3));
							}
							else {
								::Array< ::String > _this7 = _this6->b;
								_this7->push(::Std_obj::string(input3));
							}
						}
					}
					{
						 ::StringBuf _this8 = this->output;
						if (::hx::IsNotNull( _this8->charBuf )) {
							_this8->flush();
						}
						if (::hx::IsNull( _this8->b )) {
							_this8->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_3,1);
						}
						else {
							_this8->b->push(HX_("\"",22,00,00,00));
						}
					}
				}
			}
			if (this->hasChildren(value)) {
				{
					 ::StringBuf _this9 = this->output;
					if (::hx::IsNotNull( _this9->charBuf )) {
						_this9->flush();
					}
					if (::hx::IsNull( _this9->b )) {
						_this9->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_4,1);
					}
					else {
						_this9->b->push(HX_(">",3e,00,00,00));
					}
				}
				if (this->pretty) {
					 ::StringBuf _this10 = this->output;
					if (::hx::IsNotNull( _this10->charBuf )) {
						_this10->flush();
					}
					if (::hx::IsNull( _this10->b )) {
						_this10->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_5,1);
					}
					else {
						_this10->b->push(HX_("\n",0a,00,00,00));
					}
				}
				{
					bool _hx_tmp;
					if ((value->nodeType != ::Xml_obj::Document)) {
						_hx_tmp = (value->nodeType != ::Xml_obj::Element);
					}
					else {
						_hx_tmp = false;
					}
					if (_hx_tmp) {
						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
					}
					::Array< ::Dynamic> _this11 = value->children;
					int _g_current = 0;
					while((_g_current < _this11->length)){
						_g_current = (_g_current + 1);
						::String _hx_tmp1;
						if (this->pretty) {
							_hx_tmp1 = (tabs + HX_("\t",09,00,00,00));
						}
						else {
							_hx_tmp1 = tabs;
						}
						this->writeNode(_this11->__get((_g_current - 1)).StaticCast<  ::Xml >(),_hx_tmp1);
					}
				}
				{
					::String input4 = (tabs + HX_("</",73,34,00,00));
					{
						 ::StringBuf _this12 = this->output;
						if (::hx::IsNotNull( _this12->charBuf )) {
							_this12->flush();
						}
						if (::hx::IsNull( _this12->b )) {
							_this12->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input4));
						}
						else {
							::Array< ::String > _this13 = _this12->b;
							_this13->push(::Std_obj::string(input4));
						}
					}
				}
				{
					if ((value->nodeType != ::Xml_obj::Element)) {
						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
					}
					::String input5 = value->nodeName;
					{
						 ::StringBuf _this14 = this->output;
						if (::hx::IsNotNull( _this14->charBuf )) {
							_this14->flush();
						}
						if (::hx::IsNull( _this14->b )) {
							_this14->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input5));
						}
						else {
							::Array< ::String > _this15 = _this14->b;
							_this15->push(::Std_obj::string(input5));
						}
					}
				}
				{
					 ::StringBuf _this16 = this->output;
					if (::hx::IsNotNull( _this16->charBuf )) {
						_this16->flush();
					}
					if (::hx::IsNull( _this16->b )) {
						_this16->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_6,1);
					}
					else {
						_this16->b->push(HX_(">",3e,00,00,00));
					}
				}
				if (this->pretty) {
					 ::StringBuf _this17 = this->output;
					if (::hx::IsNotNull( _this17->charBuf )) {
						_this17->flush();
					}
					if (::hx::IsNull( _this17->b )) {
						_this17->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_7,1);
					}
					else {
						_this17->b->push(HX_("\n",0a,00,00,00));
					}
				}
			}
			else {
				{
					 ::StringBuf _this18 = this->output;
					if (::hx::IsNotNull( _this18->charBuf )) {
						_this18->flush();
					}
					if (::hx::IsNull( _this18->b )) {
						_this18->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_8,1);
					}
					else {
						_this18->b->push(HX_("/>",2f,29,00,00));
					}
				}
				if (this->pretty) {
					 ::StringBuf _this19 = this->output;
					if (::hx::IsNotNull( _this19->charBuf )) {
						_this19->flush();
					}
					if (::hx::IsNull( _this19->b )) {
						_this19->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_9,1);
					}
					else {
						_this19->b->push(HX_("\n",0a,00,00,00));
					}
				}
			}
		}
		break;
		case (int)1: {
			bool _hx_tmp2;
			if ((value->nodeType != ::Xml_obj::Document)) {
				_hx_tmp2 = (value->nodeType == ::Xml_obj::Element);
			}
			else {
				_hx_tmp2 = true;
			}
			if (_hx_tmp2) {
				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
			}
			::String nodeValue = value->nodeValue;
			if ((nodeValue.length != 0)) {
				{
					::String input6 = (tabs + ::StringTools_obj::htmlEscape(nodeValue,null()));
					{
						 ::StringBuf _this20 = this->output;
						if (::hx::IsNotNull( _this20->charBuf )) {
							_this20->flush();
						}
						if (::hx::IsNull( _this20->b )) {
							_this20->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input6));
						}
						else {
							::Array< ::String > _this21 = _this20->b;
							_this21->push(::Std_obj::string(input6));
						}
					}
				}
				if (this->pretty) {
					 ::StringBuf _this22 = this->output;
					if (::hx::IsNotNull( _this22->charBuf )) {
						_this22->flush();
					}
					if (::hx::IsNull( _this22->b )) {
						_this22->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_10,1);
					}
					else {
						_this22->b->push(HX_("\n",0a,00,00,00));
					}
				}
			}
		}
		break;
		case (int)2: {
			{
				::String input7 = (tabs + HX_("<![CDATA[",a4,fc,95,b4));
				{
					 ::StringBuf _this23 = this->output;
					if (::hx::IsNotNull( _this23->charBuf )) {
						_this23->flush();
					}
					if (::hx::IsNull( _this23->b )) {
						_this23->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input7));
					}
					else {
						::Array< ::String > _this24 = _this23->b;
						_this24->push(::Std_obj::string(input7));
					}
				}
			}
			{
				bool _hx_tmp3;
				if ((value->nodeType != ::Xml_obj::Document)) {
					_hx_tmp3 = (value->nodeType == ::Xml_obj::Element);
				}
				else {
					_hx_tmp3 = true;
				}
				if (_hx_tmp3) {
					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
				}
				::String input8 = value->nodeValue;
				{
					 ::StringBuf _this25 = this->output;
					if (::hx::IsNotNull( _this25->charBuf )) {
						_this25->flush();
					}
					if (::hx::IsNull( _this25->b )) {
						_this25->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input8));
					}
					else {
						::Array< ::String > _this26 = _this25->b;
						_this26->push(::Std_obj::string(input8));
					}
				}
			}
			{
				 ::StringBuf _this27 = this->output;
				if (::hx::IsNotNull( _this27->charBuf )) {
					_this27->flush();
				}
				if (::hx::IsNull( _this27->b )) {
					_this27->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_11,1);
				}
				else {
					_this27->b->push(HX_("]]>",de,e2,46,00));
				}
			}
			if (this->pretty) {
				 ::StringBuf _this28 = this->output;
				if (::hx::IsNotNull( _this28->charBuf )) {
					_this28->flush();
				}
				if (::hx::IsNull( _this28->b )) {
					_this28->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_12,1);
				}
				else {
					_this28->b->push(HX_("\n",0a,00,00,00));
				}
			}
		}
		break;
		case (int)3: {
			bool _hx_tmp4;
			if ((value->nodeType != ::Xml_obj::Document)) {
				_hx_tmp4 = (value->nodeType == ::Xml_obj::Element);
			}
			else {
				_hx_tmp4 = true;
			}
			if (_hx_tmp4) {
				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
			}
			::String commentContent = value->nodeValue;
			commentContent =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\n\r\t]+",59,8e,1a,2d),HX_("g",67,00,00,00))->replace(commentContent,HX_("",00,00,00,00));
			commentContent = ((HX_("<!--",05,ff,c1,27) + commentContent) + HX_("-->",de,4c,22,00));
			{
				 ::StringBuf _this29 = this->output;
				if (::hx::IsNotNull( _this29->charBuf )) {
					_this29->flush();
				}
				if (::hx::IsNull( _this29->b )) {
					_this29->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(tabs));
				}
				else {
					::Array< ::String > _this30 = _this29->b;
					_this30->push(::Std_obj::string(tabs));
				}
			}
			{
				::String input9 = ::StringTools_obj::trim(commentContent);
				{
					 ::StringBuf _this31 = this->output;
					if (::hx::IsNotNull( _this31->charBuf )) {
						_this31->flush();
					}
					if (::hx::IsNull( _this31->b )) {
						_this31->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input9));
					}
					else {
						::Array< ::String > _this32 = _this31->b;
						_this32->push(::Std_obj::string(input9));
					}
				}
			}
			if (this->pretty) {
				 ::StringBuf _this33 = this->output;
				if (::hx::IsNotNull( _this33->charBuf )) {
					_this33->flush();
				}
				if (::hx::IsNull( _this33->b )) {
					_this33->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_13,1);
				}
				else {
					_this33->b->push(HX_("\n",0a,00,00,00));
				}
			}
		}
		break;
		case (int)4: {
			{
				bool input10;
				if ((value->nodeType != ::Xml_obj::Document)) {
					input10 = (value->nodeType == ::Xml_obj::Element);
				}
				else {
					input10 = true;
				}
				if (input10) {
					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
				}
				::String input11 = ((HX_("<!DOCTYPE ",33,6c,bb,ab) + value->nodeValue) + HX_(">",3e,00,00,00));
				{
					 ::StringBuf _this34 = this->output;
					if (::hx::IsNotNull( _this34->charBuf )) {
						_this34->flush();
					}
					if (::hx::IsNull( _this34->b )) {
						_this34->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input11));
					}
					else {
						::Array< ::String > _this35 = _this34->b;
						_this35->push(::Std_obj::string(input11));
					}
				}
			}
			if (this->pretty) {
				 ::StringBuf _this36 = this->output;
				if (::hx::IsNotNull( _this36->charBuf )) {
					_this36->flush();
				}
				if (::hx::IsNull( _this36->b )) {
					_this36->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_14,1);
				}
				else {
					_this36->b->push(HX_("\n",0a,00,00,00));
				}
			}
		}
		break;
		case (int)5: {
			{
				bool input12;
				if ((value->nodeType != ::Xml_obj::Document)) {
					input12 = (value->nodeType == ::Xml_obj::Element);
				}
				else {
					input12 = true;
				}
				if (input12) {
					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
				}
				::String input13 = ((HX_("<?",83,34,00,00) + value->nodeValue) + HX_("?>",1f,37,00,00));
				{
					 ::StringBuf _this37 = this->output;
					if (::hx::IsNotNull( _this37->charBuf )) {
						_this37->flush();
					}
					if (::hx::IsNull( _this37->b )) {
						_this37->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input13));
					}
					else {
						::Array< ::String > _this38 = _this37->b;
						_this38->push(::Std_obj::string(input13));
					}
				}
			}
			if (this->pretty) {
				 ::StringBuf _this39 = this->output;
				if (::hx::IsNotNull( _this39->charBuf )) {
					_this39->flush();
				}
				if (::hx::IsNull( _this39->b )) {
					_this39->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_15,1);
				}
				else {
					_this39->b->push(HX_("\n",0a,00,00,00));
				}
			}
		}
		break;
		case (int)6: {
			bool _hx_tmp5;
			if ((value->nodeType != ::Xml_obj::Document)) {
				_hx_tmp5 = (value->nodeType != ::Xml_obj::Element);
			}
			else {
				_hx_tmp5 = false;
			}
			if (_hx_tmp5) {
				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
			}
			::Array< ::Dynamic> _this40 = value->children;
			int _g_current1 = 0;
			while((_g_current1 < _this40->length)){
				_g_current1 = (_g_current1 + 1);
				this->writeNode(_this40->__get((_g_current1 - 1)).StaticCast<  ::Xml >(),tabs);
			}
		}
		break;
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Printer_obj,writeNode,(void))

void Printer_obj::write(::String input){
	 ::StringBuf _this = this->output;
	if (::hx::IsNotNull( _this->charBuf )) {
		_this->flush();
	}
	if (::hx::IsNull( _this->b )) {
		_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(input));
	}
	else {
		::Array< ::String > _this1 = _this->b;
		_this1->push(::Std_obj::string(input));
	}
}


HX_DEFINE_DYNAMIC_FUNC1(Printer_obj,write,(void))

void Printer_obj::newline(){
	if (this->pretty) {
		 ::StringBuf _this = this->output;
		if (::hx::IsNotNull( _this->charBuf )) {
			_this->flush();
		}
		if (::hx::IsNull( _this->b )) {
			_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_d3e3a3db_16,1);
		}
		else {
			_this->b->push(HX_("\n",0a,00,00,00));
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC0(Printer_obj,newline,(void))

bool Printer_obj::hasChildren( ::Xml value){
	{
		bool _hx_tmp;
		if ((value->nodeType != ::Xml_obj::Document)) {
			_hx_tmp = (value->nodeType != ::Xml_obj::Element);
		}
		else {
			_hx_tmp = false;
		}
		if (_hx_tmp) {
			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(value->nodeType)));
		}
		::Array< ::Dynamic> _this = value->children;
		int _g_current = 0;
		while((_g_current < _this->length)){
			_g_current = (_g_current + 1);
			 ::Xml child = _this->__get((_g_current - 1)).StaticCast<  ::Xml >();
			switch((int)(child->nodeType)){
				case (int)0: case (int)1: {
					return true;
				}
				break;
				case (int)2: case (int)3: {
					bool _hx_tmp1;
					if ((child->nodeType != ::Xml_obj::Document)) {
						_hx_tmp1 = (child->nodeType == ::Xml_obj::Element);
					}
					else {
						_hx_tmp1 = true;
					}
					if (_hx_tmp1) {
						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(child->nodeType)));
					}
					if ((::StringTools_obj::ltrim(child->nodeValue).length != 0)) {
						return true;
					}
				}
				break;
				default:{
				}
			}
		}
	}
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(Printer_obj,hasChildren,return )

::String Printer_obj::print( ::Xml xml, ::Dynamic __o_pretty){
	 ::Dynamic pretty = __o_pretty;
	if (::hx::IsNull(__o_pretty)) pretty = false;
            	HX_JUST_GC_STACKFRAME
	 ::haxe::xml::Printer printer =  ::haxe::xml::Printer_obj::__alloc( HX_CTX ,( (bool)(pretty) ));
	printer->writeNode(xml,HX_("",00,00,00,00));
	return printer->output->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printer_obj,print,return )


::hx::ObjectPtr< Printer_obj > Printer_obj::__new(bool pretty) {
	::hx::ObjectPtr< Printer_obj > __this = new Printer_obj();
	__this->__construct(pretty);
	return __this;
}

::hx::ObjectPtr< Printer_obj > Printer_obj::__alloc(::hx::Ctx *_hx_ctx,bool pretty) {
	Printer_obj *__this = (Printer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Printer_obj), true, "haxe.xml.Printer"));
	*(void **)__this = Printer_obj::_hx_vtable;
	__this->__construct(pretty);
	return __this;
}

Printer_obj::Printer_obj()
{
}

void Printer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Printer);
	HX_MARK_MEMBER_NAME(output,"output");
	HX_MARK_MEMBER_NAME(pretty,"pretty");
	HX_MARK_END_CLASS();
}

void Printer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(output,"output");
	HX_VISIT_MEMBER_NAME(pretty,"pretty");
}

::hx::Val Printer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { return ::hx::Val( output ); }
		if (HX_FIELD_EQ(inName,"pretty") ) { return ::hx::Val( pretty ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"newline") ) { return ::hx::Val( newline_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"writeNode") ) { return ::hx::Val( writeNode_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasChildren") ) { return ::hx::Val( hasChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Printer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
	}
	return false;
}

::hx::Val Printer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { output=inValue.Cast<  ::StringBuf >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pretty") ) { pretty=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Printer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("output",01,0f,81,0c));
	outFields->push(HX_("pretty",b6,82,c1,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Printer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::StringBuf */ ,(int)offsetof(Printer_obj,output),HX_("output",01,0f,81,0c)},
	{::hx::fsBool,(int)offsetof(Printer_obj,pretty),HX_("pretty",b6,82,c1,ae)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Printer_obj_sStaticStorageInfo = 0;
#endif

static ::String Printer_obj_sMemberFields[] = {
	HX_("output",01,0f,81,0c),
	HX_("pretty",b6,82,c1,ae),
	HX_("writeNode",81,fe,bd,51),
	HX_("write",df,6c,59,d0),
	HX_("newline",54,98,a6,0c),
	HX_("hasChildren",b9,fe,20,43),
	::String(null()) };

::hx::Class Printer_obj::__mClass;

static ::String Printer_obj_sStaticFields[] = {
	HX_("print",2d,58,8b,c8),
	::String(null())
};

void Printer_obj::__register()
{
	Printer_obj _hx_dummy;
	Printer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.xml.Printer",db,a3,e3,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Printer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Printer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Printer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Printer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Printer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Printer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace xml
