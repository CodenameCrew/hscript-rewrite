// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Int64Helper
#include <haxe/Int64Helper.h>
#endif

namespace haxe{

void Int64Helper_obj::__construct() { }

Dynamic Int64Helper_obj::__CreateEmpty() { return new Int64Helper_obj; }

void *Int64Helper_obj::_hx_vtable = 0;

Dynamic Int64Helper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Int64Helper_obj > _hx_result = new Int64Helper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Int64Helper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03ea75b5;
}

::cpp::Int64 Int64Helper_obj::parseString(::String sParam){
	::cpp::Int64 base = ( (::cpp::Int64)(10) );
	::cpp::Int64 current = ( (::cpp::Int64)(0) );
	::cpp::Int64 multiplier = ( (::cpp::Int64)(1) );
	bool sIsNegative = false;
	::String s = ::StringTools_obj::trim(sParam);
	if ((s.charAt(0) == HX_("-",2d,00,00,00))) {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	int len = s.length;
	{
		int _g = 0;
		while((_g < len)){
			_g = (_g + 1);
			int digitInt = (( (int)(s.charCodeAt(((len - 1) - (_g - 1)))) ) - 48);
			bool _hx_tmp;
			if ((digitInt >= 0)) {
				_hx_tmp = (digitInt > 9);
			}
			else {
				_hx_tmp = true;
			}
			if (_hx_tmp) {
				HX_STACK_DO_THROW(HX_("NumberFormatError",a8,c8,6f,c1));
			}
			if ((digitInt != 0)) {
				::cpp::Int64 digit = ( (::cpp::Int64)(digitInt) );
				if (sIsNegative) {
					current = _hx_int64_sub(current,_hx_int64_mul(multiplier,digit));
					if (!(_hx_int64_is_neg(current))) {
						HX_STACK_DO_THROW(HX_("NumberFormatError: Underflow",d8,65,97,7b));
					}
				}
				else {
					current = _hx_int64_add(current,_hx_int64_mul(multiplier,digit));
					if (_hx_int64_is_neg(current)) {
						HX_STACK_DO_THROW(HX_("NumberFormatError: Overflow",b0,12,ea,e1));
					}
				}
			}
			multiplier = _hx_int64_mul(multiplier,base);
		}
	}
	return current;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64Helper_obj,parseString,return )

::cpp::Int64 Int64Helper_obj::fromFloat(Float f){
	bool _hx_tmp;
	if (!(::Math_obj::isNaN(f))) {
		_hx_tmp = !(::Math_obj::isFinite(f));
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(HX_("Number is NaN or Infinite",2d,21,08,80));
	}
	Float noFractions = (f - ::hx::Mod(f,1));
	if ((noFractions > ((Float)9007199254740991))) {
		HX_STACK_DO_THROW(HX_("Conversion overflow",6c,95,02,46));
	}
	if ((noFractions < ((Float)-9007199254740991))) {
		HX_STACK_DO_THROW(HX_("Conversion underflow",9c,47,f1,ac));
	}
	::cpp::Int64 result = ( (::cpp::Int64)(0) );
	bool neg = (noFractions < 0);
	Float rest;
	if (neg) {
		rest = -(noFractions);
	}
	else {
		rest = noFractions;
	}
	int i = 0;
	while((rest >= 1)){
		Float curr = ::hx::Mod(rest,2);
		rest = (rest / ( (Float)(2) ));
		if ((curr >= 1)) {
			result = _hx_int64_add(result,_hx_int64_shl(( (::cpp::Int64)(1) ),i));
		}
		i = (i + 1);
	}
	if (neg) {
		result = _hx_int64_neg(result);
	}
	return result;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64Helper_obj,fromFloat,return )


Int64Helper_obj::Int64Helper_obj()
{
}

bool Int64Helper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Int64Helper_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Int64Helper_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Int64Helper_obj::__mClass;

static ::String Int64Helper_obj_sStaticFields[] = {
	HX_("parseString",64,d5,6c,8c),
	HX_("fromFloat",d2,af,1f,b7),
	::String(null())
};

void Int64Helper_obj::__register()
{
	Int64Helper_obj _hx_dummy;
	Int64Helper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.Int64Helper",d3,56,31,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int64Helper_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Int64Helper_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Int64Helper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int64Helper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int64Helper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
