// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif

static const ::String _hx_array_data_f7b98003_2[] = {
	HX_("null",87,9e,0e,49),
};
static const ::String _hx_array_data_f7b98003_3[] = {
	HX_("\"<fun>\"",09,3c,cc,8b),
};
static const ::String _hx_array_data_f7b98003_4[] = {
	HX_("\"???\"",45,2f,74,bd),
};
static const ::String _hx_array_data_f7b98003_7[] = {
	HX_("\\b",86,50,00,00),
};
static const ::String _hx_array_data_f7b98003_8[] = {
	HX_("\\t",98,50,00,00),
};
static const ::String _hx_array_data_f7b98003_9[] = {
	HX_("\\n",92,50,00,00),
};
static const ::String _hx_array_data_f7b98003_10[] = {
	HX_("\\f",8a,50,00,00),
};
static const ::String _hx_array_data_f7b98003_11[] = {
	HX_("\\r",96,50,00,00),
};
static const ::String _hx_array_data_f7b98003_12[] = {
	HX_("\\\"",46,50,00,00),
};
static const ::String _hx_array_data_f7b98003_13[] = {
	HX_("\\\\",80,50,00,00),
};
namespace haxe{
namespace format{

void JsonPrinter_obj::__construct( ::Dynamic replacer,::String space){
            	HX_JUST_GC_STACKFRAME
	this->replacer = replacer;
	this->indent = space;
	this->pretty = ::hx::IsNotNull( space );
	this->nind = 0;
	this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
}

Dynamic JsonPrinter_obj::__CreateEmpty() { return new JsonPrinter_obj; }

void *JsonPrinter_obj::_hx_vtable = 0;

Dynamic JsonPrinter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< JsonPrinter_obj > _hx_result = new JsonPrinter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool JsonPrinter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x385642d1;
}

void JsonPrinter_obj::ipad(){
	if (this->pretty) {
		::String v = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
		{
			 ::StringBuf _this = this->buf;
			if (::hx::IsNotNull( _this->charBuf )) {
				_this->flush();
			}
			if (::hx::IsNull( _this->b )) {
				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v));
			}
			else {
				::Array< ::String > _this1 = _this->b;
				_this1->push(::Std_obj::string(v));
			}
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC0(JsonPrinter_obj,ipad,(void))

void JsonPrinter_obj::newl(){
	if (this->pretty) {
		 ::StringBuf _this = this->buf;
		{
			if (::hx::IsNull( _this->charBuf )) {
				_this->charBuf = ::Array_obj< char >::__new();
			}
			_this->charBuf->push(10);
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC0(JsonPrinter_obj,newl,(void))

void JsonPrinter_obj::write( ::Dynamic k, ::Dynamic v){
	if (::hx::IsNotNull( this->replacer )) {
		v = this->replacer(k,v);
	}
	{
		 ::ValueType _g = ::Type_obj::_hx_typeof(v);
		switch((int)(_g->_hx_getIndex())){
			case (int)0: {
				 ::StringBuf _this = this->buf;
				if (::hx::IsNotNull( _this->charBuf )) {
					_this->flush();
				}
				if (::hx::IsNull( _this->b )) {
					_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_2,1);
				}
				else {
					_this->b->push(HX_("null",87,9e,0e,49));
				}
			}
			break;
			case (int)1: {
				::String v1 = ( (::String)(v) );
				{
					 ::StringBuf _this1 = this->buf;
					if (::hx::IsNotNull( _this1->charBuf )) {
						_this1->flush();
					}
					if (::hx::IsNull( _this1->b )) {
						_this1->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v1));
					}
					else {
						::Array< ::String > _this2 = _this1->b;
						_this2->push(::Std_obj::string(v1));
					}
				}
			}
			break;
			case (int)2: {
				::String v2;
				if (::Math_obj::isFinite(( (Float)(v) ))) {
					v2 = ::Std_obj::string(v);
				}
				else {
					v2 = HX_("null",87,9e,0e,49);
				}
				{
					 ::StringBuf _this3 = this->buf;
					if (::hx::IsNotNull( _this3->charBuf )) {
						_this3->flush();
					}
					if (::hx::IsNull( _this3->b )) {
						_this3->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v2));
					}
					else {
						::Array< ::String > _this4 = _this3->b;
						_this4->push(::Std_obj::string(v2));
					}
				}
			}
			break;
			case (int)3: {
				::String v3 = ( (::String)(v) );
				{
					 ::StringBuf _this5 = this->buf;
					if (::hx::IsNotNull( _this5->charBuf )) {
						_this5->flush();
					}
					if (::hx::IsNull( _this5->b )) {
						_this5->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v3));
					}
					else {
						::Array< ::String > _this6 = _this5->b;
						_this6->push(::Std_obj::string(v3));
					}
				}
			}
			break;
			case (int)4: {
				this->fieldsString(v,::Reflect_obj::fields(v));
			}
			break;
			case (int)5: {
				 ::StringBuf _this7 = this->buf;
				if (::hx::IsNotNull( _this7->charBuf )) {
					_this7->flush();
				}
				if (::hx::IsNull( _this7->b )) {
					_this7->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_3,1);
				}
				else {
					_this7->b->push(HX_("\"<fun>\"",09,3c,cc,8b));
				}
			}
			break;
			case (int)6: {
				::hx::Class _g1 = _g->_hx_getObject(0).StaticCast< ::hx::Class >();
				if (::hx::IsPointerEq( _g1,::hx::ClassOf< ::String >() )) {
					this->quote(( (::String)(v) ));
				}
				else {
					if (::hx::IsPointerEq( _g1,::hx::ArrayBase::__mClass )) {
						::cpp::VirtualArray v4 = ( (::cpp::VirtualArray)(v) );
						{
							 ::StringBuf _this8 = this->buf;
							{
								if (::hx::IsNull( _this8->charBuf )) {
									_this8->charBuf = ::Array_obj< char >::__new();
								}
								_this8->charBuf->push(91);
							}
						}
						int len = v4->get_length();
						int last = (len - 1);
						{
							int _g2 = 0;
							while((_g2 < len)){
								_g2 = (_g2 + 1);
								int i = (_g2 - 1);
								if ((i > 0)) {
									 ::StringBuf _this9 = this->buf;
									{
										if (::hx::IsNull( _this9->charBuf )) {
											_this9->charBuf = ::Array_obj< char >::__new();
										}
										_this9->charBuf->push(44);
									}
								}
								else {
									this->nind++;
								}
								if (this->pretty) {
									 ::StringBuf _this10 = this->buf;
									{
										if (::hx::IsNull( _this10->charBuf )) {
											_this10->charBuf = ::Array_obj< char >::__new();
										}
										_this10->charBuf->push(10);
									}
								}
								if (this->pretty) {
									::String v5 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
									{
										 ::StringBuf _this11 = this->buf;
										if (::hx::IsNotNull( _this11->charBuf )) {
											_this11->flush();
										}
										if (::hx::IsNull( _this11->b )) {
											_this11->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v5));
										}
										else {
											::Array< ::String > _this12 = _this11->b;
											_this12->push(::Std_obj::string(v5));
										}
									}
								}
								this->write(i,v4->__get(i));
								if ((i == last)) {
									this->nind--;
									if (this->pretty) {
										 ::StringBuf _this13 = this->buf;
										{
											if (::hx::IsNull( _this13->charBuf )) {
												_this13->charBuf = ::Array_obj< char >::__new();
											}
											_this13->charBuf->push(10);
										}
									}
									if (this->pretty) {
										::String v6 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
										{
											 ::StringBuf _this14 = this->buf;
											if (::hx::IsNotNull( _this14->charBuf )) {
												_this14->flush();
											}
											if (::hx::IsNull( _this14->b )) {
												_this14->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v6));
											}
											else {
												::Array< ::String > _this15 = _this14->b;
												_this15->push(::Std_obj::string(v6));
											}
										}
									}
								}
							}
						}
						{
							 ::StringBuf _this16 = this->buf;
							{
								if (::hx::IsNull( _this16->charBuf )) {
									_this16->charBuf = ::Array_obj< char >::__new();
								}
								_this16->charBuf->push(93);
							}
						}
					}
					else {
						if (::hx::IsPointerEq( _g1,::hx::ClassOf< ::haxe::ds::StringMap >() )) {
							 ::haxe::ds::StringMap v7 = ( ( ::haxe::ds::StringMap)(v) );
							 ::Dynamic o =  ::Dynamic(::hx::Anon_obj::Create(0));
							{
								 ::Dynamic k1 = v7->keys();
								while(( (bool)(k1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
									::String k2 = ( (::String)(k1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
									::Reflect_obj::setField(o,k2,v7->get(k2));
								}
							}
							{
								 ::Dynamic v8 = o;
								this->fieldsString(v8,::Reflect_obj::fields(v8));
							}
						}
						else {
							if (::hx::IsPointerEq( _g1,::hx::ClassOf< ::Date >() )) {
								this->quote(( ( ::Date)(v) )->toString());
							}
							else {
								this->classString(v);
							}
						}
					}
				}
			}
			break;
			case (int)7: {
				::String v9 = ::Std_obj::string(_hx_getEnumValueIndex(v));
				{
					 ::StringBuf _this17 = this->buf;
					if (::hx::IsNotNull( _this17->charBuf )) {
						_this17->flush();
					}
					if (::hx::IsNull( _this17->b )) {
						_this17->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v9));
					}
					else {
						::Array< ::String > _this18 = _this17->b;
						_this18->push(::Std_obj::string(v9));
					}
				}
			}
			break;
			case (int)8: {
				 ::StringBuf _this19 = this->buf;
				if (::hx::IsNotNull( _this19->charBuf )) {
					_this19->flush();
				}
				if (::hx::IsNull( _this19->b )) {
					_this19->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_4,1);
				}
				else {
					_this19->b->push(HX_("\"???\"",45,2f,74,bd));
				}
			}
			break;
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC2(JsonPrinter_obj,write,(void))

void JsonPrinter_obj::classString( ::Dynamic v){
	this->fieldsString(v,::Type_obj::getInstanceFields(::Type_obj::getClass(v)));
}


HX_DEFINE_DYNAMIC_FUNC1(JsonPrinter_obj,classString,(void))

void JsonPrinter_obj::objString( ::Dynamic v){
	this->fieldsString(v,::Reflect_obj::fields(v));
}


HX_DEFINE_DYNAMIC_FUNC1(JsonPrinter_obj,objString,(void))

void JsonPrinter_obj::fieldsString( ::Dynamic v,::Array< ::String > fields){
	{
		 ::StringBuf _this = this->buf;
		{
			if (::hx::IsNull( _this->charBuf )) {
				_this->charBuf = ::Array_obj< char >::__new();
			}
			_this->charBuf->push(123);
		}
	}
	int len = fields->length;
	bool empty = true;
	{
		int _g = 0;
		while((_g < len)){
			_g = (_g + 1);
			::String f = fields->__get((_g - 1));
			 ::Dynamic value = ::Reflect_obj::field(v,f);
			if (::Reflect_obj::isFunction(value)) {
				continue;
			}
			if (empty) {
				this->nind++;
				empty = false;
			}
			else {
				 ::StringBuf _this1 = this->buf;
				{
					if (::hx::IsNull( _this1->charBuf )) {
						_this1->charBuf = ::Array_obj< char >::__new();
					}
					_this1->charBuf->push(44);
				}
			}
			if (this->pretty) {
				 ::StringBuf _this2 = this->buf;
				{
					if (::hx::IsNull( _this2->charBuf )) {
						_this2->charBuf = ::Array_obj< char >::__new();
					}
					_this2->charBuf->push(10);
				}
			}
			if (this->pretty) {
				::String v1 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
				{
					 ::StringBuf _this3 = this->buf;
					if (::hx::IsNotNull( _this3->charBuf )) {
						_this3->flush();
					}
					if (::hx::IsNull( _this3->b )) {
						_this3->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v1));
					}
					else {
						::Array< ::String > _this4 = _this3->b;
						_this4->push(::Std_obj::string(v1));
					}
				}
			}
			this->quote(f);
			{
				 ::StringBuf _this5 = this->buf;
				{
					if (::hx::IsNull( _this5->charBuf )) {
						_this5->charBuf = ::Array_obj< char >::__new();
					}
					_this5->charBuf->push(58);
				}
			}
			if (this->pretty) {
				 ::StringBuf _this6 = this->buf;
				{
					if (::hx::IsNull( _this6->charBuf )) {
						_this6->charBuf = ::Array_obj< char >::__new();
					}
					_this6->charBuf->push(32);
				}
			}
			this->write(f,value);
		}
	}
	if (!(empty)) {
		this->nind--;
		if (this->pretty) {
			 ::StringBuf _this7 = this->buf;
			{
				if (::hx::IsNull( _this7->charBuf )) {
					_this7->charBuf = ::Array_obj< char >::__new();
				}
				_this7->charBuf->push(10);
			}
		}
		if (this->pretty) {
			::String v2 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
			{
				 ::StringBuf _this8 = this->buf;
				if (::hx::IsNotNull( _this8->charBuf )) {
					_this8->flush();
				}
				if (::hx::IsNull( _this8->b )) {
					_this8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v2));
				}
				else {
					::Array< ::String > _this9 = _this8->b;
					_this9->push(::Std_obj::string(v2));
				}
			}
		}
	}
	{
		 ::StringBuf _this10 = this->buf;
		{
			if (::hx::IsNull( _this10->charBuf )) {
				_this10->charBuf = ::Array_obj< char >::__new();
			}
			_this10->charBuf->push(125);
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC2(JsonPrinter_obj,fieldsString,(void))

void JsonPrinter_obj::quote(::String s){
	{
		 ::StringBuf _this = this->buf;
		{
			if (::hx::IsNull( _this->charBuf )) {
				_this->charBuf = ::Array_obj< char >::__new();
			}
			_this->charBuf->push(34);
		}
	}
	int i = 0;
	int length = s.length;
	while((i < length)){
		i = (i + 1);
		int c = s.cca((i - 1));
		switch((int)(c)){
			case (int)8: {
				 ::StringBuf _this1 = this->buf;
				if (::hx::IsNotNull( _this1->charBuf )) {
					_this1->flush();
				}
				if (::hx::IsNull( _this1->b )) {
					_this1->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_7,1);
				}
				else {
					_this1->b->push(HX_("\\b",86,50,00,00));
				}
			}
			break;
			case (int)9: {
				 ::StringBuf _this2 = this->buf;
				if (::hx::IsNotNull( _this2->charBuf )) {
					_this2->flush();
				}
				if (::hx::IsNull( _this2->b )) {
					_this2->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_8,1);
				}
				else {
					_this2->b->push(HX_("\\t",98,50,00,00));
				}
			}
			break;
			case (int)10: {
				 ::StringBuf _this3 = this->buf;
				if (::hx::IsNotNull( _this3->charBuf )) {
					_this3->flush();
				}
				if (::hx::IsNull( _this3->b )) {
					_this3->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_9,1);
				}
				else {
					_this3->b->push(HX_("\\n",92,50,00,00));
				}
			}
			break;
			case (int)12: {
				 ::StringBuf _this4 = this->buf;
				if (::hx::IsNotNull( _this4->charBuf )) {
					_this4->flush();
				}
				if (::hx::IsNull( _this4->b )) {
					_this4->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_10,1);
				}
				else {
					_this4->b->push(HX_("\\f",8a,50,00,00));
				}
			}
			break;
			case (int)13: {
				 ::StringBuf _this5 = this->buf;
				if (::hx::IsNotNull( _this5->charBuf )) {
					_this5->flush();
				}
				if (::hx::IsNull( _this5->b )) {
					_this5->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_11,1);
				}
				else {
					_this5->b->push(HX_("\\r",96,50,00,00));
				}
			}
			break;
			case (int)34: {
				 ::StringBuf _this6 = this->buf;
				if (::hx::IsNotNull( _this6->charBuf )) {
					_this6->flush();
				}
				if (::hx::IsNull( _this6->b )) {
					_this6->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_12,1);
				}
				else {
					_this6->b->push(HX_("\\\"",46,50,00,00));
				}
			}
			break;
			case (int)92: {
				 ::StringBuf _this7 = this->buf;
				if (::hx::IsNotNull( _this7->charBuf )) {
					_this7->flush();
				}
				if (::hx::IsNull( _this7->b )) {
					_this7->b = ::Array_obj< ::String >::fromData( _hx_array_data_f7b98003_13,1);
				}
				else {
					_this7->b->push(HX_("\\\\",80,50,00,00));
				}
			}
			break;
			default:{
				 ::StringBuf _this8 = this->buf;
				if ((c >= 127)) {
					::String x = ::String::fromCharCode(c);
					if (::hx::IsNotNull( _this8->charBuf )) {
						_this8->flush();
					}
					if (::hx::IsNull( _this8->b )) {
						_this8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
					}
					else {
						::Array< ::String > _this9 = _this8->b;
						_this9->push(::Std_obj::string(x));
					}
				}
				else {
					if (::hx::IsNull( _this8->charBuf )) {
						_this8->charBuf = ::Array_obj< char >::__new();
					}
					_this8->charBuf->push(c);
				}
			}
		}
	}
	{
		 ::StringBuf _this10 = this->buf;
		{
			if (::hx::IsNull( _this10->charBuf )) {
				_this10->charBuf = ::Array_obj< char >::__new();
			}
			_this10->charBuf->push(34);
		}
	}
}


HX_DEFINE_DYNAMIC_FUNC1(JsonPrinter_obj,quote,(void))

::String JsonPrinter_obj::print( ::Dynamic o, ::Dynamic replacer,::String space){
            	HX_JUST_GC_STACKFRAME
	 ::haxe::format::JsonPrinter printer =  ::haxe::format::JsonPrinter_obj::__alloc( HX_CTX ,replacer,space);
	printer->write(HX_("",00,00,00,00),o);
	return printer->buf->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(JsonPrinter_obj,print,return )


::hx::ObjectPtr< JsonPrinter_obj > JsonPrinter_obj::__new( ::Dynamic replacer,::String space) {
	::hx::ObjectPtr< JsonPrinter_obj > __this = new JsonPrinter_obj();
	__this->__construct(replacer,space);
	return __this;
}

::hx::ObjectPtr< JsonPrinter_obj > JsonPrinter_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic replacer,::String space) {
	JsonPrinter_obj *__this = (JsonPrinter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(JsonPrinter_obj), true, "haxe.format.JsonPrinter"));
	*(void **)__this = JsonPrinter_obj::_hx_vtable;
	__this->__construct(replacer,space);
	return __this;
}

JsonPrinter_obj::JsonPrinter_obj()
{
}

void JsonPrinter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(JsonPrinter);
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_MEMBER_NAME(replacer,"replacer");
	HX_MARK_MEMBER_NAME(indent,"indent");
	HX_MARK_MEMBER_NAME(pretty,"pretty");
	HX_MARK_MEMBER_NAME(nind,"nind");
	HX_MARK_END_CLASS();
}

void JsonPrinter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buf,"buf");
	HX_VISIT_MEMBER_NAME(replacer,"replacer");
	HX_VISIT_MEMBER_NAME(indent,"indent");
	HX_VISIT_MEMBER_NAME(pretty,"pretty");
	HX_VISIT_MEMBER_NAME(nind,"nind");
}

::hx::Val JsonPrinter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return ::hx::Val( buf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"nind") ) { return ::hx::Val( nind ); }
		if (HX_FIELD_EQ(inName,"ipad") ) { return ::hx::Val( ipad_dyn() ); }
		if (HX_FIELD_EQ(inName,"newl") ) { return ::hx::Val( newl_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		if (HX_FIELD_EQ(inName,"quote") ) { return ::hx::Val( quote_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { return ::hx::Val( indent ); }
		if (HX_FIELD_EQ(inName,"pretty") ) { return ::hx::Val( pretty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"replacer") ) { return ::hx::Val( replacer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"objString") ) { return ::hx::Val( objString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"classString") ) { return ::hx::Val( classString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fieldsString") ) { return ::hx::Val( fieldsString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool JsonPrinter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
	}
	return false;
}

::hx::Val JsonPrinter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"nind") ) { nind=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { indent=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pretty") ) { pretty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"replacer") ) { replacer=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void JsonPrinter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buf",33,c3,4a,00));
	outFields->push(HX_("indent",6c,0c,f3,93));
	outFields->push(HX_("pretty",b6,82,c1,ae));
	outFields->push(HX_("nind",31,85,05,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo JsonPrinter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::StringBuf */ ,(int)offsetof(JsonPrinter_obj,buf),HX_("buf",33,c3,4a,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(JsonPrinter_obj,replacer),HX_("replacer",be,e5,16,18)},
	{::hx::fsString,(int)offsetof(JsonPrinter_obj,indent),HX_("indent",6c,0c,f3,93)},
	{::hx::fsBool,(int)offsetof(JsonPrinter_obj,pretty),HX_("pretty",b6,82,c1,ae)},
	{::hx::fsInt,(int)offsetof(JsonPrinter_obj,nind),HX_("nind",31,85,05,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *JsonPrinter_obj_sStaticStorageInfo = 0;
#endif

static ::String JsonPrinter_obj_sMemberFields[] = {
	HX_("buf",33,c3,4a,00),
	HX_("replacer",be,e5,16,18),
	HX_("indent",6c,0c,f3,93),
	HX_("pretty",b6,82,c1,ae),
	HX_("nind",31,85,05,49),
	HX_("ipad",8a,b8,bc,45),
	HX_("newl",0c,84,02,49),
	HX_("write",df,6c,59,d0),
	HX_("classString",29,0f,79,88),
	HX_("objString",28,00,a4,d9),
	HX_("fieldsString",2a,cc,56,34),
	HX_("quote",3c,23,f2,5d),
	::String(null()) };

::hx::Class JsonPrinter_obj::__mClass;

static ::String JsonPrinter_obj_sStaticFields[] = {
	HX_("print",2d,58,8b,c8),
	::String(null())
};

void JsonPrinter_obj::__register()
{
	JsonPrinter_obj _hx_dummy;
	JsonPrinter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.format.JsonPrinter",03,80,b9,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &JsonPrinter_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(JsonPrinter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(JsonPrinter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< JsonPrinter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JsonPrinter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JsonPrinter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace format
