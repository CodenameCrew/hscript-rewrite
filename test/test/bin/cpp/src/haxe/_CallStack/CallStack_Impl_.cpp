// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_NativeStackTrace
#include <haxe/NativeStackTrace.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif

static const ::String _hx_array_data_baffa80f_1[] = {
	HX_("\nCalled from ",bd,26,6b,81),
};
static const ::String _hx_array_data_baffa80f_5[] = {
	HX_("a C function",f4,1b,53,cb),
};
static const ::String _hx_array_data_baffa80f_6[] = {
	HX_("module ",f4,e1,fa,f7),
};
static const ::String _hx_array_data_baffa80f_7[] = {
	HX_(" (",08,1c,00,00),
};
static const ::String _hx_array_data_baffa80f_8[] = {
	HX_(" line ",8c,69,6d,40),
};
static const ::String _hx_array_data_baffa80f_9[] = {
	HX_(" column ",6a,f0,a7,19),
};
static const ::String _hx_array_data_baffa80f_10[] = {
	HX_(")",29,00,00,00),
};
static const ::String _hx_array_data_baffa80f_11[] = {
	HX_(".",2e,00,00,00),
};
static const ::String _hx_array_data_baffa80f_12[] = {
	HX_("local function #",b0,cd,97,ff),
};
namespace haxe{
namespace _CallStack{

void CallStack_Impl__obj::__construct() { }

Dynamic CallStack_Impl__obj::__CreateEmpty() { return new CallStack_Impl__obj; }

void *CallStack_Impl__obj::_hx_vtable = 0;

Dynamic CallStack_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CallStack_Impl__obj > _hx_result = new CallStack_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CallStack_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x29a173d9;
}

int CallStack_Impl__obj::get_length(::Array< ::Dynamic> this1){
	return this1->length;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,get_length,return )

::Array< ::Dynamic> CallStack_Impl__obj::callStack(){
	return ::haxe::NativeStackTrace_obj::toHaxe(::haxe::NativeStackTrace_obj::callStack(),null());
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_Impl__obj,callStack,return )

::Array< ::Dynamic> CallStack_Impl__obj::exceptionStack(::hx::Null< bool >  __o_fullStack){
	bool fullStack = __o_fullStack.Default(false);
	::Array< ::Dynamic> eStack = ::haxe::NativeStackTrace_obj::toHaxe(::haxe::NativeStackTrace_obj::exceptionStack(),null());
	::Array< ::Dynamic> this1;
	if (fullStack) {
		this1 = eStack;
	}
	else {
		this1 = ::haxe::_CallStack::CallStack_Impl__obj::subtract(eStack,::haxe::_CallStack::CallStack_Impl__obj::callStack());
	}
	return this1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,exceptionStack,return )

::String CallStack_Impl__obj::toString(::Array< ::Dynamic> stack){
            	HX_JUST_GC_STACKFRAME
	 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
	{
		int _g = 0;
		::Array< ::Dynamic> _g1 = stack;
		while((_g < _g1->length)){
			 ::haxe::StackItem s = _g1->__get(_g).StaticCast<  ::haxe::StackItem >();
			_g = (_g + 1);
			{
				if (::hx::IsNotNull( b->charBuf )) {
					b->flush();
				}
				if (::hx::IsNull( b->b )) {
					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_1,1);
				}
				else {
					b->b->push(HX_("\nCalled from ",bd,26,6b,81));
				}
			}
			::haxe::_CallStack::CallStack_Impl__obj::itemToString(b,s);
		}
	}
	return b->toString();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,toString,return )

::Array< ::Dynamic> CallStack_Impl__obj::subtract(::Array< ::Dynamic> this1,::Array< ::Dynamic> stack){
	int startIndex = -1;
	int i = -1;
	do {
		i = (i + 1);
		if (!((i < this1->length))) {
			goto _hx_goto_2;
		}
		{
			int _g = 0;
			int _g1 = stack->length;
			while((_g < _g1)){
				_g = (_g + 1);
				if (::haxe::_CallStack::CallStack_Impl__obj::equalItems(this1->__get(i).StaticCast<  ::haxe::StackItem >(),stack->__get((_g - 1)).StaticCast<  ::haxe::StackItem >())) {
					if ((startIndex < 0)) {
						startIndex = i;
					}
					i = (i + 1);
					if ((i >= this1->length)) {
						goto _hx_goto_3;
					}
				}
				else {
					startIndex = -1;
				}
			}
			_hx_goto_3:;
		}
	} while((startIndex < 0));
	_hx_goto_2:;
	if ((startIndex >= 0)) {
		return this1->slice(0,startIndex);
	}
	else {
		return this1;
	}
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,subtract,return )

::Array< ::Dynamic> CallStack_Impl__obj::copy(::Array< ::Dynamic> this1){
	return this1->copy();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,copy,return )

 ::haxe::StackItem CallStack_Impl__obj::get(::Array< ::Dynamic> this1,int index){
	return this1->__get(index).StaticCast<  ::haxe::StackItem >();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,get,return )

::Array< ::Dynamic> CallStack_Impl__obj::asArray(::Array< ::Dynamic> this1){
	return this1;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,asArray,return )

bool CallStack_Impl__obj::equalItems( ::haxe::StackItem item1, ::haxe::StackItem item2){
	if (::hx::IsNull( item1 )) {
		if (::hx::IsNull( item2 )) {
			return true;
		}
		else {
			return false;
		}
	}
	else {
		switch((int)(item1->_hx_getIndex())){
			case (int)0: {
				if (::hx::IsNull( item2 )) {
					return false;
				}
				else {
					if ((item2->_hx_getIndex() == 0)) {
						return true;
					}
					else {
						return false;
					}
				}
			}
			break;
			case (int)1: {
				if (::hx::IsNull( item2 )) {
					return false;
				}
				else {
					if ((item2->_hx_getIndex() == 1)) {
						return (item1->_hx_getString(0) == item2->_hx_getString(0));
					}
					else {
						return false;
					}
				}
			}
			break;
			case (int)2: {
				if (::hx::IsNull( item2 )) {
					return false;
				}
				else {
					if ((item2->_hx_getIndex() == 2)) {
						bool _hx_tmp;
						bool _hx_tmp1;
						if ((item1->_hx_getString(1) == item2->_hx_getString(1))) {
							_hx_tmp1 = (item1->_hx_getInt(2) == item2->_hx_getInt(2));
						}
						else {
							_hx_tmp1 = false;
						}
						if (_hx_tmp1) {
							_hx_tmp = ::hx::IsEq( item1->_hx_getObject(3),item2->_hx_getObject(3) );
						}
						else {
							_hx_tmp = false;
						}
						if (_hx_tmp) {
							return ::haxe::_CallStack::CallStack_Impl__obj::equalItems(item1->_hx_getObject(0).StaticCast<  ::haxe::StackItem >(),item2->_hx_getObject(0).StaticCast<  ::haxe::StackItem >());
						}
						else {
							return false;
						}
					}
					else {
						return false;
					}
				}
			}
			break;
			case (int)3: {
				if (::hx::IsNull( item2 )) {
					return false;
				}
				else {
					if ((item2->_hx_getIndex() == 3)) {
						if ((item1->_hx_getString(0) == item2->_hx_getString(0))) {
							return (item1->_hx_getString(1) == item2->_hx_getString(1));
						}
						else {
							return false;
						}
					}
					else {
						return false;
					}
				}
			}
			break;
			case (int)4: {
				if (::hx::IsNull( item2 )) {
					return false;
				}
				else {
					if ((item2->_hx_getIndex() == 4)) {
						return ::hx::IsEq( item1->_hx_getObject(0),item2->_hx_getObject(0) );
					}
					else {
						return false;
					}
				}
			}
			break;
		}
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,equalItems,return )

::String CallStack_Impl__obj::exceptionToString( ::haxe::Exception e){
	if (::hx::IsNull( e->get_previous() )) {
		::String _hx_tmp = (HX_("Exception: ",95,cc,ac,54) + e->toString());
		::Array< ::Dynamic> tmp = e->get_stack();
		::String _hx_tmp1;
		if (::hx::IsNull( tmp )) {
			_hx_tmp1 = HX_("null",87,9e,0e,49);
		}
		else {
			_hx_tmp1 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
		}
		return (_hx_tmp + _hx_tmp1);
	}
	::String result = HX_("",00,00,00,00);
	 ::haxe::Exception e1 = e;
	 ::haxe::Exception prev = null();
	while(::hx::IsNotNull( e1 )){
		if (::hx::IsNull( prev )) {
			::String result1 = (HX_("Exception: ",95,cc,ac,54) + e1->get_message());
			::Array< ::Dynamic> tmp1 = e1->get_stack();
			::String result2;
			if (::hx::IsNull( tmp1 )) {
				result2 = HX_("null",87,9e,0e,49);
			}
			else {
				result2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp1);
			}
			result = ((result1 + result2) + result);
		}
		else {
			::Array< ::Dynamic> prevStack = e1->get_stack();
			::Array< ::Dynamic> prevStack1 = ::haxe::_CallStack::CallStack_Impl__obj::subtract(prevStack,prev->get_stack());
			::String result3 = (HX_("Exception: ",95,cc,ac,54) + e1->get_message());
			::String result4;
			if (::hx::IsNull( prevStack1 )) {
				result4 = HX_("null",87,9e,0e,49);
			}
			else {
				result4 = ::haxe::_CallStack::CallStack_Impl__obj::toString(prevStack1);
			}
			result = (((result3 + result4) + HX_("\n\nNext ",ed,7e,c7,cb)) + result);
		}
		prev = e1;
		e1 = e1->get_previous();
	}
	return result;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,exceptionToString,return )

void CallStack_Impl__obj::itemToString( ::StringBuf b, ::haxe::StackItem s){
	switch((int)(s->_hx_getIndex())){
		case (int)0: {
			if (::hx::IsNotNull( b->charBuf )) {
				b->flush();
			}
			if (::hx::IsNull( b->b )) {
				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_5,1);
			}
			else {
				b->b->push(HX_("a C function",f4,1b,53,cb));
			}
		}
		break;
		case (int)1: {
			::String _g = s->_hx_getString(0);
			{
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_6,1);
					}
					else {
						b->b->push(HX_("module ",f4,e1,fa,f7));
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(_g));
					}
					else {
						::Array< ::String > b1 = b->b;
						b1->push(::Std_obj::string(_g));
					}
				}
			}
		}
		break;
		case (int)2: {
			 ::haxe::StackItem _g1 = s->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
			::String _g2 = s->_hx_getString(1);
			int _g3 = s->_hx_getInt(2);
			 ::Dynamic _g4 = s->_hx_getObject(3);
			{
				if (::hx::IsNotNull( _g1 )) {
					::haxe::_CallStack::CallStack_Impl__obj::itemToString(b,_g1);
					{
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_7,1);
						}
						else {
							b->b->push(HX_(" (",08,1c,00,00));
						}
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(_g2));
					}
					else {
						::Array< ::String > b2 = b->b;
						b2->push(::Std_obj::string(_g2));
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_8,1);
					}
					else {
						b->b->push(HX_(" line ",8c,69,6d,40));
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(_g3));
					}
					else {
						::Array< ::String > b3 = b->b;
						b3->push(::Std_obj::string(_g3));
					}
				}
				if (::hx::IsNotNull( _g4 )) {
					{
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_9,1);
						}
						else {
							b->b->push(HX_(" column ",6a,f0,a7,19));
						}
					}
					{
						if (::hx::IsNotNull( b->charBuf )) {
							b->flush();
						}
						if (::hx::IsNull( b->b )) {
							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(_g4));
						}
						else {
							::Array< ::String > b4 = b->b;
							b4->push(::Std_obj::string(_g4));
						}
					}
				}
				if (::hx::IsNotNull( _g1 )) {
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_10,1);
					}
					else {
						b->b->push(HX_(")",29,00,00,00));
					}
				}
			}
		}
		break;
		case (int)3: {
			::String _g5 = s->_hx_getString(0);
			::String _g6 = s->_hx_getString(1);
			{
				{
					::String x;
					if (::hx::IsNull( _g5 )) {
						x = HX_("<unknown>",b0,91,d8,da);
					}
					else {
						x = _g5;
					}
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
					}
					else {
						::Array< ::String > b5 = b->b;
						b5->push(::Std_obj::string(x));
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_11,1);
					}
					else {
						b->b->push(HX_(".",2e,00,00,00));
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(_g6));
					}
					else {
						::Array< ::String > b6 = b->b;
						b6->push(::Std_obj::string(_g6));
					}
				}
			}
		}
		break;
		case (int)4: {
			 ::Dynamic _g7 = s->_hx_getObject(0);
			{
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_12,1);
					}
					else {
						b->b->push(HX_("local function #",b0,cd,97,ff));
					}
				}
				{
					if (::hx::IsNotNull( b->charBuf )) {
						b->flush();
					}
					if (::hx::IsNull( b->b )) {
						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(_g7));
					}
					else {
						::Array< ::String > b7 = b->b;
						b7->push(::Std_obj::string(_g7));
					}
				}
			}
		}
		break;
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,itemToString,(void))


CallStack_Impl__obj::CallStack_Impl__obj()
{
}

bool CallStack_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"asArray") ) { outValue = asArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callStack") ) { outValue = callStack_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalItems") ) { outValue = equalItems_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"itemToString") ) { outValue = itemToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"exceptionToString") ) { outValue = exceptionToString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CallStack_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CallStack_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class CallStack_Impl__obj::__mClass;

static ::String CallStack_Impl__obj_sStaticFields[] = {
	HX_("get_length",af,04,8f,8f),
	HX_("callStack",ca,c1,4a,10),
	HX_("exceptionStack",79,48,56,0b),
	HX_("toString",ac,d0,6e,38),
	HX_("subtract",14,75,11,f8),
	HX_("copy",b5,bb,c4,41),
	HX_("get",96,80,4e,00),
	HX_("asArray",47,5b,69,75),
	HX_("equalItems",ac,df,65,63),
	HX_("exceptionToString",1b,04,ca,b4),
	HX_("itemToString",df,1c,98,1c),
	::String(null())
};

void CallStack_Impl__obj::__register()
{
	CallStack_Impl__obj _hx_dummy;
	CallStack_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe._CallStack.CallStack_Impl_",0f,a8,ff,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CallStack_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CallStack_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace _CallStack
