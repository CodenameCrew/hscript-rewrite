// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_StaticInterp
#define INCLUDED_hscript_StaticInterp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,Either)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(hscript,LConst)
HX_DECLARE_CLASS1(hscript,StaticInterp)

namespace hscript{


class HXCPP_CLASS_ATTRIBUTES StaticInterp_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef StaticInterp_obj OBJ_;
		StaticInterp_obj();

	public:
		enum { _hx_ClassId = 0x3139dd2d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hscript.StaticInterp")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hscript.StaticInterp"); }

		inline static ::hx::ObjectPtr< StaticInterp_obj > __new() {
			::hx::ObjectPtr< StaticInterp_obj > __this = new StaticInterp_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< StaticInterp_obj > __alloc(::hx::Ctx *_hx_ctx) {
			StaticInterp_obj *__this = (StaticInterp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StaticInterp_obj), false, "hscript.StaticInterp"));
			*(void **)__this = StaticInterp_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~StaticInterp_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("StaticInterp",42,cd,0c,85); }

		static void __boot();
		static  ::haxe::ds::StringMap staticVariables;
		static  ::Dynamic evaluateBinop(unsigned char op, ::Dynamic val1, ::Dynamic val2);
		static ::Dynamic evaluateBinop_dyn();

		static  ::Dynamic evaluateConst( ::hscript::LConst _hx_const);
		static ::Dynamic evaluateConst_dyn();

		static  ::Dynamic getMapValue( ::Dynamic map, ::Dynamic key);
		static ::Dynamic getMapValue_dyn();

		static void setMapValue( ::Dynamic map, ::Dynamic key, ::Dynamic value);
		static ::Dynamic setMapValue_dyn();

		static  ::haxe::ds::Either resolvePath(::String path);
		static ::Dynamic resolvePath_dyn();

		static  ::Dynamic resolveEnum(::hx::Class enums);
		static ::Dynamic resolveEnum_dyn();

		static  ::Dynamic getObjectField( ::Dynamic object,::String field);
		static ::Dynamic getObjectField_dyn();

		static  ::Dynamic setObjectField( ::Dynamic object,::String field, ::Dynamic value);
		static ::Dynamic setObjectField_dyn();

		static  ::Dynamic callObjectField( ::Dynamic object, ::Dynamic field,::cpp::VirtualArray args);
		static ::Dynamic callObjectField_dyn();

		static  ::Dynamic makeIterator( ::Dynamic value);
		static ::Dynamic makeIterator_dyn();

		static  ::Dynamic makeKeyValueIterator( ::Dynamic value);
		static ::Dynamic makeKeyValueIterator_dyn();

		static  ::Dynamic interpMap(::cpp::VirtualArray keys,::cpp::VirtualArray values);
		static ::Dynamic interpMap_dyn();

};

} // end namespace hscript

#endif /* INCLUDED_hscript_StaticInterp */ 
