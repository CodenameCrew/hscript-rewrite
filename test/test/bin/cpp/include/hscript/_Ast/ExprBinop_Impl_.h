// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript__Ast_ExprBinop_Impl_
#define INCLUDED_hscript__Ast_ExprBinop_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(hscript,_Ast,ExprBinop_Impl_)

namespace hscript{
namespace _Ast{


class HXCPP_CLASS_ATTRIBUTES ExprBinop_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ExprBinop_Impl__obj OBJ_;
		ExprBinop_Impl__obj();

	public:
		enum { _hx_ClassId = 0x44e6849d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hscript._Ast.ExprBinop_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hscript._Ast.ExprBinop_Impl_"); }

		inline static ::hx::ObjectPtr< ExprBinop_Impl__obj > __new() {
			::hx::ObjectPtr< ExprBinop_Impl__obj > __this = new ExprBinop_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ExprBinop_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			ExprBinop_Impl__obj *__this = (ExprBinop_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ExprBinop_Impl__obj), false, "hscript._Ast.ExprBinop_Impl_"));
			*(void **)__this = ExprBinop_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ExprBinop_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ExprBinop_Impl_",f3,78,f1,3a); }

		static void __boot();
		static unsigned char ADD;
		static unsigned char SUB;
		static unsigned char MULT;
		static unsigned char DIV;
		static unsigned char MOD;
		static unsigned char AND;
		static unsigned char OR;
		static unsigned char XOR;
		static unsigned char SHL;
		static unsigned char SHR;
		static unsigned char USHR;
		static unsigned char EQ;
		static unsigned char NEQ;
		static unsigned char GTE;
		static unsigned char LTE;
		static unsigned char GT;
		static unsigned char LT;
		static unsigned char BOR;
		static unsigned char BAND;
		static unsigned char IS;
		static unsigned char NCOAL;
		static unsigned char INTERVAL;
		static unsigned char ARROW;
		static unsigned char ASSIGN;
		static unsigned char ADD_ASSIGN;
		static unsigned char SUB_ASSIGN;
		static unsigned char MULT_ASSIGN;
		static unsigned char DIV_ASSIGN;
		static unsigned char MOD_ASSIGN;
		static unsigned char SHL_ASSIGN;
		static unsigned char SHR_ASSIGN;
		static unsigned char USHR_ASSIGN;
		static unsigned char OR_ASSIGN;
		static unsigned char AND_ASSIGN;
		static unsigned char XOR_ASSIGN;
		static unsigned char NCOAL_ASSIGN;
		static ::Array< ::Dynamic> OP_PRECEDENCE;
		static ::Array< int > OP_PRECEDENCE_LOOKUP;
		static ::Array< bool > OP_PRECEDENCE_RIGHT_ASSOCIATION;
		static  ::haxe::ds::IntMap EXPR_TO_LEXER_OP;
		static  ::Dynamic isAssign(unsigned char op);
		static ::Dynamic isAssign_dyn();

};

} // end namespace hscript
} // end namespace _Ast

#endif /* INCLUDED_hscript__Ast_ExprBinop_Impl_ */ 
