// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_Lexer
#define INCLUDED_hscript_Lexer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hscript,ErrorDef)
HX_DECLARE_CLASS1(hscript,LToken)
HX_DECLARE_CLASS1(hscript,Lexer)

namespace hscript{


class HXCPP_CLASS_ATTRIBUTES Lexer_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Lexer_obj OBJ_;
		Lexer_obj();

	public:
		enum { _hx_ClassId = 0x2183aaa1 };

		void __construct(::String fileName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hscript.Lexer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hscript.Lexer"); }
		static ::hx::ObjectPtr< Lexer_obj > __new(::String fileName);
		static ::hx::ObjectPtr< Lexer_obj > __alloc(::hx::Ctx *_hx_ctx,::String fileName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Lexer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Lexer",ec,09,92,05); }

		static void __boot();
		static ::String IDENTIFIER_CHARS;
		static ::String OPERATOR_CHARS;
		static ::Array< bool > IDENTIFIER_CHARS_LOOKUP;
		static ::Array< bool > OPERATOR_CHARS_LOOKUP;
		static ::Array< ::Dynamic> tokenize(::String input);
		static ::Dynamic tokenize_dyn();

		static ::String tokenToString( ::hscript::LToken ltoken);
		static ::Dynamic tokenToString_dyn();

		int character;
		int charCode;
		int tokenMin;
		int tokenMax;
		int line;
		::String input;
		::Array< ::Dynamic> tokens;
		::String fileName;
		::Array< ::Dynamic> create(::String string);
		::Dynamic create_dyn();

		void reset();
		::Dynamic reset_dyn();

		 ::hscript::LToken token();
		::Dynamic token_dyn();

		 ::hscript::LToken nativeToken();
		::Dynamic nativeToken_dyn();

		void push( ::hscript::LToken ltoken);
		::Dynamic push_dyn();

		::String readString(int untilCharCode,bool allowStringInterpolation);
		::Dynamic readString_dyn();

		 ::hscript::LToken comment(::String op,int charCode);
		::Dynamic comment_dyn();

		int readCharacter();
		::Dynamic readCharacter_dyn();

		void invalidChar(int characterCode);
		::Dynamic invalidChar_dyn();

		void error( ::hscript::ErrorDef err,int pmin,int pmax);
		::Dynamic error_dyn();

};

} // end namespace hscript

#endif /* INCLUDED_hscript_Lexer */ 
