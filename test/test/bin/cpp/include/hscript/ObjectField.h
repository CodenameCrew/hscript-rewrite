// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_ObjectField
#define INCLUDED_hscript_ObjectField

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hscript,Expr)
HX_DECLARE_CLASS1(hscript,ObjectField)

namespace hscript{


class HXCPP_CLASS_ATTRIBUTES ObjectField_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ObjectField_obj OBJ_;
		ObjectField_obj();

	public:
		enum { _hx_ClassId = 0x23df0908 };

		void __construct(::String name, ::hscript::Expr expr);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hscript.ObjectField")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hscript.ObjectField"); }
		static ::hx::ObjectPtr< ObjectField_obj > __new(::String name, ::hscript::Expr expr);
		static ::hx::ObjectPtr< ObjectField_obj > __alloc(::hx::Ctx *_hx_ctx,::String name, ::hscript::Expr expr);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ObjectField_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ObjectField",5b,49,f5,53); }

		::String name;
		 ::hscript::Expr expr;
};

} // end namespace hscript

#endif /* INCLUDED_hscript_ObjectField */ 
