// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_anaylzers_Inliner
#define INCLUDED_hscript_anaylzers_Inliner

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hscript,Expr)
HX_DECLARE_CLASS2(hscript,anaylzers,Inliner)

namespace hscript{
namespace anaylzers{


class HXCPP_CLASS_ATTRIBUTES Inliner_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Inliner_obj OBJ_;
		Inliner_obj();

	public:
		enum { _hx_ClassId = 0x7a25fe59 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hscript.anaylzers.Inliner")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hscript.anaylzers.Inliner"); }

		inline static ::hx::ObjectPtr< Inliner_obj > __new() {
			::hx::ObjectPtr< Inliner_obj > __this = new Inliner_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Inliner_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Inliner_obj *__this = (Inliner_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Inliner_obj), false, "hscript.anaylzers.Inliner"));
			*(void **)__this = Inliner_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Inliner_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Inliner",d9,6b,e2,4b); }

		static  ::hscript::Expr eval( ::hscript::Expr expr,::Array< ::String > vars);
		static ::Dynamic eval_dyn();

};

} // end namespace hscript
} // end namespace anaylzers

#endif /* INCLUDED_hscript_anaylzers_Inliner */ 
