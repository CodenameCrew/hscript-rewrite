// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_Parser
#define INCLUDED_hscript_Parser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(hscript,Argument)
HX_DECLARE_CLASS1(hscript,ErrorDef)
HX_DECLARE_CLASS1(hscript,Expr)
HX_DECLARE_CLASS1(hscript,ExprDef)
HX_DECLARE_CLASS1(hscript,LToken)
HX_DECLARE_CLASS1(hscript,Parser)

namespace hscript{


class HXCPP_CLASS_ATTRIBUTES Parser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Parser_obj OBJ_;
		Parser_obj();

	public:
		enum { _hx_ClassId = 0x1b857072 };

		void __construct(::String fileName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hscript.Parser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hscript.Parser"); }
		static ::hx::ObjectPtr< Parser_obj > __new(::String fileName);
		static ::hx::ObjectPtr< Parser_obj > __alloc(::hx::Ctx *_hx_ctx,::String fileName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Parser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Parser",ff,10,1d,22); }

		::Array< ::Dynamic> tokens;
		int token;
		::Array< ::String > variablesList;
		int uniqueID;
		bool publicModifier;
		bool staticModifier;
		::String fileName;
		 ::haxe::ds::StringMap preprocesorValues;
		void reset();
		::Dynamic reset_dyn();

		 ::hscript::Expr parseString(::String string);
		::Dynamic parseString_dyn();

		 ::hscript::Expr parse(::Array< ::Dynamic> tokens);
		::Dynamic parse_dyn();

		void loadBaseVariables();
		::Dynamic loadBaseVariables_dyn();

		 ::hscript::Expr parseExpr();
		::Dynamic parseExpr_dyn();

		 ::hscript::Expr parseNextExpr( ::hscript::Expr prev);
		::Dynamic parseNextExpr_dyn();

		 ::hscript::Expr parseKeyword(::String keyword);
		::Dynamic parseKeyword_dyn();

		::String parseIdent();
		::Dynamic parseIdent_dyn();

		::String parseType();
		::Dynamic parseType_dyn();

		::String parseClassName();
		::Dynamic parseClassName_dyn();

		void parseClassArgs();
		::Dynamic parseClassArgs_dyn();

		void parseStructureType();
		::Dynamic parseStructureType_dyn();

		::Array< ::Dynamic> parseParentheses();
		::Dynamic parseParentheses_dyn();

		 ::hscript::Expr parsePreprocess(::String id);
		::Dynamic parsePreprocess_dyn();

		void parsePreprocessBlock(::Array< ::Dynamic> exprs,bool active);
		::Dynamic parsePreprocessBlock_dyn();

		bool parsePreprocessCond(::hx::Null< bool >  nullify);
		::Dynamic parsePreprocessCond_dyn();

		::String getPreprocessError();
		::Dynamic getPreprocessError_dyn();

		 ::Dynamic evalPreprocessCond( ::hscript::Expr expr);
		::Dynamic evalPreprocessCond_dyn();

		 ::hscript::Expr parseBinop(unsigned char op, ::hscript::Expr left, ::hscript::Expr right);
		::Dynamic parseBinop_dyn();

		 ::hscript::Expr parseUnop(unsigned char unop, ::hscript::Expr expr);
		::Dynamic parseUnop_dyn();

		 ::hscript::Expr parseArrayComprehensions(int temp, ::hscript::Expr expr);
		::Dynamic parseArrayComprehensions_dyn();

		 ::hscript::Expr parseMapComprehensions(int temp, ::hscript::Expr expr);
		::Dynamic parseMapComprehensions_dyn();

		bool isMapComprehension( ::hscript::Expr expr);
		::Dynamic isMapComprehension_dyn();

		::Array< ::Dynamic> parseFunctionArgs(::Array< ::Dynamic> args);
		::Dynamic parseFunctionArgs_dyn();

		 ::hscript::Expr parseObject();
		::Dynamic parseObject_dyn();

		 ::hscript::Expr stringifyExpr( ::hscript::Expr expr);
		::Dynamic stringifyExpr_dyn();

		void parseBlock(::Array< ::Dynamic> exprs);
		::Dynamic parseBlock_dyn();

		int variableID(::String string);
		::Dynamic variableID_dyn();

		 ::hscript::Expr create( ::hscript::ExprDef expr);
		::Dynamic create_dyn();

		bool isBlock( ::hscript::Expr expr);
		::Dynamic isBlock_dyn();

		bool maybe( ::hscript::LToken expected);
		::Dynamic maybe_dyn();

		void deepEnsure( ::hscript::LToken expectedToken);
		::Dynamic deepEnsure_dyn();

		void ensure( ::hscript::LToken expectedToken);
		::Dynamic ensure_dyn();

		 ::hscript::LToken readToken();
		::Dynamic readToken_dyn();

		 ::hscript::LToken readTokenInPlace();
		::Dynamic readTokenInPlace_dyn();

		 ::hscript::LToken peekToken();
		::Dynamic peekToken_dyn();

		void reverseToken();
		::Dynamic reverseToken_dyn();

		 ::Dynamic readPosition();
		::Dynamic readPosition_dyn();

		int readLine();
		::Dynamic readLine_dyn();

		 ::Dynamic expected( ::hscript::LToken want);
		::Dynamic expected_dyn();

		 ::Dynamic unexpected();
		::Dynamic unexpected_dyn();

		void error( ::hscript::ErrorDef err);
		::Dynamic error_dyn();

};

} // end namespace hscript

#endif /* INCLUDED_hscript_Parser */ 
