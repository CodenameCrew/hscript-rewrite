// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_ScriptRuntime
#define INCLUDED_hscript_ScriptRuntime

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(hscript,Error)
HX_DECLARE_CLASS1(hscript,ErrorDef)
HX_DECLARE_CLASS1(hscript,InterpLocalsImpl)
HX_DECLARE_CLASS1(hscript,ScriptRuntime)
HX_DECLARE_CLASS2(hscript,_Interp,IDeclaredVariable)
HX_DECLARE_CLASS2(hscript,_Interp,IScriptParentType)

namespace hscript{


class HXCPP_CLASS_ATTRIBUTES ScriptRuntime_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ScriptRuntime_obj OBJ_;
		ScriptRuntime_obj();

	public:
		enum { _hx_ClassId = 0x2acd4ada };

		void __construct(::String fileName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hscript.ScriptRuntime")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hscript.ScriptRuntime"); }
		static ::hx::ObjectPtr< ScriptRuntime_obj > __new(::String fileName);
		static ::hx::ObjectPtr< ScriptRuntime_obj > __alloc(::hx::Ctx *_hx_ctx,::String fileName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ScriptRuntime_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScriptRuntime",ed,85,32,3d); }

		::Array< bool > variablesDeclared;
		::Array< ::Dynamic> variablesValues;
		::Array< ::String > variableNames;
		 ::haxe::ds::StringMap variablesLookup;
		::Array< ::Dynamic> changes;
		int depth;
		bool inTry;
		 ::Dynamic returnValue;
		::String fileName;
		int lineNumber;
		 ::hscript::InterpLocalsImpl variables;
		 ::haxe::ds::StringMap publicVariables;
		 ::Dynamic errorHandler;
		Dynamic errorHandler_dyn() { return errorHandler;}
		bool hasScriptParent;
		 ::Dynamic scriptParent;
		 ::hscript::_Interp::IScriptParentType scriptParentType;
		 ::haxe::ds::StringMap scriptParentFields;
		 ::Dynamic set_scriptParent( ::Dynamic value);
		::Dynamic set_scriptParent_dyn();

		void reset();
		::Dynamic reset_dyn();

		void loadTables(::Array< ::String > info);
		::Dynamic loadTables_dyn();

		void loadBaseVariables();
		::Dynamic loadBaseVariables_dyn();

		 ::Dynamic declare(int name, ::Dynamic value);
		::Dynamic declare_dyn();

		 ::Dynamic declareReferenced(int name, ::Dynamic ref);
		::Dynamic declareReferenced_dyn();

		 ::Dynamic assign(int name, ::Dynamic value);
		::Dynamic assign_dyn();

		::cpp::VirtualArray duplicate(::cpp::VirtualArray vector);
		::Dynamic duplicate_dyn();

		int store();
		::Dynamic store_dyn();

		void restore(int oldChangesIndex);
		::Dynamic restore_dyn();

		 ::Dynamic resolve(::String varName);
		::Dynamic resolve_dyn();

		 ::Dynamic resolveGlobal(int ident);
		::Dynamic resolveGlobal_dyn();

		bool isScriptParentField(::String field);
		::Dynamic isScriptParentField_dyn();

		 ::Dynamic getScriptParentField(::String field);
		::Dynamic getScriptParentField_dyn();

		 ::Dynamic setScriptParentField(::String field, ::Dynamic value);
		::Dynamic setScriptParentField_dyn();

		 ::Dynamic error( ::hscript::ErrorDef err, ::Dynamic line);
		::Dynamic error_dyn();

};

} // end namespace hscript

#endif /* INCLUDED_hscript_ScriptRuntime */ 
