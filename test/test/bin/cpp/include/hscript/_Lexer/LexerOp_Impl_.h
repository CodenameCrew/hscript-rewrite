// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript__Lexer_LexerOp_Impl_
#define INCLUDED_hscript__Lexer_LexerOp_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(hscript,_Lexer,LexerOp_Impl_)

namespace hscript{
namespace _Lexer{


class HXCPP_CLASS_ATTRIBUTES LexerOp_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LexerOp_Impl__obj OBJ_;
		LexerOp_Impl__obj();

	public:
		enum { _hx_ClassId = 0x724b77f5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hscript._Lexer.LexerOp_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hscript._Lexer.LexerOp_Impl_"); }

		inline static ::hx::ObjectPtr< LexerOp_Impl__obj > __new() {
			::hx::ObjectPtr< LexerOp_Impl__obj > __this = new LexerOp_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< LexerOp_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			LexerOp_Impl__obj *__this = (LexerOp_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LexerOp_Impl__obj), false, "hscript._Lexer.LexerOp_Impl_"));
			*(void **)__this = LexerOp_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LexerOp_Impl__obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LexerOp_Impl_",8d,3e,4e,ff); }

		static void __boot();
		static ::String ADD;
		static ::String SUB;
		static ::String MULT;
		static ::String DIV;
		static ::String MOD;
		static ::String AND;
		static ::String OR;
		static ::String XOR;
		static ::String SHL;
		static ::String SHR;
		static ::String USHR;
		static ::String EQ;
		static ::String NEQ;
		static ::String GTE;
		static ::String LTE;
		static ::String GT;
		static ::String LT;
		static ::String BOR;
		static ::String BAND;
		static ::String IS;
		static ::String NCOAL;
		static ::String INTERVAL;
		static ::String ARROW;
		static ::String FUNCTION_ARROW;
		static ::String ASSIGN;
		static ::String ADD_ASSIGN;
		static ::String SUB_ASSIGN;
		static ::String MULT_ASSIGN;
		static ::String DIV_ASSIGN;
		static ::String MOD_ASSIGN;
		static ::String SHL_ASSIGN;
		static ::String SHR_ASSIGN;
		static ::String USHR_ASSIGN;
		static ::String OR_ASSIGN;
		static ::String AND_ASSIGN;
		static ::String XOR_ASSIGN;
		static ::String NCOAL_ASSIGN;
		static ::String NOT;
		static ::String NOT_BITWISE;
		static ::String INCREMENT;
		static ::String DECREMENT;
		static ::String COMMENT;
		static ::String COMMENT_OPEN;
		static ::String COMMENT_CLOSE;
		static ::Array< ::String > ALL_LOPS;
		static  ::haxe::ds::StringMap ALL_LOPS_LOOKUP;
		static  ::haxe::ds::StringMap LEXER_TO_EXPR_OP;
		static  ::haxe::ds::StringMap LEXER_TO_EXPR_UNOP;
};

} // end namespace hscript
} // end namespace _Lexer

#endif /* INCLUDED_hscript__Lexer_LexerOp_Impl_ */ 
