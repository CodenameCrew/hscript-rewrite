// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_Interp
#define INCLUDED_hscript_Interp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hscript_ScriptRuntime
#include <hscript/ScriptRuntime.h>
#endif
HX_DECLARE_CLASS1(hscript,Argument)
HX_DECLARE_CLASS1(hscript,EImportMode)
HX_DECLARE_CLASS1(hscript,Expr)
HX_DECLARE_CLASS1(hscript,Interp)
HX_DECLARE_CLASS1(hscript,ScriptRuntime)
HX_DECLARE_CLASS1(hscript,SwitchCase)

namespace hscript{


class HXCPP_CLASS_ATTRIBUTES Interp_obj : public  ::hscript::ScriptRuntime_obj
{
	public:
		typedef  ::hscript::ScriptRuntime_obj super;
		typedef Interp_obj OBJ_;
		Interp_obj();

	public:
		enum { _hx_ClassId = 0x2a95eb9f };

		void __construct(::String fileName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hscript.Interp")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hscript.Interp"); }
		static ::hx::ObjectPtr< Interp_obj > __new(::String fileName);
		static ::hx::ObjectPtr< Interp_obj > __alloc(::hx::Ctx *_hx_ctx,::String fileName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Interp_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Interp",f4,ed,1a,d3); }

		 ::Dynamic execute( ::hscript::Expr expr);
		::Dynamic execute_dyn();

		 ::Dynamic interpExpr( ::hscript::Expr expr);
		::Dynamic interpExpr_dyn();

		 ::Dynamic interpReturnExpr( ::hscript::Expr expr);
		::Dynamic interpReturnExpr_dyn();

		 ::Dynamic safeInterpReturnExpr( ::hscript::Expr expr);
		::Dynamic safeInterpReturnExpr_dyn();

		 ::Dynamic interpImport(::String path, ::hscript::EImportMode mode);
		::Dynamic interpImport_dyn();

		 ::Dynamic interpFunction(::Array< ::Dynamic> args, ::hscript::Expr body,int name, ::Dynamic isPublic, ::Dynamic isStatic);
		::Dynamic interpFunction_dyn();

		 ::Dynamic interpTry( ::hscript::Expr expr,int catchVar, ::hscript::Expr catchExpr);
		::Dynamic interpTry_dyn();

		void forKeyValueLoop(int key,int value, ::hscript::Expr iterator, ::hscript::Expr body);
		::Dynamic forKeyValueLoop_dyn();

		void forLoop(int varName, ::hscript::Expr iterator, ::hscript::Expr body);
		::Dynamic forLoop_dyn();

		 ::Dynamic makeIteratorExpr( ::hscript::Expr expr);
		::Dynamic makeIteratorExpr_dyn();

		 ::Dynamic makeKeyValueIteratorExpr( ::hscript::Expr expr);
		::Dynamic makeKeyValueIteratorExpr_dyn();

		void whileLoop( ::hscript::Expr cond, ::hscript::Expr body);
		::Dynamic whileLoop_dyn();

		void doWhileLoop( ::hscript::Expr cond, ::hscript::Expr body);
		::Dynamic doWhileLoop_dyn();

		bool interpLoop( ::hscript::Expr expr);
		::Dynamic interpLoop_dyn();

		 ::Dynamic interpSwitch( ::hscript::Expr expr,::Array< ::Dynamic> cases, ::hscript::Expr defaultExpr);
		::Dynamic interpSwitch_dyn();

		 ::Dynamic interpNew(int className,::cpp::VirtualArray args);
		::Dynamic interpNew_dyn();

		 ::Dynamic assignExpr( ::hscript::Expr left, ::hscript::Expr right);
		::Dynamic assignExpr_dyn();

		 ::Dynamic assignExprOp(unsigned char op, ::hscript::Expr left, ::hscript::Expr right);
		::Dynamic assignExprOp_dyn();

};

} // end namespace hscript

#endif /* INCLUDED_hscript_Interp */ 
