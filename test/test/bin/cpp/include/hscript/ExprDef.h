// Generated by Haxe 4.3.7
#ifndef INCLUDED_hscript_ExprDef
#define INCLUDED_hscript_ExprDef

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hscript,Argument)
HX_DECLARE_CLASS1(hscript,EImportMode)
HX_DECLARE_CLASS1(hscript,Expr)
HX_DECLARE_CLASS1(hscript,ExprDef)
HX_DECLARE_CLASS1(hscript,LConst)
HX_DECLARE_CLASS1(hscript,ObjectField)
HX_DECLARE_CLASS1(hscript,SwitchCase)
namespace hscript{


class ExprDef_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef ExprDef_obj OBJ_;

	public:
		ExprDef_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("hscript.ExprDef",75,c4,92,0b); }
		::String __ToString() const { return HX_("ExprDef.",be,76,8e,81) + _hx_tag; }

		static ::hscript::ExprDef EArray( ::hscript::Expr expr, ::hscript::Expr index);
		static ::Dynamic EArray_dyn();
		static ::hscript::ExprDef EArrayDecl(::Array< ::Dynamic> items);
		static ::Dynamic EArrayDecl_dyn();
		static ::hscript::ExprDef EBinop(unsigned char op, ::hscript::Expr left, ::hscript::Expr right);
		static ::Dynamic EBinop_dyn();
		static ::hscript::ExprDef EBlock(::Array< ::Dynamic> exprs);
		static ::Dynamic EBlock_dyn();
		static ::hscript::ExprDef EBreak;
		static inline ::hscript::ExprDef EBreak_dyn() { return EBreak; }
		static ::hscript::ExprDef ECall( ::hscript::Expr func,::Array< ::Dynamic> args);
		static ::Dynamic ECall_dyn();
		static ::hscript::ExprDef EConst( ::hscript::LConst c);
		static ::Dynamic EConst_dyn();
		static ::hscript::ExprDef EContinue;
		static inline ::hscript::ExprDef EContinue_dyn() { return EContinue; }
		static ::hscript::ExprDef EDoWhile( ::hscript::Expr cond, ::hscript::Expr body);
		static ::Dynamic EDoWhile_dyn();
		static ::hscript::ExprDef EField( ::hscript::Expr expr,::String field, ::Dynamic isSafe);
		static ::Dynamic EField_dyn();
		static ::hscript::ExprDef EFor(int varName, ::hscript::Expr iterator, ::hscript::Expr body);
		static ::Dynamic EFor_dyn();
		static ::hscript::ExprDef EForKeyValue(int key,int value, ::hscript::Expr iterator, ::hscript::Expr body);
		static ::Dynamic EForKeyValue_dyn();
		static ::hscript::ExprDef EFunction(::Array< ::Dynamic> args, ::hscript::Expr body,int name,bool isPublic,bool isStatic);
		static ::Dynamic EFunction_dyn();
		static ::hscript::ExprDef EIdent(int name);
		static ::Dynamic EIdent_dyn();
		static ::hscript::ExprDef EIf( ::hscript::Expr cond, ::hscript::Expr thenExpr, ::hscript::Expr elseExpr);
		static ::Dynamic EIf_dyn();
		static ::hscript::ExprDef EImport(::String path, ::hscript::EImportMode mode);
		static ::Dynamic EImport_dyn();
		static ::hscript::ExprDef EInfo(::Array< ::String > info, ::hscript::Expr expr);
		static ::Dynamic EInfo_dyn();
		static ::hscript::ExprDef EMapDecl(::Array< ::Dynamic> keys,::Array< ::Dynamic> values);
		static ::Dynamic EMapDecl_dyn();
		static ::hscript::ExprDef EMeta(::String name,::Array< ::Dynamic> args, ::hscript::Expr expr);
		static ::Dynamic EMeta_dyn();
		static ::hscript::ExprDef ENew(int className,::Array< ::Dynamic> args);
		static ::Dynamic ENew_dyn();
		static ::hscript::ExprDef EObject(::Array< ::Dynamic> fields);
		static ::Dynamic EObject_dyn();
		static ::hscript::ExprDef EParent( ::hscript::Expr expr);
		static ::Dynamic EParent_dyn();
		static ::hscript::ExprDef EReturn( ::hscript::Expr expr);
		static ::Dynamic EReturn_dyn();
		static ::hscript::ExprDef ESwitch( ::hscript::Expr expr,::Array< ::Dynamic> cases, ::hscript::Expr defaultExpr);
		static ::Dynamic ESwitch_dyn();
		static ::hscript::ExprDef ETernary( ::hscript::Expr cond, ::hscript::Expr thenExpr, ::hscript::Expr elseExpr);
		static ::Dynamic ETernary_dyn();
		static ::hscript::ExprDef EThrow( ::hscript::Expr expr);
		static ::Dynamic EThrow_dyn();
		static ::hscript::ExprDef ETry( ::hscript::Expr expr,int catchVar, ::hscript::Expr catchExpr);
		static ::Dynamic ETry_dyn();
		static ::hscript::ExprDef EUnop(unsigned char op,bool isPrefix, ::hscript::Expr expr);
		static ::Dynamic EUnop_dyn();
		static ::hscript::ExprDef EVar(int name, ::hscript::Expr init, ::Dynamic isPublic, ::Dynamic isStatic);
		static ::Dynamic EVar_dyn();
		static ::hscript::ExprDef EWhile( ::hscript::Expr cond, ::hscript::Expr body);
		static ::Dynamic EWhile_dyn();
};

} // end namespace hscript

#endif /* INCLUDED_hscript_ExprDef */ 
